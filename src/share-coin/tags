!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADDRMAN_GETADDR_MAX	server/addrman.h	162;"	d
ADDRMAN_GETADDR_MAX_PCT	server/addrman.h	159;"	d
ADDRMAN_HORIZON_DAYS	server/addrman.h	147;"	d
ADDRMAN_MAX_FAILURES	server/addrman.h	153;"	d
ADDRMAN_MIN_FAIL_DAYS	server/addrman.h	156;"	d
ADDRMAN_NEW_BUCKETS_PER_ADDRESS	server/addrman.h	141;"	d
ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP	server/addrman.h	138;"	d
ADDRMAN_NEW_BUCKET_COUNT	server/addrman.h	129;"	d
ADDRMAN_NEW_BUCKET_SIZE	server/addrman.h	132;"	d
ADDRMAN_RETRIES	server/addrman.h	150;"	d
ADDRMAN_TRIED_BUCKETS_PER_GROUP	server/addrman.h	135;"	d
ADDRMAN_TRIED_BUCKET_COUNT	server/addrman.h	123;"	d
ADDRMAN_TRIED_BUCKET_SIZE	server/addrman.h	126;"	d
ADDRMAN_TRIED_ENTRIES_INSPECT_ON_EVICT	server/addrman.h	144;"	d
APPLY	server/ui_interface.h	/^        APPLY                 = 0x00000020,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ARRAYLEN	server/util.h	40;"	d
AbortMessage	server/net.h	/^    void AbortMessage()$/;"	f	class:CNode
AcceptBlock	server/main.cpp	/^bool CBlock::AcceptBlock()$/;"	f	class:CBlock
AcceptToMemoryPool	server/main.cpp	/^bool CMerkleTx::AcceptToMemoryPool()$/;"	f	class:CMerkleTx
AcceptToMemoryPool	server/main.cpp	/^bool CMerkleTx::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs)$/;"	f	class:CMerkleTx
AcceptToMemoryPool	server/main.cpp	/^bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMissingInputs)$/;"	f	class:CTransaction
AcceptWalletTransaction	server/main.cpp	/^bool CWalletTx::AcceptWalletTransaction()$/;"	f	class:CWalletTx
AcceptWalletTransaction	server/main.cpp	/^bool CWalletTx::AcceptWalletTransaction(CTxDB& txdb, bool fCheckInputs)$/;"	f	class:CWalletTx
AcceptedConnection	server/bitcoinrpc.cpp	/^class AcceptedConnection$/;"	c	file:
AcceptedConnectionImpl	server/bitcoinrpc.cpp	/^    AcceptedConnectionImpl($/;"	f	class:AcceptedConnectionImpl
AcceptedConnectionImpl	server/bitcoinrpc.cpp	/^class AcceptedConnectionImpl : public AcceptedConnection$/;"	c	file:
AccountFromValue	server/bitcoinrpc.cpp	/^string AccountFromValue(const Value& value)$/;"	f
AcentryToJSON	server/bitcoinrpc.cpp	/^void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Array& ret)$/;"	f
Acquire	server/sync.h	/^    void Acquire() {$/;"	f	class:CSemaphoreGrant
Add	server/addrman.h	/^    bool Add(const CAddress &addr, const CNetAddr& source, int64 nTimePenalty = 0)$/;"	f	class:CAddrMan
Add	server/addrman.h	/^    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64 nTimePenalty = 0)$/;"	f	class:CAddrMan
AddAddressKnown	server/net.h	/^    void AddAddressKnown(const CAddress& addr)$/;"	f	class:CNode
AddCScript	server/keystore.cpp	/^bool CBasicKeyStore::AddCScript(const CScript& redeemScript)$/;"	f	class:CBasicKeyStore
AddCScript	server/wallet.cpp	/^bool CWallet::AddCScript(const CScript& redeemScript)$/;"	f	class:CWallet
AddCryptedKey	server/keystore.cpp	/^bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)$/;"	f	class:CCryptoKeyStore
AddCryptedKey	server/wallet.cpp	/^bool CWallet::AddCryptedKey(const CPubKey &vchPubKey, const vector<unsigned char> &vchCryptedSecret)$/;"	f	class:CWallet
AddInventoryKnown	server/net.h	/^    void AddInventoryKnown(const CInv& inv)$/;"	f	class:CNode
AddKey	server/keystore.cpp	/^bool CBasicKeyStore::AddKey(const CKey& key)$/;"	f	class:CBasicKeyStore
AddKey	server/keystore.cpp	/^bool CCryptoKeyStore::AddKey(const CKey& key)$/;"	f	class:CCryptoKeyStore
AddKey	server/wallet.cpp	/^bool CWallet::AddKey(const CKey& key)$/;"	f	class:CWallet
AddLocal	server_iface.cpp	/^bool AddLocal(const CNetAddr &addr, int nScore)$/;"	f
AddLocal	server_iface.cpp	/^bool AddLocal(const CService& addr, int nScore)$/;"	f
AddOneShot	server_iface.cpp	/^void AddOneShot(string strDest)$/;"	f
AddOrphanTx	server/main.cpp	/^bool AddOrphanTx(const CDataStream& vMsg)$/;"	f
AddRef	server/net.h	/^    CNode* AddRef(int64 nTimeout=0)$/;"	f	class:CNode
AddReserveKey	server/wallet.cpp	/^int64 CWallet::AddReserveKey(const CKeyPool& keypool)$/;"	f	class:CWallet
AddSupportingTransactions	server/wallet.cpp	/^void CWalletTx::AddSupportingTransactions(CTxDB& txdb)$/;"	f	class:CWalletTx
AddTimeData	server/util.cpp	/^void AddTimeData(const CNetAddr& ip, int64 nTime)$/;"	f
AddToBlockIndex	server/main.cpp	/^bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)$/;"	f	class:CBlock
AddToWallet	server/wallet.cpp	/^bool CWallet::AddToWallet(const CWalletTx& wtxIn)$/;"	f	class:CWallet
AddToWalletIfInvolvingMe	server/wallet.cpp	/^bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate, bool fFindBlock)$/;"	f	class:CWallet
AddTxIndex	server/db.cpp	/^bool CTxDB::AddTxIndex(const CTransaction& tx, const CDiskTxPos& pos, int nHeight)$/;"	f	class:CTxDB
Add_	server/addrman.cpp	/^bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64 nTimePenalty)$/;"	f	class:CAddrMan
AddressCurrentlyConnected	server_iface.cpp	/^void AddressCurrentlyConnected(const CService& addr)$/;"	f
AdvertizeLocal	server_iface.cpp	/^void static AdvertizeLocal()$/;"	f	file:
AllowFree	server/main.h	/^    static bool AllowFree(double dPriority)$/;"	f	class:CTransaction
AlreadyHave	server/main.cpp	/^bool static AlreadyHave(CTxDB& txdb, const CInv& inv)$/;"	f	file:
AmountFromValue	server/bitcoinrpc.cpp	/^int64 AmountFromValue(const Value& value)$/;"	f
AppendBlockFile	server/main.cpp	/^FILE* AppendBlockFile(unsigned int& nFileRet)$/;"	f
AppliesTo	server/main.h	/^    bool AppliesTo(int nVersion, std::string strSubVerIn) const$/;"	f	class:CAlert
AppliesToMe	server/main.h	/^    bool AppliesToMe() const$/;"	f	class:CAlert
ApproximateBestSubset	server/wallet.cpp	/^static void ApproximateBestSubset(vector<pair<int64, pair<const CWalletTx*,unsigned int> > >vValue, int64 nTotalLower, int64 nTargetValue,$/;"	f	file:
AreInputsStandard	server/main.cpp	/^bool CTransaction::AreInputsStandard(const MapPrevTx& mapInputs) const$/;"	f	class:CTransaction
AskFor	server/net.h	/^    void AskFor(const CInv& inv)$/;"	f	class:CNode
Attempt	server/addrman.h	/^    void Attempt(const CService &addr, int64 nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Attempt_	server/addrman.cpp	/^void CAddrMan::Attempt_(const CService &addr, int64 nTime)$/;"	f	class:CAddrMan
AvailableCoins	server/wallet.cpp	/^void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed) const$/;"	f	class:CWallet
BACKWARD	server/ui_interface.h	/^        BACKWARD              = 0x00002000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
BEGIN	server/util.h	36;"	d
BIP0031_VERSION	shcoind_version.h	/^static const int BIP0031_VERSION = 60000;$/;"	v
BITCOIN_ALLOCATORS_H	server/allocators.h	8;"	d
BITCOIN_BASE58_H	server/base58.h	18;"	d
BITCOIN_BIGNUM_H	server/bignum.h	8;"	d
BITCOIN_CHECKPOINT_H	server/checkpoints.h	7;"	d
BITCOIN_DB_H	server/db.h	8;"	d
BITCOIN_INIT_H	server/init.h	8;"	d
BITCOIN_IRC_H	server/irc.h	8;"	d
BITCOIN_KEYSTORE_H	server/keystore.h	7;"	d
BITCOIN_KEY_H	server/key.h	8;"	d
BITCOIN_LEVELDB_H	server/leveldb.h	5;"	d
BITCOIN_MAIN_H	server/main.h	18;"	d
BITCOIN_MRUSET_H	server/mruset.h	7;"	d
BITCOIN_NETBASE_H	server/netbase.h	7;"	d
BITCOIN_NET_H	server/net.h	8;"	d
BITCOIN_SERIALIZE_H	server/serialize.h	8;"	d
BITCOIN_STRLCPY_H	server/strlcpy.h	17;"	d
BITCOIN_SYNC_H	server/sync.h	8;"	d
BITCOIN_UINT256_H	server/uint256.h	8;"	d
BITCOIN_UI_INTERFACE_H	server/ui_interface.h	8;"	d
BITCOIN_UTIL_H	server/util.h	8;"	d
BITCOIN_WALLETDB_H	server/walletdb.h	8;"	d
BITCOIN_WALLET_H	server/wallet.h	8;"	d
BLKERR_BAD_SESSION	server_iface.h	6;"	d
BLKERR_CHECKPOINT	server_iface.h	13;"	d
BLKERR_DUPLICATE_BLOCK	server_iface.h	8;"	d
BLKERR_INVALID_BLOCK	server_iface.h	11;"	d
BLKERR_INVALID_FORMAT	server_iface.h	12;"	d
BLKERR_INVALID_JOB	server_iface.h	7;"	d
BLKERR_LOW_DIFFICULTY	server_iface.h	9;"	d
BLKERR_UNKNOWN	server_iface.h	10;"	d
BUILD_DATE	server/version.cpp	65;"	d	file:
BUILD_DATE	server/version.cpp	67;"	d	file:
BUILD_DESC	server/version.cpp	57;"	d	file:
BUILD_DESC	server/version.cpp	59;"	d	file:
BUILD_DESC_FROM_COMMIT	server/version.cpp	49;"	d	file:
BUILD_DESC_FROM_UNKNOWN	server/version.cpp	52;"	d	file:
BackupWallet	server/walletdb.cpp	/^bool BackupWallet(const CWallet& wallet, const string& strDest)$/;"	f
BeginMessage	server/net.h	/^    void BeginMessage(const char* pszCommand)$/;"	f	class:CNode
Bind	server/init.cpp	/^bool static Bind(const CService &addr, bool fError = true) {$/;"	f	file:
Bind	server_iface.cpp	/^bool static Bind(const CService &addr, bool fError = true) {$/;"	f	file:
BindListenPort	server_iface.cpp	/^bool BindListenPort(const CService &addrBind, string& strError)$/;"	f
BindServer	server_iface.cpp	/^void BindServer(void)$/;"	f
BindWallet	server/wallet.h	/^    void BindWallet(CWallet *pwalletIn)$/;"	f	class:CWalletTx
BuildMerkleTree	server/main.h	/^    uint256 BuildMerkleTree() const$/;"	f	class:CBlock
ByteReverse	server/util.h	/^inline uint32_t ByteReverse(uint32_t value)$/;"	f
CADDR_TIME_VERSION	shcoind_version.h	/^static const int CADDR_TIME_VERSION = 31402;$/;"	v
CANCEL	server/ui_interface.h	/^        CANCEL                = 0x00000010,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
CANCEL_DEFAULT	server/ui_interface.h	/^        CANCEL_DEFAULT        = 0x80000000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
CAccount	server/wallet.h	/^    CAccount()$/;"	f	class:CAccount
CAccount	server/wallet.h	/^class CAccount$/;"	c
CAccountingEntry	server/wallet.h	/^    CAccountingEntry()$/;"	f	class:CAccountingEntry
CAccountingEntry	server/wallet.h	/^class CAccountingEntry$/;"	c
CAddrDB	server/db.cpp	/^CAddrDB::CAddrDB()$/;"	f	class:CAddrDB
CAddrDB	server/db.h	/^class CAddrDB$/;"	c
CAddrInfo	server/addrman.h	/^    CAddrInfo() : CAddress(), source()$/;"	f	class:CAddrInfo
CAddrInfo	server/addrman.h	/^    CAddrInfo(const CAddress &addrIn, const CNetAddr &addrSource) : CAddress(addrIn), source(addrSource)$/;"	f	class:CAddrInfo
CAddrInfo	server/addrman.h	/^class CAddrInfo : public CAddress$/;"	c
CAddrMan	server/addrman.h	/^    CAddrMan() : vRandom(0), vvTried(ADDRMAN_TRIED_BUCKET_COUNT, std::vector<int>(0)), vvNew(ADDRMAN_NEW_BUCKET_COUNT, std::set<int>())$/;"	f	class:CAddrMan
CAddrMan	server/addrman.h	/^class CAddrMan$/;"	c
CAddress	server/protocol.cpp	/^CAddress::CAddress() : CService()$/;"	f	class:CAddress
CAddress	server/protocol.cpp	/^CAddress::CAddress(CService ipIn, uint64 nServicesIn) : CService(ipIn)$/;"	f	class:CAddress
CAddress	server/protocol.h	/^class CAddress : public CService$/;"	c
CAlert	server/main.h	/^    CAlert()$/;"	f	class:CAlert
CAlert	server/main.h	/^class CAlert : public CUnsignedAlert$/;"	c
CAutoBN_CTX	server/bignum.h	/^    CAutoBN_CTX()$/;"	f	class:CAutoBN_CTX
CAutoBN_CTX	server/bignum.h	/^class CAutoBN_CTX$/;"	c
CAutoFile	server/serialize.h	/^    CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn)$/;"	f	class:CAutoFile
CAutoFile	server/serialize.h	/^class CAutoFile$/;"	c
CBase58Data	server/base58.h	/^    CBase58Data()$/;"	f	class:CBase58Data
CBase58Data	server/base58.h	/^class CBase58Data$/;"	c
CBasicKeyStore	server/keystore.h	/^class CBasicKeyStore : public CKeyStore$/;"	c
CBigNum	server/bignum.h	/^    CBigNum()$/;"	f	class:CBigNum
CBigNum	server/bignum.h	/^    CBigNum(const CBigNum& b)$/;"	f	class:CBigNum
CBigNum	server/bignum.h	/^    CBigNum(int n)              { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	server/bignum.h	/^    CBigNum(int64 n)            { BN_init(this); setint64(n); }$/;"	f	class:CBigNum
CBigNum	server/bignum.h	/^    CBigNum(long n)             { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	server/bignum.h	/^    CBigNum(short n)            { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	server/bignum.h	/^    CBigNum(signed char n)      { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	server/bignum.h	/^    CBigNum(uint64 n)           { BN_init(this); setuint64(n); }$/;"	f	class:CBigNum
CBigNum	server/bignum.h	/^    CBigNum(unsigned char n)    { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	server/bignum.h	/^    CBigNum(unsigned int n)     { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	server/bignum.h	/^    CBigNum(unsigned long n)    { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	server/bignum.h	/^    CBigNum(unsigned short n)   { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	server/bignum.h	/^    explicit CBigNum(const std::vector<unsigned char>& vch)$/;"	f	class:CBigNum
CBigNum	server/bignum.h	/^    explicit CBigNum(uint256 n) { BN_init(this); setuint256(n); }$/;"	f	class:CBigNum
CBigNum	server/bignum.h	/^class CBigNum : public BIGNUM$/;"	c
CBitcoinAddress	server/base58.h	/^    CBitcoinAddress()$/;"	f	class:CBitcoinAddress
CBitcoinAddress	server/base58.h	/^    CBitcoinAddress(const CTxDestination &dest)$/;"	f	class:CBitcoinAddress
CBitcoinAddress	server/base58.h	/^    CBitcoinAddress(const char* pszAddress)$/;"	f	class:CBitcoinAddress
CBitcoinAddress	server/base58.h	/^    CBitcoinAddress(const std::string& strAddress)$/;"	f	class:CBitcoinAddress
CBitcoinAddress	server/base58.h	/^class CBitcoinAddress : public CBase58Data$/;"	c
CBitcoinAddressVisitor	server/base58.h	/^    CBitcoinAddressVisitor(CBitcoinAddress *addrIn) : addr(addrIn) { }$/;"	f	class:CBitcoinAddressVisitor
CBitcoinAddressVisitor	server/base58.h	/^class CBitcoinAddressVisitor : public boost::static_visitor<bool>$/;"	c
CBitcoinSecret	server/base58.h	/^    CBitcoinSecret()$/;"	f	class:CBitcoinSecret
CBitcoinSecret	server/base58.h	/^    CBitcoinSecret(const CSecret& vchSecret, bool fCompressed)$/;"	f	class:CBitcoinSecret
CBitcoinSecret	server/base58.h	/^class CBitcoinSecret : public CBase58Data$/;"	c
CBlock	server/main.h	/^    CBlock()$/;"	f	class:CBlock
CBlock	server/main.h	/^class CBlock$/;"	c
CBlockIndex	server/main.h	/^    CBlockIndex()$/;"	f	class:CBlockIndex
CBlockIndex	server/main.h	/^    CBlockIndex(unsigned int nFileIn, unsigned int nBlockPosIn, CBlock& block)$/;"	f	class:CBlockIndex
CBlockIndex	server/main.h	/^class CBlockIndex$/;"	c
CBlockLocator	server/main.h	/^    CBlockLocator()$/;"	f	class:CBlockLocator
CBlockLocator	server/main.h	/^    CBlockLocator(const std::vector<uint256>& vHaveIn)$/;"	f	class:CBlockLocator
CBlockLocator	server/main.h	/^    explicit CBlockLocator(const CBlockIndex* pindex)$/;"	f	class:CBlockLocator
CBlockLocator	server/main.h	/^    explicit CBlockLocator(uint256 hashBlock)$/;"	f	class:CBlockLocator
CBlockLocator	server/main.h	/^class CBlockLocator$/;"	c
CClientUIInterface	server/ui_interface.h	/^class CClientUIInterface$/;"	c
CCorruptAddress	server/wallet.cpp	/^class CCorruptAddress$/;"	c	file:
CCriticalBlock	server/sync.h	/^typedef CMutexLock<CCriticalSection> CCriticalBlock;$/;"	t
CCriticalSection	server/sync.h	/^typedef boost::recursive_mutex CCriticalSection;$/;"	t
CCrypter	server/crypter.h	/^    CCrypter()$/;"	f	class:CCrypter
CCrypter	server/crypter.h	/^class CCrypter$/;"	c
CCryptoKeyStore	server/keystore.h	/^    CCryptoKeyStore() : fUseCrypto(false)$/;"	f	class:CCryptoKeyStore
CCryptoKeyStore	server/keystore.h	/^class CCryptoKeyStore : public CBasicKeyStore$/;"	c
CDB	server/db.cpp	/^CDB::CDB(const char *pszFile, const char* pszMode) :$/;"	f	class:CDB
CDB	server/db.h	/^class CDB$/;"	c
CDBEnv	server/db.cpp	/^CDBEnv::CDBEnv() : dbenv(0)$/;"	f	class:CDBEnv
CDBEnv	server/db.h	/^class CDBEnv$/;"	c
CDataStream	server/serialize.h	/^    CDataStream(const char* pbegin, const char* pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	server/serialize.h	/^    CDataStream(const std::vector<char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	server/serialize.h	/^    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch((char*)&vchIn.begin()[0], (char*)&vchIn.end()[0])$/;"	f	class:CDataStream
CDataStream	server/serialize.h	/^    CDataStream(const vector_type& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	server/serialize.h	/^    CDataStream(const_iterator pbegin, const_iterator pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	server/serialize.h	/^    explicit CDataStream(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
CDataStream	server/serialize.h	/^class CDataStream$/;"	c
CDiskBlockIndex	server/main.h	/^    CDiskBlockIndex()$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	server/main.h	/^    explicit CDiskBlockIndex(CBlockIndex* pindex) : CBlockIndex(*pindex)$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	server/main.h	/^class CDiskBlockIndex : public CBlockIndex$/;"	c
CDiskTxPos	server/main.h	/^    CDiskTxPos()$/;"	f	class:CDiskTxPos
CDiskTxPos	server/main.h	/^    CDiskTxPos(unsigned int nFileIn, unsigned int nBlockPosIn, unsigned int nTxPosIn)$/;"	f	class:CDiskTxPos
CDiskTxPos	server/main.h	/^class CDiskTxPos$/;"	c
CENT	proto/conversion.h	/^static const int64 CENT = 1000000;$/;"	v
CFlatData	server/serialize.h	/^    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }$/;"	f	class:CFlatData
CFlatData	server/serialize.h	/^class CFlatData$/;"	c
CHECKSUM_OFFSET	server/protocol.h	/^            CHECKSUM_OFFSET=MESSAGE_SIZE_OFFSET+MESSAGE_SIZE_SIZE$/;"	e	enum:CMessageHeader::__anon6
CHECKSUM_SIZE	server/protocol.h	/^            CHECKSUM_SIZE=sizeof(int),$/;"	e	enum:CMessageHeader::__anon6
CHashWriter	server/util.h	/^    CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {$/;"	f	class:CHashWriter
CHashWriter	server/util.h	/^class CHashWriter$/;"	c
CInPoint	server/main.h	/^    CInPoint() { SetNull(); }$/;"	f	class:CInPoint
CInPoint	server/main.h	/^    CInPoint(CTransaction* ptxIn, unsigned int nIn) { ptx = ptxIn; n = nIn; }$/;"	f	class:CInPoint
CInPoint	server/main.h	/^class CInPoint$/;"	c
CInit	server/util.cpp	/^    CInit()$/;"	f	class:CInit
CInit	server/util.cpp	/^class CInit$/;"	c	file:
CInv	server/protocol.cpp	/^CInv::CInv()$/;"	f	class:CInv
CInv	server/protocol.cpp	/^CInv::CInv(const std::string& strType, const uint256& hashIn)$/;"	f	class:CInv
CInv	server/protocol.cpp	/^CInv::CInv(int typeIn, const uint256& hashIn)$/;"	f	class:CInv
CInv	server/protocol.h	/^class CInv$/;"	c
CKey	server/key.cpp	/^CKey::CKey()$/;"	f	class:CKey
CKey	server/key.cpp	/^CKey::CKey(const CKey& b)$/;"	f	class:CKey
CKey	server/key.h	/^class CKey$/;"	c
CKeyID	server/key.h	/^    CKeyID() : uint160(0) { }$/;"	f	class:CKeyID
CKeyID	server/key.h	/^    CKeyID(const uint160 &in) : uint160(in) { }$/;"	f	class:CKeyID
CKeyID	server/key.h	/^class CKeyID : public uint160$/;"	c
CKeyPool	server/wallet.h	/^    CKeyPool()$/;"	f	class:CKeyPool
CKeyPool	server/wallet.h	/^    CKeyPool(const CPubKey& vchPubKeyIn)$/;"	f	class:CKeyPool
CKeyPool	server/wallet.h	/^class CKeyPool$/;"	c
CKeyStore	server/keystore.h	/^class CKeyStore$/;"	c
CKeyStoreIsMineVisitor	server/script.cpp	/^    CKeyStoreIsMineVisitor(const CKeyStore *keystoreIn) : keystore(keystoreIn) { }$/;"	f	class:CKeyStoreIsMineVisitor
CKeyStoreIsMineVisitor	server/script.cpp	/^class CKeyStoreIsMineVisitor : public boost::static_visitor<bool>$/;"	c	file:
CKeyingMaterial	server/crypter.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;$/;"	t
CLIENT_VERSION	shcoind_version.h	/^static const int CLIENT_VERSION =$/;"	v
CLIENT_VERSION_BUILD	shcoind_version.h	20;"	d
CLIENT_VERSION_MAJOR	shcoind_version.h	17;"	d
CLIENT_VERSION_MINOR	shcoind_version.h	18;"	d
CLIENT_VERSION_REVISION	shcoind_version.h	19;"	d
CLIENT_VERSION_SUFFIX	server/version.cpp	18;"	d	file:
CLOSE	server/ui_interface.h	/^        CLOSE                 = 0x00000040,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
CLevelDB	server/leveldb.cpp	/^CLevelDB::CLevelDB(const boost::filesystem::path &path, size_t nCacheSize, bool fMemory, bool fWipe) {$/;"	f	class:CLevelDB
CLevelDB	server/leveldb.h	/^class CLevelDB$/;"	c
CLevelDBBatch	server/leveldb.h	/^class CLevelDBBatch$/;"	c
CLockLocation	server/sync.cpp	/^    CLockLocation(const char* pszName, const char* pszFile, int nLine)$/;"	f	struct:CLockLocation
CLockLocation	server/sync.cpp	/^struct CLockLocation$/;"	s	file:
CMasterKey	server/crypter.h	/^    CMasterKey()$/;"	f	class:CMasterKey
CMasterKey	server/crypter.h	/^class CMasterKey$/;"	c
CMedianFilter	server/util.h	/^    CMedianFilter(unsigned int size, T initial_value):$/;"	f	class:CMedianFilter
CMedianFilter	server/util.h	/^template <typename T> class CMedianFilter$/;"	c
CMerkleTx	server/main.h	/^    CMerkleTx()$/;"	f	class:CMerkleTx
CMerkleTx	server/main.h	/^    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)$/;"	f	class:CMerkleTx
CMerkleTx	server/main.h	/^class CMerkleTx : public CTransaction$/;"	c
CMessageHeader	server/protocol.cpp	/^CMessageHeader::CMessageHeader()$/;"	f	class:CMessageHeader
CMessageHeader	server/protocol.cpp	/^CMessageHeader::CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn)$/;"	f	class:CMessageHeader
CMessageHeader	server/protocol.h	/^class CMessageHeader$/;"	c
CMutexLock	server/sync.h	/^    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) : lock(mutexIn, boost::defer_lock)$/;"	f	class:CMutexLock
CMutexLock	server/sync.h	/^class CMutexLock$/;"	c
CNetAddr	server/netbase.cpp	/^CNetAddr::CNetAddr()$/;"	f	class:CNetAddr
CNetAddr	server/netbase.cpp	/^CNetAddr::CNetAddr(const char *pszIp, bool fAllowLookup)$/;"	f	class:CNetAddr
CNetAddr	server/netbase.cpp	/^CNetAddr::CNetAddr(const std::string &strIp, bool fAllowLookup)$/;"	f	class:CNetAddr
CNetAddr	server/netbase.cpp	/^CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr)$/;"	f	class:CNetAddr
CNetAddr	server/netbase.cpp	/^CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)$/;"	f	class:CNetAddr
CNetAddr	server/netbase.h	/^class CNetAddr$/;"	c
CNetCleanup	server_iface.cpp	/^    CNetCleanup()$/;"	f	class:CNetCleanup
CNetCleanup	server_iface.cpp	/^class CNetCleanup$/;"	c	file:
CNoDestination	server/script.h	/^class CNoDestination {$/;"	c
CNode	server/net.h	/^    CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn = "", bool fInboundIn=false) : vSend(SER_NETWORK, MIN_PROTO_VERSION), vRecv(SER_NETWORK, MIN_PROTO_VERSION)$/;"	f	class:CNode
CNode	server/net.h	/^class CNode$/;"	c
CNodeStats	server/net.h	/^class CNodeStats$/;"	c
COIN	proto/conversion.h	/^static const int64 COIN = 100000000;$/;"	v
COINBASE_FLAGS	server/main.cpp	/^CScript COINBASE_FLAGS;$/;"	v
COINBASE_MATURITY	server/main.h	/^static const int COINBASE_MATURITY = 100;$/;"	v
COIN_DAEMON_PORT	proto/network.h	35;"	d
COMMAND_SIZE	server/protocol.h	/^            COMMAND_SIZE=12,$/;"	e	enum:CMessageHeader::__anon6
COrphan	server/main.cpp	/^    COrphan(CTransaction* ptxIn)$/;"	f	class:COrphan
COrphan	server/main.cpp	/^class COrphan$/;"	c	file:
COutPoint	server/main.h	/^    COutPoint() { SetNull(); }$/;"	f	class:COutPoint
COutPoint	server/main.h	/^    COutPoint(uint256 hashIn, unsigned int nIn) { hash = hashIn; n = nIn; }$/;"	f	class:COutPoint
COutPoint	server/main.h	/^class COutPoint$/;"	c
COutput	server/wallet.h	/^    COutput(const CWalletTx *txIn, int iIn, int nDepthIn)$/;"	f	class:COutput
COutput	server/wallet.h	/^class COutput$/;"	c
CPrivKey	server/key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;$/;"	t
CPubKey	server/key.h	/^    CPubKey() { }$/;"	f	class:CPubKey
CPubKey	server/key.h	/^    CPubKey(const std::vector<unsigned char> &vchPubKeyIn) : vchPubKey(vchPubKeyIn) { }$/;"	f	class:CPubKey
CPubKey	server/key.h	/^class CPubKey {$/;"	c
CRPCCommand	server/bitcoinrpc.h	/^class CRPCCommand$/;"	c
CRPCTable	server/bitcoinrpc.cpp	/^CRPCTable::CRPCTable()$/;"	f	class:CRPCTable
CRPCTable	server/bitcoinrpc.h	/^class CRPCTable$/;"	c
CRequestTracker	server/net.h	/^    explicit CRequestTracker(void (*fnIn)(void*, CDataStream&)=NULL, void* param1In=NULL)$/;"	f	class:CRequestTracker
CRequestTracker	server/net.h	/^class CRequestTracker$/;"	c
CReserveKey	server/wallet.h	/^    CReserveKey(CWallet* pwalletIn)$/;"	f	class:CReserveKey
CReserveKey	server/wallet.h	/^class CReserveKey$/;"	c
CScript	server/script.h	/^    CScript() { }$/;"	f	class:CScript
CScript	server/script.h	/^    CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }$/;"	f	class:CScript
CScript	server/script.h	/^    CScript(const unsigned char* pbegin, const unsigned char* pend) : std::vector<unsigned char>(pbegin, pend) { }$/;"	f	class:CScript
CScript	server/script.h	/^    CScript(const_iterator pbegin, const_iterator pend) : std::vector<unsigned char>(pbegin, pend) { }$/;"	f	class:CScript
CScript	server/script.h	/^    explicit CScript(const CBigNum& b) { operator<<(b); }$/;"	f	class:CScript
CScript	server/script.h	/^    explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }$/;"	f	class:CScript
CScript	server/script.h	/^    explicit CScript(const uint256& b) { operator<<(b); }$/;"	f	class:CScript
CScript	server/script.h	/^    explicit CScript(int b)            { operator<<(b); }$/;"	f	class:CScript
CScript	server/script.h	/^    explicit CScript(int64 b)          { operator<<(b); }$/;"	f	class:CScript
CScript	server/script.h	/^    explicit CScript(long b)           { operator<<(b); }$/;"	f	class:CScript
CScript	server/script.h	/^    explicit CScript(opcodetype b)     { operator<<(b); }$/;"	f	class:CScript
CScript	server/script.h	/^    explicit CScript(short b)          { operator<<(b); }$/;"	f	class:CScript
CScript	server/script.h	/^    explicit CScript(signed char b)    { operator<<(b); }$/;"	f	class:CScript
CScript	server/script.h	/^    explicit CScript(uint64 b)         { operator<<(b); }$/;"	f	class:CScript
CScript	server/script.h	/^    explicit CScript(unsigned char b)  { operator<<(b); }$/;"	f	class:CScript
CScript	server/script.h	/^    explicit CScript(unsigned int b)   { operator<<(b); }$/;"	f	class:CScript
CScript	server/script.h	/^    explicit CScript(unsigned long b)  { operator<<(b); }$/;"	f	class:CScript
CScript	server/script.h	/^    explicit CScript(unsigned short b) { operator<<(b); }$/;"	f	class:CScript
CScript	server/script.h	/^class CScript : public std::vector<unsigned char>$/;"	c
CScriptID	server/key.h	/^    CScriptID() : uint160(0) { }$/;"	f	class:CScriptID
CScriptID	server/key.h	/^    CScriptID(const uint160 &in) : uint160(in) { }$/;"	f	class:CScriptID
CScriptID	server/key.h	/^class CScriptID : public uint160$/;"	c
CScriptVisitor	server/script.cpp	/^    CScriptVisitor(CScript *scriptin) { script = scriptin; }$/;"	f	class:CScriptVisitor
CScriptVisitor	server/script.cpp	/^class CScriptVisitor : public boost::static_visitor<bool>$/;"	c	file:
CSecret	server/key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CSecret;$/;"	t
CSemaphore	server/sync.h	/^    CSemaphore(int init) : value(init) {}$/;"	f	class:CSemaphore
CSemaphore	server/sync.h	/^class CSemaphore$/;"	c
CSemaphoreGrant	server/sync.h	/^    CSemaphoreGrant() : sem(NULL), fHaveGrant(false) {}$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	server/sync.h	/^    CSemaphoreGrant(CSemaphore &sema, bool fTry = false) : sem(&sema), fHaveGrant(false) {$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	server/sync.h	/^class CSemaphoreGrant$/;"	c
CSerActionGetSerializeSize	server/serialize.h	/^class CSerActionGetSerializeSize { };$/;"	c
CSerActionSerialize	server/serialize.h	/^class CSerActionSerialize { };$/;"	c
CSerActionUnserialize	server/serialize.h	/^class CSerActionUnserialize { };$/;"	c
CService	server/netbase.cpp	/^CService::CService()$/;"	f	class:CService
CService	server/netbase.cpp	/^CService::CService(const CNetAddr& cip, unsigned short portIn) : CNetAddr(cip), port(portIn)$/;"	f	class:CService
CService	server/netbase.cpp	/^CService::CService(const char *pszIpPort, bool fAllowLookup)$/;"	f	class:CService
CService	server/netbase.cpp	/^CService::CService(const char *pszIpPort, int portDefault, bool fAllowLookup)$/;"	f	class:CService
CService	server/netbase.cpp	/^CService::CService(const std::string &strIpPort, bool fAllowLookup)$/;"	f	class:CService
CService	server/netbase.cpp	/^CService::CService(const std::string &strIpPort, int portDefault, bool fAllowLookup)$/;"	f	class:CService
CService	server/netbase.cpp	/^CService::CService(const struct in6_addr& ipv6Addr, unsigned short portIn) : CNetAddr(ipv6Addr), port(portIn)$/;"	f	class:CService
CService	server/netbase.cpp	/^CService::CService(const struct in_addr& ipv4Addr, unsigned short portIn) : CNetAddr(ipv4Addr), port(portIn)$/;"	f	class:CService
CService	server/netbase.cpp	/^CService::CService(const struct sockaddr_in& addr) : CNetAddr(addr.sin_addr), port(ntohs(addr.sin_port))$/;"	f	class:CService
CService	server/netbase.cpp	/^CService::CService(const struct sockaddr_in6 &addr) : CNetAddr(addr.sin6_addr), port(ntohs(addr.sin6_port))$/;"	f	class:CService
CService	server/netbase.h	/^class CService : public CNetAddr$/;"	c
CSignatureCache	server/script.cpp	/^class CSignatureCache$/;"	c	file:
CT_DELETED	server/ui_interface.h	/^    CT_DELETED$/;"	e	enum:ChangeType
CT_NEW	server/ui_interface.h	/^    CT_NEW,$/;"	e	enum:ChangeType
CT_UPDATED	server/ui_interface.h	/^    CT_UPDATED,$/;"	e	enum:ChangeType
CTransaction	server/main.h	/^    CTransaction()$/;"	f	class:CTransaction
CTransaction	server/main.h	/^class CTransaction$/;"	c
CTxDB	server/db.h	/^    CTxDB(const char* pszMode="r+") : CDB("blkindex.dat", pszMode) { }$/;"	f	class:CTxDB
CTxDB	server/db.h	/^class CTxDB : public CDB$/;"	c
CTxDestination	server/script.h	/^typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;$/;"	t
CTxDump	server/rpcdump.cpp	/^    CTxDump(CWalletTx* ptx = NULL, int nOut = -1)$/;"	f	class:CTxDump
CTxDump	server/rpcdump.cpp	/^class CTxDump$/;"	c	file:
CTxIn	server/main.h	/^    CTxIn()$/;"	f	class:CTxIn
CTxIn	server/main.h	/^    CTxIn(uint256 hashPrevTx, unsigned int nOut, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=std::numeric_limits<unsigned int>::max())$/;"	f	class:CTxIn
CTxIn	server/main.h	/^    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=std::numeric_limits<unsigned int>::max())$/;"	f	class:CTxIn
CTxIn	server/main.h	/^class CTxIn$/;"	c
CTxIndex	server/main.h	/^    CTxIndex()$/;"	f	class:CTxIndex
CTxIndex	server/main.h	/^    CTxIndex(const CDiskTxPos& posIn, unsigned int nOutputs)$/;"	f	class:CTxIndex
CTxIndex	server/main.h	/^class CTxIndex$/;"	c
CTxMemPool	server/main.h	/^class CTxMemPool$/;"	c
CTxOut	server/main.h	/^    CTxOut()$/;"	f	class:CTxOut
CTxOut	server/main.h	/^    CTxOut(int64 nValueIn, CScript scriptPubKeyIn)$/;"	f	class:CTxOut
CTxOut	server/main.h	/^class CTxOut$/;"	c
CURRENT_VERSION	server/main.h	/^    static const int CURRENT_VERSION=1;$/;"	m	class:CBlock
CURRENT_VERSION	server/main.h	/^    static const int CURRENT_VERSION=1;$/;"	m	class:CTransaction
CUnsignedAlert	server/main.h	/^class CUnsignedAlert$/;"	c
CWaitableCriticalSection	server/sync.h	/^typedef boost::mutex CWaitableCriticalSection;$/;"	t
CWallet	server/wallet.h	/^    CWallet()$/;"	f	class:CWallet
CWallet	server/wallet.h	/^    CWallet(std::string strWalletFileIn)$/;"	f	class:CWallet
CWallet	server/wallet.h	/^class CWallet : public CCryptoKeyStore$/;"	c
CWalletDB	server/walletdb.h	/^    CWalletDB(std::string strFilename, const char* pszMode="r+") : CDB(strFilename.c_str(), pszMode)$/;"	f	class:CWalletDB
CWalletDB	server/walletdb.h	/^class CWalletDB : public CDB$/;"	c
CWalletKey	server/wallet.h	/^    CWalletKey(int64 nExpires=0)$/;"	f	class:CWalletKey
CWalletKey	server/wallet.h	/^class CWalletKey$/;"	c
CWalletTx	server/wallet.h	/^    CWalletTx()$/;"	f	class:CWalletTx
CWalletTx	server/wallet.h	/^    CWalletTx(const CWallet* pwalletIn)$/;"	f	class:CWalletTx
CWalletTx	server/wallet.h	/^    CWalletTx(const CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)$/;"	f	class:CWalletTx
CWalletTx	server/wallet.h	/^    CWalletTx(const CWallet* pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)$/;"	f	class:CWalletTx
CWalletTx	server/wallet.h	/^class CWalletTx : public CMerkleTx$/;"	c
CallRPC	server/bitcoinrpc.cpp	/^Object CallRPC(const string& strMethod, const Array& params)$/;"	f
CanSupportFeature	server/wallet.h	/^    bool CanSupportFeature(enum WalletFeature wf) { return nWalletMaxVersion >= wf; }$/;"	f	class:CWallet
Cancels	server/main.h	/^    bool Cancels(const CAlert& alert) const$/;"	f	class:CAlert
CastToBigNum	server/script.cpp	/^CBigNum CastToBigNum(const valtype& vch)$/;"	f
CastToBool	server/script.cpp	/^bool CastToBool(const valtype& vch)$/;"	f
ChangeType	server/ui_interface.h	/^enum ChangeType$/;"	g
ChangeWalletPassphrase	server/wallet.cpp	/^bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase)$/;"	f	class:CWallet
Check	server/addrman.h	/^    void Check()$/;"	f	class:CAddrMan
CheckBlock	server/checkpoints.cpp	/^    bool CheckBlock(int nHeight, const uint256& hash)$/;"	f	namespace:Checkpoints
CheckBlock	server/main.cpp	/^bool CBlock::CheckBlock() const$/;"	f	class:CBlock
CheckDiskSpace	server/main.cpp	/^bool CheckDiskSpace(uint64 nAdditionalBytes)$/;"	f
CheckIndex	server/main.h	/^    bool CheckIndex() const$/;"	f	class:CBlockIndex
CheckMerkleBranch	server/main.h	/^    static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex)$/;"	f	class:CBlock
CheckProofOfWork	server/main.cpp	/^bool CheckProofOfWork(uint256 hash, unsigned int nBits)$/;"	f
CheckSig	server/script.cpp	/^bool CheckSig(vector<unsigned char> vchSig, vector<unsigned char> vchPubKey, CScript scriptCode,$/;"	f
CheckSignature	server/main.h	/^    bool CheckSignature()$/;"	f	class:CAlert
CheckTransaction	server/main.cpp	/^bool CTransaction::CheckTransaction() const$/;"	f	class:CTransaction
CheckWork	server/main.cpp	/^bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)$/;"	f
Check_	server/addrman.cpp	/^int CAddrMan::Check_()$/;"	f	class:CAddrMan
CheckpointLSN	server/db.cpp	/^void CDBEnv::CheckpointLSN(std::string strFile)$/;"	f	class:CDBEnv
Checkpoints	server/checkpoints.cpp	/^namespace Checkpoints$/;"	n	file:
Checkpoints	server/checkpoints.h	/^namespace Checkpoints$/;"	n
CleanKey	server/crypter.h	/^    void CleanKey()$/;"	f	class:CCrypter
Cleanup	server_iface.cpp	/^void CNode::Cleanup()$/;"	f	class:CNode
ClearBanned	server_iface.cpp	/^void CNode::ClearBanned()$/;"	f	class:CNode
ClientAllowed	server/bitcoinrpc.cpp	/^bool ClientAllowed(const boost::asio::ip::address& address)$/;"	f
ClientConnectInputs	server/main.cpp	/^bool CTransaction::ClientConnectInputs()$/;"	f	class:CTransaction
Close	server/db.cpp	/^void CDB::Close()$/;"	f	class:CDB
Close	server/db.cpp	/^void CDBEnv::Close()$/;"	f	class:CDBEnv
CloseDb	server/db.cpp	/^void CDBEnv::CloseDb(const string& strFile)$/;"	f	class:CDBEnv
CloseSocketDisconnect	server_iface.cpp	/^void CNode::CloseSocketDisconnect()$/;"	f	class:CNode
CombineMultisig	server/script.cpp	/^static CScript CombineMultisig(CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn,$/;"	f	file:
CombineSignatures	server/script.cpp	/^CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn,$/;"	f
CombineSignatures	server/script.cpp	/^static CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn,$/;"	f	file:
CommandLineRPC	server/bitcoinrpc.cpp	/^int CommandLineRPC(int argc, char *argv[])$/;"	f
CommitTransaction	server/wallet.cpp	/^bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)$/;"	f	class:CWallet
Compact	server/serialize.h	/^    inline void Compact()$/;"	f	class:CDataStream
CompareTo	server/base58.h	/^    int CompareTo(const CBase58Data& b58) const$/;"	f	class:CBase58Data
CompareValueOnly	server/wallet.cpp	/^struct CompareValueOnly$/;"	s	file:
ComputeMinWork	server/main.cpp	/^unsigned int ComputeMinWork(unsigned int nBase, int64 nTime)$/;"	f
ConnectBlock	server/main.cpp	/^bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)$/;"	f	class:CBlock
ConnectInputs	server/main.cpp	/^bool CTransaction::ConnectInputs(MapPrevTx inputs,$/;"	f	class:CTransaction
ConnectNode	server_iface.cpp	/^CNode* ConnectNode(CAddress addrConnect, const char *pszDest, int64 nTimeout)$/;"	f
ConnectSocket	server/netbase.cpp	/^bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout)$/;"	f
ConnectSocketByName	server/netbase.cpp	/^bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout)$/;"	f
ConnectSocketDirectly	server/netbase.cpp	/^bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout)$/;"	f	file:
Connected	server/addrman.h	/^    void Connected(const CService &addr, int64 nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Connected_	server/addrman.cpp	/^void CAddrMan::Connected_(const CService &addr, int64 nTime)$/;"	f	class:CAddrMan
ContainsTx	server/db.cpp	/^bool CTxDB::ContainsTx(uint256 hash)$/;"	f	class:CTxDB
ConvertTo	server/bitcoinrpc.cpp	/^void ConvertTo(Value& value)$/;"	f
CopyNodeStats	server/rpcnet.cpp	/^static void CopyNodeStats(std::vector<CNodeStats>& vstats)$/;"	f	file:
Create	server/addrman.cpp	/^CAddrInfo* CAddrMan::Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId)$/;"	f	class:CAddrMan
CreateNewBlock	server/main.cpp	/^CBlock* CreateNewBlock(CReserveKey& reservekey)$/;"	f
CreatePidFile	server/util.cpp	/^void CreatePidFile(const boost::filesystem::path &path, pid_t pid)$/;"	f
CreateThread	server/util.h	/^inline HANDLE CreateThread(void(*pfn)(void*), void* parg, bool fWantHandle=false)$/;"	f
CreateThread	server/util.h	/^inline pthread_t CreateThread(void(*pfn)(void*), void* parg, bool fWantHandle=false)$/;"	f
CreateTransaction	server/wallet.cpp	/^bool CWallet::CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)$/;"	f	class:CWallet
CreateTransaction	server/wallet.cpp	/^bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet)$/;"	f	class:CWallet
CryptedKeyMap	server/keystore.h	/^typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;$/;"	t
DBErrors	server/walletdb.h	/^enum DBErrors$/;"	g
DB_CORRUPT	server/walletdb.h	/^    DB_CORRUPT,$/;"	e	enum:DBErrors
DB_LOAD_FAIL	server/walletdb.h	/^    DB_LOAD_FAIL,$/;"	e	enum:DBErrors
DB_LOAD_OK	server/walletdb.h	/^    DB_LOAD_OK,$/;"	e	enum:DBErrors
DB_NEED_REWRITE	server/walletdb.h	/^    DB_NEED_REWRITE$/;"	e	enum:DBErrors
DB_TOO_NEW	server/walletdb.h	/^    DB_TOO_NEW,$/;"	e	enum:DBErrors
DateTimeStrFormat	server/util.h	/^inline std::string DateTimeStrFormat(const char* pszFormat, int64 nTime)$/;"	f
DecodeAddress	server/irc.cpp	/^bool DecodeAddress(string str, CService& addr)$/;"	f
DecodeBase32	server/util.cpp	/^string DecodeBase32(const string& str)$/;"	f
DecodeBase32	server/util.cpp	/^vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)$/;"	f
DecodeBase58	server/base58.h	/^inline bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58	server/base58.h	/^inline bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	server/base58.h	/^inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	server/base58.h	/^inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase64	server/util.cpp	/^string DecodeBase64(const string& str)$/;"	f
DecodeBase64	server/util.cpp	/^vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)$/;"	f
DecodeOP_N	server/script.h	/^    static int DecodeOP_N(opcodetype opcode)$/;"	f	class:CScript
Decrypt	server/crypter.cpp	/^bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext)$/;"	f	class:CCrypter
DecryptSecret	server/crypter.cpp	/^bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CSecret& vchPlaintext)$/;"	f
DelAddressBookName	server/wallet.cpp	/^bool CWallet::DelAddressBookName(const CTxDestination& address)$/;"	f	class:CWallet
DescribeAddressVisitor	server/bitcoinrpc.cpp	/^class DescribeAddressVisitor : public boost::static_visitor<Object>$/;"	c	file:
DescribeAddressVisitor	wallet_iface.cpp	/^class DescribeAddressVisitor : public boost::static_visitor<Object>$/;"	c	file:
DisconnectBlock	server/main.cpp	/^bool CBlock::DisconnectBlock(CTxDB& txdb, CBlockIndex* pindex)$/;"	f	class:CBlock
DisconnectInputs	server/main.cpp	/^bool CTransaction::DisconnectInputs(CTxDB& txdb)$/;"	f	class:CTransaction
Discover	server_iface.cpp	/^void static Discover()$/;"	f	file:
DoS	server/main.h	/^    bool DoS(int nDoSIn, bool fIn) const { nDoS += nDoSIn; return fIn; }$/;"	f	class:CBlock
DoS	server/main.h	/^    bool DoS(int nDoSIn, bool fIn) const { nDoS += nDoSIn; return fIn; }$/;"	f	class:CTransaction
DumpAddresses	server_iface.cpp	/^void DumpAddresses()$/;"	f
ECDSA_SIG_recover_key_GFp	server/key.cpp	/^int ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned char *msg, int msglen, int recid, int check)$/;"	f
EC_KEY_regenerate_key	server/key.cpp	/^int EC_KEY_regenerate_key(EC_KEY *eckey, BIGNUM *priv_key)$/;"	f
END	server/util.h	37;"	d
ENTER_CRITICAL_SECTION	server/sync.h	113;"	d
EncodeAddress	server/irc.cpp	/^string EncodeAddress(const CService& addr)$/;"	f
EncodeBase32	server/util.cpp	/^string EncodeBase32(const string& str)$/;"	f
EncodeBase32	server/util.cpp	/^string EncodeBase32(const unsigned char* pch, size_t len)$/;"	f
EncodeBase58	server/base58.h	/^inline std::string EncodeBase58(const std::vector<unsigned char>& vch)$/;"	f
EncodeBase58	server/base58.h	/^inline std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)$/;"	f
EncodeBase58Check	server/base58.h	/^inline std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)$/;"	f
EncodeBase64	server/util.cpp	/^string EncodeBase64(const string& str)$/;"	f
EncodeBase64	server/util.cpp	/^string EncodeBase64(const unsigned char* pch, size_t len)$/;"	f
EncodeOP_N	server/script.h	/^    static opcodetype EncodeOP_N(int n)$/;"	f	class:CScript
Encrypt	server/crypter.cpp	/^bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext)$/;"	f	class:CCrypter
EncryptKeys	server/keystore.cpp	/^bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)$/;"	f	class:CCryptoKeyStore
EncryptSecret	server/crypter.cpp	/^bool EncryptSecret(CKeyingMaterial& vMasterKey, const CSecret &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)$/;"	f
EncryptWallet	server/wallet.cpp	/^bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)$/;"	f	class:CWallet
EndMessage	server/net.h	/^    void EndMessage()$/;"	f	class:CNode
EndMessageAbortIfEmpty	server/net.h	/^    void EndMessageAbortIfEmpty()$/;"	f	class:CNode
EnsureWalletIsUnlocked	server/bitcoinrpc.cpp	/^EnsureWalletIsUnlocked()$/;"	f
Enter	server/sync.h	/^    void Enter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CMutexLock
EnterCritical	server/sync.cpp	/^void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)$/;"	f
EnterCritical	server/sync.h	/^void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}$/;"	f
EnvShutdown	server/db.cpp	/^void CDBEnv::EnvShutdown()$/;"	f	class:CDBEnv
Erase	server/db.h	/^    bool Erase(const K& key)$/;"	f	class:CDB
Erase	server/leveldb.h	/^    template<typename K> bool Erase(const K& key, bool fSync = false) throw(leveldb_error) {$/;"	f	class:CLevelDB
Erase	server/leveldb.h	/^    template<typename K> void Erase(const K& key) {$/;"	f	class:CLevelDBBatch
EraseFromWallet	server/wallet.cpp	/^bool CWallet::EraseFromWallet(uint256 hash)$/;"	f	class:CWallet
EraseFromWallets	server/main.cpp	/^void static EraseFromWallets(uint256 hash)$/;"	f	file:
EraseName	server/walletdb.cpp	/^bool CWalletDB::EraseName(const string& strAddress)$/;"	f	class:CWalletDB
EraseOrphanTx	server/main.cpp	/^void static EraseOrphanTx(uint256 hash)$/;"	f	file:
ErasePool	server/walletdb.h	/^    bool ErasePool(int64 nPool)$/;"	f	class:CWalletDB
EraseSetting	server/walletdb.h	/^    bool EraseSetting(const std::string& strKey)$/;"	f	class:CWalletDB
EraseTx	server/walletdb.h	/^    bool EraseTx(uint256 hash)$/;"	f	class:CWalletDB
EraseTxIndex	server/db.cpp	/^bool CTxDB::EraseTxIndex(const CTransaction& tx)$/;"	f	class:CTxDB
ErrorReply	server/bitcoinrpc.cpp	/^void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)$/;"	f
EvalScript	server/script.cpp	/^bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
Exists	server/db.h	/^    bool Exists(const K& key)$/;"	f	class:CDB
Exists	server/leveldb.h	/^    template<typename K> bool Exists(const K& key) throw(leveldb_error) {$/;"	f	class:CLevelDB
ExitThread	server/util.h	/^inline void ExitThread(size_t nExitCode)$/;"	f
ExitTimeout	server/init.cpp	/^void ExitTimeout(void* parg)$/;"	f
ExtractDestination	server/script.cpp	/^bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)$/;"	f
ExtractDestinations	server/script.cpp	/^bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vector<CTxDestination>& addressRet, int& nRequiredRet)$/;"	f
FEATURE_BASE	server/wallet.h	/^    FEATURE_BASE = 10500, \/\/ the earliest version new wallets supports (only useful for getinfo's clientversion output)$/;"	e	enum:WalletFeature
FEATURE_COMPRPUBKEY	server/wallet.h	/^    FEATURE_COMPRPUBKEY = 60000, \/\/ compressed public keys$/;"	e	enum:WalletFeature
FEATURE_LATEST	server/wallet.h	/^    FEATURE_LATEST = 60000$/;"	e	enum:WalletFeature
FEATURE_WALLETCRYPT	server/wallet.h	/^    FEATURE_WALLETCRYPT = 40000, \/\/ wallet encryption$/;"	e	enum:WalletFeature
FLATDATA	server/serialize.h	245;"	d
FORWARD	server/ui_interface.h	/^        FORWARD               = 0x00001000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
FetchInputs	server/main.cpp	/^bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTestPool,$/;"	f	class:CTransaction
FileCommit	server/util.cpp	/^void FileCommit(FILE *fileout)$/;"	f
Find	server/addrman.cpp	/^CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int *pnId)$/;"	f	class:CAddrMan
Find	server/script.h	/^    int Find(opcodetype op) const$/;"	f	class:CScript
FindAndDelete	server/script.h	/^    int FindAndDelete(const CScript& b)$/;"	f	class:CScript
FindNode	server_iface.cpp	/^CNode* FindNode(const CNetAddr& ip)$/;"	f
FindNode	server_iface.cpp	/^CNode* FindNode(const CService& addr)$/;"	f
FindNode	server_iface.cpp	/^CNode* FindNode(std::string addrName)$/;"	f
Flush	server/db.cpp	/^void CDBEnv::Flush(bool fShutdown)$/;"	f	class:CDBEnv
Flush	server/leveldb.h	/^    bool Flush() {$/;"	f	class:CLevelDB
FormatException	server/util.cpp	/^static std::string FormatException(std::exception* pex, const char* pszThread)$/;"	f	file:
FormatFullVersion	server/util.cpp	/^string FormatFullVersion()$/;"	f
FormatHashBlocks	server/main.cpp	/^int FormatHashBlocks(void* pbuffer, unsigned int len)$/;"	f
FormatHashBuffers	server/main.cpp	/^void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1)$/;"	f
FormatMoney	server/util.cpp	/^string FormatMoney(int64 n, bool fPlus)$/;"	f
FormatSubVersion	server/util.cpp	/^std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)$/;"	f
FormatVersion	server/util.cpp	/^string FormatVersion(int nVersion)$/;"	f
GIT_ARCHIVE	server/version.cpp	41;"	d	file:
GIT_COMMIT_DATE	server/version.cpp	44;"	d	file:
GIT_COMMIT_ID	server/version.cpp	43;"	d	file:
GMF_BLOCK	server/main.h	/^    GMF_BLOCK,$/;"	e	enum:GetMinFee_mode
GMF_RELAY	server/main.h	/^    GMF_RELAY,$/;"	e	enum:GetMinFee_mode
GMF_SEND	server/main.h	/^    GMF_SEND,$/;"	e	enum:GetMinFee_mode
GNULIB_NAMESPACE	server/bitcoinrpc.cpp	24;"	d	file:
GNULIB_NAMESPACE	server/bitcoinrpc.cpp	41;"	d	file:
GNULIB_NAMESPACE	server/bitcoinrpc.cpp	9;"	d	file:
GNULIB_NAMESPACE	server/main.h	10;"	d
GenerateNewKey	server/wallet.cpp	/^CPubKey CWallet::GenerateNewKey()$/;"	f	class:CWallet
Get	server/base58.h	/^    CTxDestination Get() const {$/;"	f	class:CBitcoinAddress
Get	server/script.cpp	/^    Get(uint256 hash, const std::vector<unsigned char>& vchSig, const std::vector<unsigned char>& pubKey)$/;"	f	class:CSignatureCache
Get64	server/uint256.h	/^    uint64 Get64(int n=0) const$/;"	f	class:base_uint
GetAccountAddress	server/bitcoinrpc.cpp	/^CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)$/;"	f
GetAccountAddresses	server/bitcoinrpc.cpp	/^void GetAccountAddresses(string strAccount, set<CTxDestination>& setAddress)$/;"	f
GetAccountAmounts	server/wallet.cpp	/^void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, int64& nReceived,$/;"	f	class:CWalletTx
GetAccountBalance	server/bitcoinrpc.cpp	/^int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth)$/;"	f
GetAccountBalance	server/bitcoinrpc.cpp	/^int64 GetAccountBalance(const string& strAccount, int nMinDepth)$/;"	f
GetAccountCreditDebit	server/walletdb.cpp	/^int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)$/;"	f	class:CWalletDB
GetAddr	server/addrman.h	/^    std::vector<CAddress> GetAddr()$/;"	f	class:CAddrMan
GetAddr_	server/addrman.cpp	/^void CAddrMan::GetAddr_(std::vector<CAddress> &vAddr)$/;"	f	class:CAddrMan
GetAddressByAccount	wallet_iface.cpp	/^CBitcoinAddress GetAddressByAccount(const char *accountName)$/;"	f
GetAdjustedTime	server/util.cpp	/^int64 GetAdjustedTime()$/;"	f
GetAllReserveKeys	server/wallet.cpp	/^void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress)$/;"	f	class:CWallet
GetAmounts	server/wallet.cpp	/^void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, list<pair<CTxDestination, int64> >& listReceived,$/;"	f	class:CWalletTx
GetArg	server/util.cpp	/^int64 GetArg(const std::string& strArg, int64 nDefault)$/;"	f
GetArg	server/util.cpp	/^std::string GetArg(const std::string& strArg, const std::string& strDefault)$/;"	f
GetAvailableCredit	server/wallet.h	/^    int64 GetAvailableCredit(bool fUseCache=true) const$/;"	f	class:CWalletTx
GetBalance	server/wallet.cpp	/^int64 CWallet::GetBalance() const$/;"	f	class:CWallet
GetBlockHash	server/main.h	/^    uint256 GetBlockHash() const$/;"	f	class:CBlockIndex
GetBlockHash	server/main.h	/^    uint256 GetBlockHash() const$/;"	f	class:CDiskBlockIndex
GetBlockHash	server/main.h	/^    uint256 GetBlockHash()$/;"	f	class:CBlockLocator
GetBlockHeader	server/main.h	/^    CBlock GetBlockHeader() const$/;"	f	class:CBlockIndex
GetBlockIndex	server/main.h	/^    CBlockIndex* GetBlockIndex()$/;"	f	class:CBlockLocator
GetBlockTime	server/main.h	/^    int64 GetBlockTime() const$/;"	f	class:CBlock
GetBlockTime	server/main.h	/^    int64 GetBlockTime() const$/;"	f	class:CBlockIndex
GetBlockValue	server/main.cpp	/^int64 static GetBlockValue(int nHeight, int64 nFees)$/;"	f	file:
GetBlockWork	server/main.h	/^    CBigNum GetBlockWork() const$/;"	f	class:CBlockIndex
GetBlocksToMaturity	server/main.cpp	/^int CMerkleTx::GetBlocksToMaturity() const$/;"	f	class:CMerkleTx
GetBoolArg	server/util.cpp	/^bool GetBoolArg(const std::string& strArg, bool fDefault)$/;"	f
GetByte	server/netbase.cpp	/^int CNetAddr::GetByte(int n) const$/;"	f	class:CNetAddr
GetCScript	server/keystore.cpp	/^bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const$/;"	f	class:CBasicKeyStore
GetChance	server/addrman.cpp	/^double CAddrInfo::GetChance(int64 nNow) const$/;"	f	class:CAddrInfo
GetChange	server/wallet.h	/^    int64 GetChange() const$/;"	f	class:CWalletTx
GetChange	server/wallet.h	/^    int64 GetChange(const CTransaction& tx) const$/;"	f	class:CWallet
GetChange	server/wallet.h	/^    int64 GetChange(const CTxOut& txout) const$/;"	f	class:CWallet
GetCommand	server/protocol.cpp	/^const char* CInv::GetCommand() const$/;"	f	class:CInv
GetCommand	server/protocol.cpp	/^std::string CMessageHeader::GetCommand() const$/;"	f	class:CMessageHeader
GetCompact	server/bignum.h	/^    unsigned int GetCompact() const$/;"	f	class:CBigNum
GetConfigFile	server/util.cpp	/^boost::filesystem::path GetConfigFile()$/;"	f
GetCredit	server/wallet.h	/^    int64 GetCredit(bool fUseCache=true) const$/;"	f	class:CWalletTx
GetCredit	server/wallet.h	/^    int64 GetCredit(const CTransaction& tx) const$/;"	f	class:CWallet
GetCredit	server/wallet.h	/^    int64 GetCredit(const CTxOut& txout) const$/;"	f	class:CWallet
GetCursor	server/db.h	/^    Dbc* GetCursor()$/;"	f	class:CDB
GetDataDir	server/util.cpp	/^const boost::filesystem::path &GetDataDir(bool fNetSpecific)$/;"	f
GetDebit	server/wallet.cpp	/^int64 CWallet::GetDebit(const CTxIn &txin) const$/;"	f	class:CWallet
GetDebit	server/wallet.h	/^    int64 GetDebit() const$/;"	f	class:CWalletTx
GetDebit	server/wallet.h	/^    int64 GetDebit(const CTransaction& tx) const$/;"	f	class:CWallet
GetDefaultDataDir	server/util.cpp	/^boost::filesystem::path GetDefaultDataDir()$/;"	f
GetDefaultPort	server/protocol.h	/^static inline unsigned short GetDefaultPort(const bool testnet = fTestNet)$/;"	f
GetDepthInMainChain	server/main.cpp	/^int CMerkleTx::GetDepthInMainChain(CBlockIndex* &pindexRet) const$/;"	f	class:CMerkleTx
GetDepthInMainChain	server/main.cpp	/^int CTxIndex::GetDepthInMainChain() const$/;"	f	class:CTxIndex
GetDepthInMainChain	server/main.h	/^    int GetDepthInMainChain() const { CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }$/;"	f	class:CMerkleTx
GetDetach	server/db.h	/^    bool GetDetach() { return fDetachDB; }$/;"	f	class:CDBEnv
GetDifficulty	server/bitcoinrpc.cpp	/^double GetDifficulty(const CBlockIndex* blockindex = NULL)$/;"	f
GetDistanceBack	server/main.h	/^    int GetDistanceBack()$/;"	f	class:CBlockLocator
GetExtNetwork	server/netbase.cpp	/^int static GetExtNetwork(const CNetAddr *addr)$/;"	f	file:
GetFilesize	server/util.cpp	/^int GetFilesize(FILE* file)$/;"	f
GetGroup	server/netbase.cpp	/^std::vector<unsigned char> CNetAddr::GetGroup() const$/;"	f	class:CNetAddr
GetHash	server/key.h	/^    uint256 GetHash() const {$/;"	f	class:CPubKey
GetHash	server/main.h	/^    uint256 GetHash() const$/;"	f	class:CAlert
GetHash	server/main.h	/^    uint256 GetHash() const$/;"	f	class:CBlock
GetHash	server/main.h	/^    uint256 GetHash() const$/;"	f	class:CTransaction
GetHash	server/main.h	/^    uint256 GetHash() const$/;"	f	class:CTxOut
GetHash	server/netbase.cpp	/^uint64 CNetAddr::GetHash() const$/;"	f	class:CNetAddr
GetHash	server/util.h	/^    uint256 GetHash() {$/;"	f	class:CHashWriter
GetHeight	server/main.h	/^    int GetHeight()$/;"	f	class:CBlockLocator
GetHex	server/bignum.h	/^    std::string GetHex() const$/;"	f	class:CBigNum
GetHex	server/uint256.h	/^    std::string GetHex() const$/;"	f	class:base_uint
GetID	server/key.h	/^    CKeyID GetID() const {$/;"	f	class:CPubKey
GetID	server/script.h	/^    CScriptID GetID() const$/;"	f	class:CScript
GetIPFromIRC	server/irc.cpp	/^bool GetIPFromIRC(SOCKET hSocket, string strMyName, CNetAddr& ipRet)$/;"	f
GetImmatureBalance	server/wallet.cpp	/^int64 CWallet::GetImmatureBalance() const$/;"	f	class:CWallet
GetIn6Addr	server/netbase.cpp	/^bool CNetAddr::GetIn6Addr(struct in6_addr* pipv6Addr) const$/;"	f	class:CNetAddr
GetInAddr	server/netbase.cpp	/^bool CNetAddr::GetInAddr(struct in_addr* pipv4Addr) const$/;"	f	class:CNetAddr
GetKey	server/keystore.cpp	/^bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const$/;"	f	class:CCryptoKeyStore
GetKey	server/keystore.h	/^    bool GetKey(const CKeyID &address, CKey &keyOut) const$/;"	f	class:CBasicKeyStore
GetKey	server/netbase.cpp	/^std::vector<unsigned char> CService::GetKey() const$/;"	f	class:CService
GetKeyFromPool	server/wallet.cpp	/^bool CWallet::GetKeyFromPool(CPubKey& result, bool fAllowReuse)$/;"	f	class:CWallet
GetKeyID	server/base58.h	/^    bool GetKeyID(CKeyID &keyID) const {$/;"	f	class:CBitcoinAddress
GetKeyPoolSize	server/wallet.h	/^    int GetKeyPoolSize()$/;"	f	class:CWallet
GetKeys	server/keystore.h	/^    void GetKeys(std::set<CKeyID> &setAddress) const$/;"	f	class:CBasicKeyStore
GetKeys	server/keystore.h	/^    void GetKeys(std::set<CKeyID> &setAddress) const$/;"	f	class:CCryptoKeyStore
GetLastCheckpoint	server/checkpoints.cpp	/^    CBlockIndex* GetLastCheckpoint(const std::map<uint256, CBlockIndex*>& mapBlockIndex)$/;"	f	namespace:Checkpoints
GetLegacySigOpCount	server/main.cpp	/^CTransaction::GetLegacySigOpCount() const$/;"	f	class:CTransaction
GetListenPort	server_iface.cpp	/^unsigned short GetListenPort()$/;"	f
GetLocal	server_iface.cpp	/^bool GetLocal(CService& addr, const CNetAddr *paddrPeer)$/;"	f
GetLocalAddress	server_iface.cpp	/^CAddress GetLocalAddress(const CNetAddr *paddrPeer)$/;"	f
GetLock	server/sync.h	/^    boost::unique_lock<Mutex> &GetLock()$/;"	f	class:CMutexLock
GetMedianTime	server/main.h	/^    int64 GetMedianTime() const$/;"	f	class:CBlockIndex
GetMedianTimePast	server/main.h	/^    int64 GetMedianTimePast() const$/;"	f	class:CBlockIndex
GetMerkleBranch	server/main.h	/^    std::vector<uint256> GetMerkleBranch(int nIndex) const$/;"	f	class:CBlock
GetMinFee	server/main.h	/^    int64 GetMinFee(unsigned int nBlockSize=1, bool fAllowFree=true, enum GetMinFee_mode mode=GMF_BLOCK) const$/;"	f	class:CTransaction
GetMinFee_mode	server/main.h	/^enum GetMinFee_mode$/;"	g
GetMyExternalIP	server_iface.cpp	/^bool GetMyExternalIP(CNetAddr& ipRet)$/;"	f
GetMyExternalIP2	server_iface.cpp	/^bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const char* pszKeyword, CNetAddr& ipRet)$/;"	f
GetNameProxy	server/netbase.cpp	/^bool GetNameProxy() {$/;"	f
GetNetwork	server/netbase.cpp	/^enum Network CNetAddr::GetNetwork() const$/;"	f	class:CNetAddr
GetNetworkHashPS	server/bitcoinrpc.cpp	/^Value GetNetworkHashPS(int lookup) {$/;"	f
GetNewAddress	wallet_iface.cpp	/^CBitcoinAddress GetNewAddress(string strAccount)$/;"	f
GetNewBucket	server/addrman.cpp	/^int CAddrInfo::GetNewBucket(const std::vector<unsigned char> &nKey, const CNetAddr& src) const$/;"	f	class:CAddrInfo
GetNewBucket	server/addrman.h	/^    int GetNewBucket(const std::vector<unsigned char> &nKey) const$/;"	f	class:CAddrInfo
GetNextWorkRequired	server/main.cpp	/^unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlock *pblock)$/;"	f	file:
GetNumBlocksOfPeers	server/main.cpp	/^int GetNumBlocksOfPeers()$/;"	f
GetOldestKeyPoolTime	server/wallet.cpp	/^int64 CWallet::GetOldestKeyPoolTime()$/;"	f	class:CWallet
GetOp	server/script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet) const$/;"	f	class:CScript
GetOp	server/script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet) const$/;"	f	class:CScript
GetOp	server/script.h	/^    bool GetOp(iterator& pc, opcodetype& opcodeRet)$/;"	f	class:CScript
GetOp	server/script.h	/^    bool GetOp(iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet)$/;"	f	class:CScript
GetOp2	server/script.h	/^    bool GetOp2(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet) const$/;"	f	class:CScript
GetOpName	server/script.cpp	/^const char* GetOpName(opcodetype opcode)$/;"	f
GetOptions	server/leveldb.cpp	/^static leveldb::Options GetOptions(size_t nCacheSize) {$/;"	f	file:
GetOrphanRoot	server/main.cpp	/^uint256 static GetOrphanRoot(const CBlock* pblock)$/;"	f	file:
GetOutputFor	server/main.cpp	/^const CTxOut& CTransaction::GetOutputFor(const CTxIn& input, const MapPrevTx& inputs) const$/;"	f	class:CTransaction
GetP2SHSigOpCount	server/main.cpp	/^unsigned int CTransaction::GetP2SHSigOpCount(const MapPrevTx& inputs) const$/;"	f	class:CTransaction
GetPerformanceCounter	server/util.h	/^inline int64 GetPerformanceCounter()$/;"	f
GetPidFile	server/util.cpp	/^boost::filesystem::path GetPidFile()$/;"	f
GetPoWHash	server/main.h	/^    uint256 GetPoWHash() const$/;"	f	class:CBlock
GetPort	server/netbase.cpp	/^unsigned short CService::GetPort() const$/;"	f	class:CService
GetPrivKey	server/key.cpp	/^CPrivKey CKey::GetPrivKey() const$/;"	f	class:CKey
GetProxy	server/netbase.cpp	/^bool GetProxy(enum Network net, CService &addrProxy) {$/;"	f
GetPubKey	server/key.cpp	/^CPubKey CKey::GetPubKey() const$/;"	f	class:CKey
GetPubKey	server/keystore.cpp	/^bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const$/;"	f	class:CCryptoKeyStore
GetPubKey	server/keystore.cpp	/^bool CKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const$/;"	f	class:CKeyStore
GetRand	server/util.cpp	/^uint64 GetRand(uint64 nMax)$/;"	f
GetRandHash	server/util.cpp	/^uint256 GetRandHash()$/;"	f
GetRandInt	server/util.cpp	/^int GetRandInt(int nMax)$/;"	f
GetReachabilityFrom	server/netbase.cpp	/^int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const$/;"	f	class:CNetAddr
GetRefCount	server/net.h	/^    int GetRefCount()$/;"	f	class:CNode
GetRequestCount	server/wallet.cpp	/^int CWalletTx::GetRequestCount() const$/;"	f	class:CWalletTx
GetReservedKey	server/wallet.cpp	/^CPubKey CReserveKey::GetReservedKey()$/;"	f	class:CReserveKey
GetSecret	server/base58.h	/^    CSecret GetSecret(bool &fCompressedOut)$/;"	f	class:CBitcoinSecret
GetSecret	server/key.cpp	/^CSecret CKey::GetSecret(bool &fCompressed) const$/;"	f	class:CKey
GetSecret	server/keystore.h	/^    virtual bool GetSecret(const CKeyID &address, CSecret& vchSecret, bool &fCompressed) const$/;"	f	class:CKeyStore
GetSerializeSize	server/bignum.h	/^    unsigned int GetSerializeSize(int nType=0, int nVersion=PROTOCOL_VERSION) const$/;"	f	class:CBigNum
GetSerializeSize	server/serialize.h	/^    unsigned int GetSerializeSize(const T& obj)$/;"	f	class:CAutoFile
GetSerializeSize	server/serialize.h	/^    unsigned int GetSerializeSize(const T& obj)$/;"	f	class:CDataStream
GetSerializeSize	server/serialize.h	/^    unsigned int GetSerializeSize(int, int=0) const$/;"	f	class:CFlatData
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(char a,           int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion)$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(const T& a, long nType, int nVersion)$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion)$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(double a,         int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(float a,          int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(int64 a,          int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(signed char a,    int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(signed int a,     int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(signed long a,    int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(signed short a,   int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(uint64 a,         int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(unsigned char a,  int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(unsigned int a,   int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(unsigned long a,  int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	server/serialize.h	/^inline unsigned int GetSerializeSize(unsigned short a, int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	server/serialize.h	/^unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)$/;"	f
GetSerializeSize	server/serialize.h	/^unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)$/;"	f
GetSerializeSize	server/serialize.h	/^unsigned int GetSerializeSize(const std::basic_string<C>& str, int, int)$/;"	f
GetSerializeSize	server/serialize.h	/^unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
GetSerializeSize	server/serialize.h	/^unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion)$/;"	f
GetSerializeSize	server/serialize.h	/^unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
GetSerializeSize	server/uint256.h	/^    unsigned int GetSerializeSize(int nType, int nVersion) const$/;"	f	class:base_uint
GetSerializeSize_impl	server/serialize.h	/^unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)$/;"	f
GetSerializeSize_impl	server/serialize.h	/^unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)$/;"	f
GetSigOpCount	server/script.cpp	/^unsigned int CScript::GetSigOpCount(bool fAccurate) const$/;"	f	class:CScript
GetSigOpCount	server/script.cpp	/^unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const$/;"	f	class:CScript
GetSizeOfCompactSize	server/serialize.h	/^inline unsigned int GetSizeOfCompactSize(uint64 nSize)$/;"	f
GetSockAddr	server/netbase.cpp	/^bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const$/;"	f	class:CService
GetSpecialFolderPath	server/util.cpp	/^boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate)$/;"	f
GetTime	server/util.cpp	/^int64 GetTime()$/;"	f
GetTimeMillis	server/util.h	/^inline int64 GetTimeMillis()$/;"	f
GetTotalBlocksEstimate	server/checkpoints.cpp	/^    int GetTotalBlocksEstimate()$/;"	f	namespace:Checkpoints
GetTransaction	server/main.cpp	/^bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock)$/;"	f
GetTransaction	server/main.cpp	/^bool static GetTransaction(const uint256& hashTx, CWalletTx& wtx)$/;"	f	file:
GetTransaction	server/wallet.cpp	/^bool CWallet::GetTransaction(const uint256 &hashTx, CWalletTx& wtx)$/;"	f	class:CWallet
GetTriedBucket	server/addrman.cpp	/^int CAddrInfo::GetTriedBucket(const std::vector<unsigned char> &nKey) const$/;"	f	class:CAddrInfo
GetTxTime	server/wallet.cpp	/^int64 CWalletTx::GetTxTime() const$/;"	f	class:CWalletTx
GetTxnOutputType	server/script.cpp	/^const char* GetTxnOutputType(txnouttype t)$/;"	f
GetType	server/serialize.h	/^    int GetType()                { return nType; }$/;"	f	class:CAutoFile
GetType	server/serialize.h	/^    int GetType()                { return nType; }$/;"	f	class:CDataStream
GetUnconfirmedBalance	server/wallet.cpp	/^int64 CWallet::GetUnconfirmedBalance() const$/;"	f	class:CWallet
GetValueIn	server/main.cpp	/^int64 CTransaction::GetValueIn(const MapPrevTx& inputs) const$/;"	f	class:CTransaction
GetValueOut	server/main.h	/^    int64 GetValueOut() const$/;"	f	class:CTransaction
GetVersion	server/serialize.h	/^    int GetVersion()             { return nVersion; }$/;"	f	class:CAutoFile
GetVersion	server/serialize.h	/^    int GetVersion()             { return nVersion; }$/;"	f	class:CDataStream
GetVersion	server/wallet.h	/^    int GetVersion() { return nWalletVersion; }$/;"	f	class:CWallet
GetWalletFile	server/wallet.cpp	/^bool GetWalletFile(CWallet* pwallet, string &strWalletFileOut)$/;"	f
GetWarnings	server/main.cpp	/^string GetWarnings(string strFor)$/;"	f
Good	server/addrman.h	/^    void Good(const CService &addr, int64 nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Good_	server/addrman.cpp	/^void CAddrMan::Good_(const CService &addr, int64 nTime)$/;"	f	class:CAddrMan
HELP	server/ui_interface.h	/^        HELP                  = 0x00008000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
HTTPAuthorized	server/bitcoinrpc.cpp	/^bool HTTPAuthorized(map<string, string>& mapHeaders)$/;"	f
HTTPPost	server/bitcoinrpc.cpp	/^string HTTPPost(const string& strMsg, const map<string,string>& mapRequestHeaders)$/;"	f
HTTPReply	server/bitcoinrpc.cpp	/^static string HTTPReply(int nStatus, const string& strMsg, bool keepalive)$/;"	f	file:
H_BITCOIN_SCRIPT	server/script.h	8;"	d
HandleError	server/leveldb.cpp	/^void HandleError(const leveldb::Status &status) throw(leveldb_error) {$/;"	f
HandleSIGHUP	server/init.cpp	/^void HandleSIGHUP(int)$/;"	f
HandleSIGTERM	server/init.cpp	/^void HandleSIGTERM(int)$/;"	f
Hash	server/util.h	/^inline uint256 Hash(const T1 p1begin, const T1 p1end,$/;"	f
Hash	server/util.h	/^inline uint256 Hash(const T1 pbegin, const T1 pend)$/;"	f
Hash160	server/util.h	/^inline uint160 Hash160(const std::vector<unsigned char>& vch)$/;"	f
HaveCScript	server/keystore.cpp	/^bool CBasicKeyStore::HaveCScript(const CScriptID& hash) const$/;"	f	class:CBasicKeyStore
HaveKey	server/keystore.h	/^    bool HaveKey(const CKeyID &address) const$/;"	f	class:CBasicKeyStore
HaveKey	server/keystore.h	/^    bool HaveKey(const CKeyID &address) const$/;"	f	class:CCryptoKeyStore
HaveKeys	server/script.cpp	/^unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)$/;"	f
HelpMessage	server/init.cpp	/^std::string HelpMessage()$/;"	f
HelpRequiringPassphrase	server/bitcoinrpc.cpp	/^HelpRequiringPassphrase()$/;"	f
HexBits	server/bitcoinrpc.cpp	/^HexBits(unsigned int nBits)$/;"	f
HexStr	server/util.h	/^inline std::string HexStr(const std::vector<unsigned char>& vch, bool fSpaces=false)$/;"	f
HexStr	server/util.h	/^std::string HexStr(const T itbegin, const T itend, bool fSpaces=false)$/;"	f
ICON_ASTERISK	server/ui_interface.h	/^        ICON_ASTERISK         = ICON_INFORMATION,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_ERROR	server/ui_interface.h	/^        ICON_ERROR            = ICON_HAND,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_EXCLAMATION	server/ui_interface.h	/^        ICON_EXCLAMATION      = 0x00000100,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_HAND	server/ui_interface.h	/^        ICON_HAND             = 0x00000200,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_INFORMATION	server/ui_interface.h	/^        ICON_INFORMATION      = 0x00000800,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_MASK	server/ui_interface.h	/^        ICON_MASK             = (0x00000100|0x00000200|0x00000400|0x00000800),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_QUESTION	server/ui_interface.h	/^        ICON_QUESTION         = 0x00000400,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_STOP	server/ui_interface.h	/^        ICON_STOP             = ICON_HAND,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
ICON_WARNING	server/ui_interface.h	/^        ICON_WARNING          = ICON_EXCLAMATION,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
IMPLEMENT_RANDOMIZE_STACK	server/util.h	367;"	d
IMPLEMENT_SERIALIZE	server/serialize.h	61;"	d
INVALID_SOCKET	server/compat.h	45;"	d
IncrementExtraNonce	server/main.cpp	/^void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)$/;"	f
Init	server/addrman.h	/^    void Init()$/;"	f	class:CAddrInfo
Init	server/main.h	/^    void Init()$/;"	f	class:CMerkleTx
Init	server/netbase.cpp	/^void CNetAddr::Init()$/;"	f	class:CNetAddr
Init	server/netbase.cpp	/^void CService::Init()$/;"	f	class:CService
Init	server/protocol.cpp	/^void CAddress::Init()$/;"	f	class:CAddress
Init	server/serialize.h	/^    void Init(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
Init	server/util.h	/^    void Init() {$/;"	f	class:CHashWriter
Init	server/wallet.h	/^    void Init(const CWallet* pwalletIn)$/;"	f	class:CWalletTx
InitError	server/init.cpp	/^bool static InitError(const std::string &str)$/;"	f	file:
InitMessage	server/ui_interface.h	/^    boost::signals2::signal<void (const std::string &message)> InitMessage;$/;"	m	class:CClientUIInterface
InitWarning	server/init.cpp	/^bool static InitWarning(const std::string &str)$/;"	f	file:
InsertBlockIndex	server/db.cpp	/^CBlockIndex static * InsertBlockIndex(uint256 hash)$/;"	f	file:
InterpretNegativeSetting	server/util.cpp	/^static void InterpretNegativeSetting(string name, map<string, string>& mapSettingsRet)$/;"	f	file:
InvalidChainFound	server/main.cpp	/^void static InvalidChainFound(CBlockIndex* pindexNew)$/;"	f	file:
Inventory	server/main.cpp	/^void static Inventory(const uint256& hash)$/;"	f	file:
Inventory	server/wallet.h	/^    void Inventory(const uint256 &hash)$/;"	f	class:CWallet
IsBanned	server_iface.cpp	/^bool CNode::IsBanned(CNetAddr ip)$/;"	f	class:CNode
IsChainFile	server/db.cpp	/^static bool IsChainFile(std::string strFile)$/;"	f	file:
IsChange	server/wallet.cpp	/^bool CWallet::IsChange(const CTxOut& txout) const$/;"	f	class:CWallet
IsCoinBase	server/main.h	/^    bool IsCoinBase() const$/;"	f	class:CTransaction
IsCompressed	server/key.cpp	/^bool CKey::IsCompressed() const$/;"	f	class:CKey
IsCompressed	server/key.h	/^    bool IsCompressed() const {$/;"	f	class:CPubKey
IsConfirmed	server/wallet.h	/^    bool IsConfirmed() const$/;"	f	class:CWalletTx
IsCrypted	server/keystore.h	/^    bool IsCrypted() const$/;"	f	class:CCryptoKeyStore
IsFinal	server/main.h	/^    bool IsFinal() const$/;"	f	class:CTxIn
IsFinal	server/main.h	/^    bool IsFinal(int nBlockHeight=0, int64 nBlockTime=0) const$/;"	f	class:CTransaction
IsFromMe	server/main.cpp	/^bool static IsFromMe(CTransaction& tx)$/;"	f	file:
IsFromMe	server/wallet.h	/^    bool IsFromMe() const$/;"	f	class:CWalletTx
IsFromMe	server/wallet.h	/^    bool IsFromMe(const CTransaction& tx) const$/;"	f	class:CWallet
IsHex	server/util.cpp	/^bool IsHex(const string& str)$/;"	f
IsI2P	server/netbase.cpp	/^bool CNetAddr::IsI2P() const$/;"	f	class:CNetAddr
IsIPv4	server/netbase.cpp	/^bool CNetAddr::IsIPv4() const$/;"	f	class:CNetAddr
IsIPv6	server/netbase.cpp	/^bool CNetAddr::IsIPv6() const$/;"	f	class:CNetAddr
IsInEffect	server/main.h	/^    bool IsInEffect() const$/;"	f	class:CAlert
IsInMainChain	server/main.h	/^    bool IsInMainChain() const { return GetDepthInMainChain() > 0; }$/;"	f	class:CMerkleTx
IsInMainChain	server/main.h	/^    bool IsInMainChain() const$/;"	f	class:CBlockIndex
IsInitialBlockDownload	server/main.cpp	/^bool IsInitialBlockDownload()$/;"	f
IsKnownType	server/protocol.cpp	/^bool CInv::IsKnownType() const$/;"	f	class:CInv
IsLimited	server_iface.cpp	/^bool IsLimited(const CNetAddr &addr)$/;"	f
IsLimited	server_iface.cpp	/^bool IsLimited(enum Network net)$/;"	f
IsLocal	server/netbase.cpp	/^bool CNetAddr::IsLocal() const$/;"	f	class:CNetAddr
IsLocal	server_iface.cpp	/^bool IsLocal(const CService& addr)$/;"	f
IsLocked	server/keystore.h	/^    bool IsLocked() const$/;"	f	class:CCryptoKeyStore
IsMine	server/script.cpp	/^bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)$/;"	f
IsMine	server/script.cpp	/^bool IsMine(const CKeyStore &keystore, const CTxDestination &dest)$/;"	f
IsMine	server/wallet.cpp	/^bool CWallet::IsMine(const CTxIn &txin) const$/;"	f	class:CWallet
IsMine	server/wallet.h	/^    bool IsMine(const CTransaction& tx) const$/;"	f	class:CWallet
IsMine	server/wallet.h	/^    bool IsMine(const CTxOut& txout) const$/;"	f	class:CWallet
IsMulticast	server/netbase.cpp	/^bool CNetAddr::IsMulticast() const$/;"	f	class:CNetAddr
IsNewerThan	server/main.h	/^    bool IsNewerThan(const CTransaction& old) const$/;"	f	class:CTransaction
IsNull	server/key.cpp	/^bool CKey::IsNull() const$/;"	f	class:CKey
IsNull	server/main.h	/^    bool IsNull() const { return (hash == 0 && n == (unsigned int) -1); }$/;"	f	class:COutPoint
IsNull	server/main.h	/^    bool IsNull() const { return (nFile == (unsigned int) -1); }$/;"	f	class:CDiskTxPos
IsNull	server/main.h	/^    bool IsNull() const { return (ptx == NULL && n == (unsigned int) -1); }$/;"	f	class:CInPoint
IsNull	server/main.h	/^    bool IsNull() const$/;"	f	class:CAlert
IsNull	server/main.h	/^    bool IsNull() const$/;"	f	class:CBlock
IsNull	server/main.h	/^    bool IsNull() const$/;"	f	class:CTransaction
IsNull	server/main.h	/^    bool IsNull()$/;"	f	class:CBlockLocator
IsNull	server/main.h	/^    bool IsNull()$/;"	f	class:CTxIndex
IsNull	server/main.h	/^    bool IsNull()$/;"	f	class:CTxOut
IsNull	server/net.h	/^    bool IsNull()$/;"	f	class:CRequestTracker
IsPayToScriptHash	server/script.cpp	/^bool CScript::IsPayToScriptHash() const$/;"	f	class:CScript
IsProxy	server/netbase.cpp	/^bool IsProxy(const CNetAddr &addr) {$/;"	f
IsPushOnly	server/script.h	/^    bool IsPushOnly() const$/;"	f	class:CScript
IsRFC1918	server/netbase.cpp	/^bool CNetAddr::IsRFC1918() const$/;"	f	class:CNetAddr
IsRFC3849	server/netbase.cpp	/^bool CNetAddr::IsRFC3849() const$/;"	f	class:CNetAddr
IsRFC3927	server/netbase.cpp	/^bool CNetAddr::IsRFC3927() const$/;"	f	class:CNetAddr
IsRFC3964	server/netbase.cpp	/^bool CNetAddr::IsRFC3964() const$/;"	f	class:CNetAddr
IsRFC4193	server/netbase.cpp	/^bool CNetAddr::IsRFC4193() const$/;"	f	class:CNetAddr
IsRFC4380	server/netbase.cpp	/^bool CNetAddr::IsRFC4380() const$/;"	f	class:CNetAddr
IsRFC4843	server/netbase.cpp	/^bool CNetAddr::IsRFC4843() const$/;"	f	class:CNetAddr
IsRFC4862	server/netbase.cpp	/^bool CNetAddr::IsRFC4862() const$/;"	f	class:CNetAddr
IsRFC6052	server/netbase.cpp	/^bool CNetAddr::IsRFC6052() const$/;"	f	class:CNetAddr
IsRFC6145	server/netbase.cpp	/^bool CNetAddr::IsRFC6145() const$/;"	f	class:CNetAddr
IsReachable	server_iface.cpp	/^bool IsReachable(const CNetAddr& addr)$/;"	f
IsRoutable	server/netbase.cpp	/^bool CNetAddr::IsRoutable() const$/;"	f	class:CNetAddr
IsScript	server/base58.h	/^    bool IsScript() const {$/;"	f	class:CBitcoinAddress
IsSpent	server/wallet.h	/^    bool IsSpent(unsigned int nOut) const$/;"	f	class:CWalletTx
IsStandard	server/main.cpp	/^bool CTransaction::IsStandard() const$/;"	f	class:CTransaction
IsStandard	server/script.cpp	/^bool IsStandard(const CScript& scriptPubKey)$/;"	f
IsSwitchChar	server/util.h	/^inline bool IsSwitchChar(char c)$/;"	f
IsTerrible	server/addrman.cpp	/^bool CAddrInfo::IsTerrible(int64 nNow) const$/;"	f	class:CAddrInfo
IsTor	server/netbase.cpp	/^bool CNetAddr::IsTor() const$/;"	f	class:CNetAddr
IsValid	server/base58.h	/^    bool IsValid() const$/;"	f	class:CBitcoinAddress
IsValid	server/base58.h	/^    bool IsValid() const$/;"	f	class:CBitcoinSecret
IsValid	server/key.cpp	/^bool CKey::IsValid()$/;"	f	class:CKey
IsValid	server/key.h	/^    bool IsValid() const {$/;"	f	class:CPubKey
IsValid	server/netbase.cpp	/^bool CNetAddr::IsValid() const$/;"	f	class:CNetAddr
IsValid	server/protocol.cpp	/^bool CMessageHeader::IsValid() const$/;"	f	class:CMessageHeader
JSONRPCError	server/bitcoinrpc.cpp	/^Object JSONRPCError(int code, const string& message)$/;"	f
JSONRPCExecBatch	server/bitcoinrpc.cpp	/^static string JSONRPCExecBatch(const Array& vReq)$/;"	f	file:
JSONRPCExecOne	server/bitcoinrpc.cpp	/^static Object JSONRPCExecOne(const Value& req)$/;"	f	file:
JSONRPCReply	server/bitcoinrpc.cpp	/^string JSONRPCReply(const Value& result, const Value& error, const Value& id)$/;"	f
JSONRPCReplyObj	server/bitcoinrpc.cpp	/^Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)$/;"	f
JSONRPCRequest	server/bitcoinrpc.cpp	/^string JSONRPCRequest(const string& strMethod, const Array& params, const Value& id)$/;"	f
JSONRequest	server/bitcoinrpc.cpp	/^    JSONRequest() { id = Value::null; }$/;"	f	class:JSONRequest
JSONRequest	server/bitcoinrpc.cpp	/^class JSONRequest$/;"	c	file:
KeepKey	server/wallet.cpp	/^void CReserveKey::KeepKey()$/;"	f	class:CReserveKey
KeepKey	server/wallet.cpp	/^void CWallet::KeepKey(int64 nIndex)$/;"	f	class:CWallet
KeyMap	server/keystore.h	/^typedef std::map<CKeyID, std::pair<CSecret, bool> > KeyMap;$/;"	t
KimotoGravityWell	server/main.cpp	/^unsigned int static KimotoGravityWell(const CBlockIndex* pindexLast, const CBlock *pblock, uint64 TargetBlocksSpacingSeconds, uint64 PastBlocksMin, uint64 PastBlocksMax) {$/;"	f	file:
LEAVE_CRITICAL_SECTION	server/sync.h	119;"	d
LOCAL_BIND	server/net.h	/^    LOCAL_BIND,   \/\/ address explicit bound to$/;"	e	enum:__anon4
LOCAL_HTTP	server/net.h	/^    LOCAL_HTTP,   \/\/ address reported by whatismyip.com and similars$/;"	e	enum:__anon4
LOCAL_IF	server/net.h	/^    LOCAL_IF,     \/\/ address a local interface listens on$/;"	e	enum:__anon4
LOCAL_IRC	server/net.h	/^    LOCAL_IRC,    \/\/ address reported by IRC (deprecated)$/;"	e	enum:__anon4
LOCAL_MANUAL	server/net.h	/^    LOCAL_MANUAL, \/\/ address explicitly specified (-externalip=)$/;"	e	enum:__anon4
LOCAL_MAX	server/net.h	/^    LOCAL_MAX$/;"	e	enum:__anon4
LOCAL_NONE	server/net.h	/^    LOCAL_NONE,   \/\/ unknown$/;"	e	enum:__anon4
LOCAL_UPNP	server/net.h	/^    LOCAL_UPNP,   \/\/ address reported by UPnP$/;"	e	enum:__anon4
LOCK	server/sync.h	109;"	d
LOCK2	server/sync.h	110;"	d
LOCKTIME_THRESHOLD	server/main.h	/^static const unsigned int LOCKTIME_THRESHOLD = 500000000; \/\/ Tue Nov  5 00:53:20 1985 UTC$/;"	v
Leave	server/sync.h	/^    void Leave()$/;"	f	class:CMutexLock
LeaveCritical	server/sync.cpp	/^void LeaveCritical()$/;"	f
LeaveCritical	server/sync.h	/^void static inline LeaveCritical() {}$/;"	f
LimitOrphanTxSize	server/main.cpp	/^unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)$/;"	f
ListAccountCreditDebit	server/walletdb.cpp	/^void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountingEntry>& entries)$/;"	f	class:CWalletDB
ListReceived	server/bitcoinrpc.cpp	/^Value ListReceived(const Array& params, bool fByAccounts)$/;"	f
ListTransactions	server/bitcoinrpc.cpp	/^void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)$/;"	f
LoadBlockIndex	server/db.cpp	/^bool CTxDB::LoadBlockIndex()$/;"	f	class:CTxDB
LoadBlockIndex	server/main.cpp	/^bool LoadBlockIndex(bool fAllowNew)$/;"	f
LoadBlockIndexGuts	server/db.cpp	/^bool CTxDB::LoadBlockIndexGuts()$/;"	f	class:CTxDB
LoadCScript	server/wallet.h	/^    bool LoadCScript(const CScript& redeemScript) { return CCryptoKeyStore::AddCScript(redeemScript); }$/;"	f	class:CWallet
LoadCryptedKey	server/wallet.h	/^    bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) { SetMinVersion(FEATURE_WALLETCRYPT); return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret); }$/;"	f	class:CWallet
LoadExternalBlockFile	server/main.cpp	/^bool LoadExternalBlockFile(FILE* fileIn)$/;"	f
LoadKey	server/wallet.h	/^    bool LoadKey(const CKey& key) { return CCryptoKeyStore::AddKey(key); }$/;"	f	class:CWallet
LoadMinVersion	server/wallet.h	/^    bool LoadMinVersion(int nVersion) { nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }$/;"	f	class:CWallet
LoadWallet	server/wallet.cpp	/^int CWallet::LoadWallet(bool& fFirstRunRet)$/;"	f	class:CWallet
LoadWallet	server/walletdb.cpp	/^int CWalletDB::LoadWallet(CWallet* pwallet)$/;"	f	class:CWalletDB
LocalServiceInfo	server_iface.cpp	/^struct LocalServiceInfo {$/;"	s	file:
Lock	server/keystore.cpp	/^bool CCryptoKeyStore::Lock()$/;"	f	class:CCryptoKeyStore
LockStack	server/sync.cpp	/^typedef std::vector< std::pair<void*, CLockLocation> > LockStack;$/;"	t	file:
LogException	server/util.cpp	/^void LogException(std::exception* pex, const char* pszThread)$/;"	f
Lookup	server/netbase.cpp	/^bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup)$/;"	f
Lookup	server/netbase.cpp	/^bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)$/;"	f
LookupHost	server/netbase.cpp	/^bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f
LookupHostNumeric	server/netbase.cpp	/^bool LookupHostNumeric(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions)$/;"	f
LookupIntern	server/netbase.cpp	/^bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f	file:
LookupNumeric	server/netbase.cpp	/^bool LookupNumeric(const char *pszName, CService& addr, int portDefault)$/;"	f
MAX_BLOCK_SIGOPS	server/main.h	/^static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE\/50;$/;"	v
MAX_BLOCK_SIZE	server/main.h	/^static const unsigned int MAX_BLOCK_SIZE = 1000000;$/;"	v
MAX_BLOCK_SIZE_GEN	server/main.h	/^static const unsigned int MAX_BLOCK_SIZE_GEN = MAX_BLOCK_SIZE\/2;$/;"	v
MAX_MONEY	server/main.h	/^static const int64 MAX_MONEY = 1600000000 * COIN;$/;"	v
MAX_ORPHAN_TRANSACTIONS	server/main.h	/^static const unsigned int MAX_ORPHAN_TRANSACTIONS = MAX_BLOCK_SIZE\/100;$/;"	v
MAX_OUTBOUND_CONNECTIONS	server_iface.cpp	/^static const int MAX_OUTBOUND_CONNECTIONS = 16;$/;"	v	file:
MAX_PATH	server/util.h	85;"	d
MAX_ROUNDS_PER_HOUR	stratum/stratum.h	5;"	d
MAX_SIZE	server/serialize.h	/^static const unsigned int MAX_SIZE = 0x02000000;$/;"	v
MAX_SPEED_STEP	stratum/stratum.h	4;"	d
MAX_TASK_LIFESPAN	stratum/stratum_task.h	15;"	d
MESSAGE_SIZE_OFFSET	server/protocol.h	/^            MESSAGE_SIZE_OFFSET=MESSAGE_START_SIZE+COMMAND_SIZE,$/;"	e	enum:CMessageHeader::__anon6
MESSAGE_SIZE_SIZE	server/protocol.h	/^            MESSAGE_SIZE_SIZE=sizeof(int),$/;"	e	enum:CMessageHeader::__anon6
MESSAGE_START_SIZE	server/protocol.h	/^            MESSAGE_START_SIZE=sizeof(::pchMessageStart),$/;"	e	enum:CMessageHeader::__anon6
MIN_PROTO_VERSION	shcoind_version.h	/^static const int MIN_PROTO_VERSION = 209;$/;"	v
MIN_RELAY_TX_FEE	server/main.h	/^static const int64 MIN_RELAY_TX_FEE = MIN_TX_FEE;$/;"	v
MIN_TX_FEE	server/main.h	/^static const int64 MIN_TX_FEE = 10000000;$/;"	v
MODAL	server/ui_interface.h	/^        MODAL                 = 0x00040000$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MORE	server/ui_interface.h	/^        MORE                  = 0x00010000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
MSG_BLOCK	server/net.h	/^    MSG_BLOCK,$/;"	e	enum:__anon5
MSG_DONTWAIT	server/compat.h	32;"	d
MSG_DONTWAIT	server/util.h	74;"	d
MSG_NOSIGNAL	server/compat.h	31;"	d
MSG_NOSIGNAL	server/util.h	73;"	d
MSG_TX	server/net.h	/^    MSG_TX = 1,$/;"	e	enum:__anon5
MakeNewKey	server/key.cpp	/^void CKey::MakeNewKey(bool fCompressed)$/;"	f	class:CKey
MakeSameSize	server/script.cpp	/^void MakeSameSize(valtype& vch1, valtype& vch2)$/;"	f
MakeTried	server/addrman.cpp	/^void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)$/;"	f	class:CAddrMan
MapCheckpoints	server/checkpoints.cpp	/^    typedef std::map<int, uint256> MapCheckpoints;$/;"	t	namespace:Checkpoints	file:
MapPrevTx	server/main.h	/^typedef std::map<uint256, std::pair<CTxIndex, CTransaction> > MapPrevTx;$/;"	t
MarkDirty	server/wallet.cpp	/^void CWallet::MarkDirty()$/;"	f	class:CWallet
MarkDirty	server/wallet.h	/^    void MarkDirty()$/;"	f	class:CWalletTx
MarkSpent	server/wallet.h	/^    void MarkSpent(unsigned int nOut)$/;"	f	class:CWalletTx
MasterKeyMap	server/wallet.h	/^    typedef std::map<unsigned int, CMasterKey> MasterKeyMap;$/;"	t	class:CWallet
MessageBoxFlags	server/ui_interface.h	/^    enum MessageBoxFlags$/;"	g	class:CClientUIInterface
Misbehaving	server_iface.cpp	/^bool CNode::Misbehaving(int howmuch)$/;"	f	class:CNode
MoneyRange	server/main.h	/^inline bool MoneyRange(int64 nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }$/;"	f
MoveTo	server/sync.h	/^    void MoveTo(CSemaphoreGrant &grant) {$/;"	f	class:CSemaphoreGrant
NET_I2P	server/netbase.h	/^    NET_I2P,$/;"	e	enum:Network
NET_IPV4	server/netbase.h	/^    NET_IPV4,$/;"	e	enum:Network
NET_IPV6	server/netbase.h	/^    NET_IPV6,$/;"	e	enum:Network
NET_MAX	server/netbase.h	/^    NET_MAX,$/;"	e	enum:Network
NET_TEREDO	server/netbase.cpp	/^static const int NET_TEREDO  = NET_MAX + 1;$/;"	v	file:
NET_TOR	server/netbase.h	/^    NET_TOR,$/;"	e	enum:Network
NET_UNKNOWN	server/netbase.cpp	/^static const int NET_UNKNOWN = NET_MAX + 0;$/;"	v	file:
NET_UNROUTABLE	server/netbase.h	/^    NET_UNROUTABLE,$/;"	e	enum:Network
NO	server/ui_interface.h	/^        NO                    = 0x00000008,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
NOBLKS_VERSION_END	shcoind_version.h	/^static const int NOBLKS_VERSION_END = 32400;$/;"	v
NOBLKS_VERSION_START	shcoind_version.h	/^static const int NOBLKS_VERSION_START = 32000;$/;"	v
NODE_NETWORK	server/protocol.h	/^    NODE_NETWORK = (1 << 0),$/;"	e	enum:__anon7
NOMINMAX	server/allocators.h	20;"	d
NOMINMAX	server/compat.h	14;"	d
NOMINMAX	server/util.cpp	61;"	d	file:
NO_DEFAULT	server/ui_interface.h	/^        NO_DEFAULT            = 0x00000080,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
Network	server/netbase.h	/^enum Network$/;"	g
NewIterator	server/leveldb.h	/^    leveldb::Iterator *NewIterator() {$/;"	f	class:CLevelDB
NewKeyPool	server/wallet.cpp	/^bool CWallet::NewKeyPool()$/;"	f	class:CWallet
NotifyAddressBookChanged	server/wallet.h	/^    boost::signals2::signal<void (CWallet *wallet, const CTxDestination &address, const std::string &label, bool isMine, ChangeType status)> NotifyAddressBookChanged;$/;"	m	class:CWallet
NotifyAlertChanged	server/ui_interface.h	/^    boost::signals2::signal<void (const uint256 &hash, ChangeType status)> NotifyAlertChanged;$/;"	m	class:CClientUIInterface
NotifyBlocksChanged	server/ui_interface.h	/^    boost::signals2::signal<void ()> NotifyBlocksChanged;$/;"	m	class:CClientUIInterface
NotifyNumConnectionsChanged	server/ui_interface.h	/^    boost::signals2::signal<void (int newNumConnections)> NotifyNumConnectionsChanged;$/;"	m	class:CClientUIInterface
NotifyStatusChanged	server/keystore.h	/^    boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;$/;"	m	class:CCryptoKeyStore
NotifyTransactionChanged	server/wallet.h	/^    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx, ChangeType status)> NotifyTransactionChanged;$/;"	m	class:CWallet
OK	server/ui_interface.h	/^        OK                    = 0x00000004,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
OK_DEFAULT	server/ui_interface.h	/^        OK_DEFAULT            = 0x00000000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
OP_0	server/script.h	/^    OP_0 = 0x00,$/;"	e	enum:opcodetype
OP_0NOTEQUAL	server/script.h	/^    OP_0NOTEQUAL = 0x92,$/;"	e	enum:opcodetype
OP_1	server/script.h	/^    OP_1 = 0x51,$/;"	e	enum:opcodetype
OP_10	server/script.h	/^    OP_10 = 0x5a,$/;"	e	enum:opcodetype
OP_11	server/script.h	/^    OP_11 = 0x5b,$/;"	e	enum:opcodetype
OP_12	server/script.h	/^    OP_12 = 0x5c,$/;"	e	enum:opcodetype
OP_13	server/script.h	/^    OP_13 = 0x5d,$/;"	e	enum:opcodetype
OP_14	server/script.h	/^    OP_14 = 0x5e,$/;"	e	enum:opcodetype
OP_15	server/script.h	/^    OP_15 = 0x5f,$/;"	e	enum:opcodetype
OP_16	server/script.h	/^    OP_16 = 0x60,$/;"	e	enum:opcodetype
OP_1ADD	server/script.h	/^    OP_1ADD = 0x8b,$/;"	e	enum:opcodetype
OP_1NEGATE	server/script.h	/^    OP_1NEGATE = 0x4f,$/;"	e	enum:opcodetype
OP_1SUB	server/script.h	/^    OP_1SUB = 0x8c,$/;"	e	enum:opcodetype
OP_2	server/script.h	/^    OP_2 = 0x52,$/;"	e	enum:opcodetype
OP_2DIV	server/script.h	/^    OP_2DIV = 0x8e,$/;"	e	enum:opcodetype
OP_2DROP	server/script.h	/^    OP_2DROP = 0x6d,$/;"	e	enum:opcodetype
OP_2DUP	server/script.h	/^    OP_2DUP = 0x6e,$/;"	e	enum:opcodetype
OP_2MUL	server/script.h	/^    OP_2MUL = 0x8d,$/;"	e	enum:opcodetype
OP_2OVER	server/script.h	/^    OP_2OVER = 0x70,$/;"	e	enum:opcodetype
OP_2ROT	server/script.h	/^    OP_2ROT = 0x71,$/;"	e	enum:opcodetype
OP_2SWAP	server/script.h	/^    OP_2SWAP = 0x72,$/;"	e	enum:opcodetype
OP_3	server/script.h	/^    OP_3 = 0x53,$/;"	e	enum:opcodetype
OP_3DUP	server/script.h	/^    OP_3DUP = 0x6f,$/;"	e	enum:opcodetype
OP_4	server/script.h	/^    OP_4 = 0x54,$/;"	e	enum:opcodetype
OP_5	server/script.h	/^    OP_5 = 0x55,$/;"	e	enum:opcodetype
OP_6	server/script.h	/^    OP_6 = 0x56,$/;"	e	enum:opcodetype
OP_7	server/script.h	/^    OP_7 = 0x57,$/;"	e	enum:opcodetype
OP_8	server/script.h	/^    OP_8 = 0x58,$/;"	e	enum:opcodetype
OP_9	server/script.h	/^    OP_9 = 0x59,$/;"	e	enum:opcodetype
OP_ABS	server/script.h	/^    OP_ABS = 0x90,$/;"	e	enum:opcodetype
OP_ADD	server/script.h	/^    OP_ADD = 0x93,$/;"	e	enum:opcodetype
OP_AND	server/script.h	/^    OP_AND = 0x84,$/;"	e	enum:opcodetype
OP_BOOLAND	server/script.h	/^    OP_BOOLAND = 0x9a,$/;"	e	enum:opcodetype
OP_BOOLOR	server/script.h	/^    OP_BOOLOR = 0x9b,$/;"	e	enum:opcodetype
OP_CAT	server/script.h	/^    OP_CAT = 0x7e,$/;"	e	enum:opcodetype
OP_CHECKMULTISIG	server/script.h	/^    OP_CHECKMULTISIG = 0xae,$/;"	e	enum:opcodetype
OP_CHECKMULTISIGVERIFY	server/script.h	/^    OP_CHECKMULTISIGVERIFY = 0xaf,$/;"	e	enum:opcodetype
OP_CHECKSIG	server/script.h	/^    OP_CHECKSIG = 0xac,$/;"	e	enum:opcodetype
OP_CHECKSIGVERIFY	server/script.h	/^    OP_CHECKSIGVERIFY = 0xad,$/;"	e	enum:opcodetype
OP_CODESEPARATOR	server/script.h	/^    OP_CODESEPARATOR = 0xab,$/;"	e	enum:opcodetype
OP_DEPTH	server/script.h	/^    OP_DEPTH = 0x74,$/;"	e	enum:opcodetype
OP_DIV	server/script.h	/^    OP_DIV = 0x96,$/;"	e	enum:opcodetype
OP_DROP	server/script.h	/^    OP_DROP = 0x75,$/;"	e	enum:opcodetype
OP_DUP	server/script.h	/^    OP_DUP = 0x76,$/;"	e	enum:opcodetype
OP_ELSE	server/script.h	/^    OP_ELSE = 0x67,$/;"	e	enum:opcodetype
OP_ENDIF	server/script.h	/^    OP_ENDIF = 0x68,$/;"	e	enum:opcodetype
OP_EQUAL	server/script.h	/^    OP_EQUAL = 0x87,$/;"	e	enum:opcodetype
OP_EQUALVERIFY	server/script.h	/^    OP_EQUALVERIFY = 0x88,$/;"	e	enum:opcodetype
OP_FALSE	server/script.h	/^    OP_FALSE = OP_0,$/;"	e	enum:opcodetype
OP_FROMALTSTACK	server/script.h	/^    OP_FROMALTSTACK = 0x6c,$/;"	e	enum:opcodetype
OP_GREATERTHAN	server/script.h	/^    OP_GREATERTHAN = 0xa0,$/;"	e	enum:opcodetype
OP_GREATERTHANOREQUAL	server/script.h	/^    OP_GREATERTHANOREQUAL = 0xa2,$/;"	e	enum:opcodetype
OP_HASH160	server/script.h	/^    OP_HASH160 = 0xa9,$/;"	e	enum:opcodetype
OP_HASH256	server/script.h	/^    OP_HASH256 = 0xaa,$/;"	e	enum:opcodetype
OP_IF	server/script.h	/^    OP_IF = 0x63,$/;"	e	enum:opcodetype
OP_IFDUP	server/script.h	/^    OP_IFDUP = 0x73,$/;"	e	enum:opcodetype
OP_INVALIDOPCODE	server/script.h	/^    OP_INVALIDOPCODE = 0xff,$/;"	e	enum:opcodetype
OP_INVERT	server/script.h	/^    OP_INVERT = 0x83,$/;"	e	enum:opcodetype
OP_LEFT	server/script.h	/^    OP_LEFT = 0x80,$/;"	e	enum:opcodetype
OP_LESSTHAN	server/script.h	/^    OP_LESSTHAN = 0x9f,$/;"	e	enum:opcodetype
OP_LESSTHANOREQUAL	server/script.h	/^    OP_LESSTHANOREQUAL = 0xa1,$/;"	e	enum:opcodetype
OP_LSHIFT	server/script.h	/^    OP_LSHIFT = 0x98,$/;"	e	enum:opcodetype
OP_MAX	server/script.h	/^    OP_MAX = 0xa4,$/;"	e	enum:opcodetype
OP_MIN	server/script.h	/^    OP_MIN = 0xa3,$/;"	e	enum:opcodetype
OP_MOD	server/script.h	/^    OP_MOD = 0x97,$/;"	e	enum:opcodetype
OP_MUL	server/script.h	/^    OP_MUL = 0x95,$/;"	e	enum:opcodetype
OP_NEGATE	server/script.h	/^    OP_NEGATE = 0x8f,$/;"	e	enum:opcodetype
OP_NIP	server/script.h	/^    OP_NIP = 0x77,$/;"	e	enum:opcodetype
OP_NOP	server/script.h	/^    OP_NOP = 0x61,$/;"	e	enum:opcodetype
OP_NOP1	server/script.h	/^    OP_NOP1 = 0xb0,$/;"	e	enum:opcodetype
OP_NOP10	server/script.h	/^    OP_NOP10 = 0xb9,$/;"	e	enum:opcodetype
OP_NOP2	server/script.h	/^    OP_NOP2 = 0xb1,$/;"	e	enum:opcodetype
OP_NOP3	server/script.h	/^    OP_NOP3 = 0xb2,$/;"	e	enum:opcodetype
OP_NOP4	server/script.h	/^    OP_NOP4 = 0xb3,$/;"	e	enum:opcodetype
OP_NOP5	server/script.h	/^    OP_NOP5 = 0xb4,$/;"	e	enum:opcodetype
OP_NOP6	server/script.h	/^    OP_NOP6 = 0xb5,$/;"	e	enum:opcodetype
OP_NOP7	server/script.h	/^    OP_NOP7 = 0xb6,$/;"	e	enum:opcodetype
OP_NOP8	server/script.h	/^    OP_NOP8 = 0xb7,$/;"	e	enum:opcodetype
OP_NOP9	server/script.h	/^    OP_NOP9 = 0xb8,$/;"	e	enum:opcodetype
OP_NOT	server/script.h	/^    OP_NOT = 0x91,$/;"	e	enum:opcodetype
OP_NOTIF	server/script.h	/^    OP_NOTIF = 0x64,$/;"	e	enum:opcodetype
OP_NUMEQUAL	server/script.h	/^    OP_NUMEQUAL = 0x9c,$/;"	e	enum:opcodetype
OP_NUMEQUALVERIFY	server/script.h	/^    OP_NUMEQUALVERIFY = 0x9d,$/;"	e	enum:opcodetype
OP_NUMNOTEQUAL	server/script.h	/^    OP_NUMNOTEQUAL = 0x9e,$/;"	e	enum:opcodetype
OP_OR	server/script.h	/^    OP_OR = 0x85,$/;"	e	enum:opcodetype
OP_OVER	server/script.h	/^    OP_OVER = 0x78,$/;"	e	enum:opcodetype
OP_PICK	server/script.h	/^    OP_PICK = 0x79,$/;"	e	enum:opcodetype
OP_PUBKEY	server/script.h	/^    OP_PUBKEY = 0xfe,$/;"	e	enum:opcodetype
OP_PUBKEYHASH	server/script.h	/^    OP_PUBKEYHASH = 0xfd,$/;"	e	enum:opcodetype
OP_PUBKEYS	server/script.h	/^    OP_PUBKEYS = 0xfb,$/;"	e	enum:opcodetype
OP_PUSHDATA1	server/script.h	/^    OP_PUSHDATA1 = 0x4c,$/;"	e	enum:opcodetype
OP_PUSHDATA2	server/script.h	/^    OP_PUSHDATA2 = 0x4d,$/;"	e	enum:opcodetype
OP_PUSHDATA4	server/script.h	/^    OP_PUSHDATA4 = 0x4e,$/;"	e	enum:opcodetype
OP_RESERVED	server/script.h	/^    OP_RESERVED = 0x50,$/;"	e	enum:opcodetype
OP_RESERVED1	server/script.h	/^    OP_RESERVED1 = 0x89,$/;"	e	enum:opcodetype
OP_RESERVED2	server/script.h	/^    OP_RESERVED2 = 0x8a,$/;"	e	enum:opcodetype
OP_RETURN	server/script.h	/^    OP_RETURN = 0x6a,$/;"	e	enum:opcodetype
OP_RIGHT	server/script.h	/^    OP_RIGHT = 0x81,$/;"	e	enum:opcodetype
OP_RIPEMD160	server/script.h	/^    OP_RIPEMD160 = 0xa6,$/;"	e	enum:opcodetype
OP_ROLL	server/script.h	/^    OP_ROLL = 0x7a,$/;"	e	enum:opcodetype
OP_ROT	server/script.h	/^    OP_ROT = 0x7b,$/;"	e	enum:opcodetype
OP_RSHIFT	server/script.h	/^    OP_RSHIFT = 0x99,$/;"	e	enum:opcodetype
OP_SHA1	server/script.h	/^    OP_SHA1 = 0xa7,$/;"	e	enum:opcodetype
OP_SHA256	server/script.h	/^    OP_SHA256 = 0xa8,$/;"	e	enum:opcodetype
OP_SIZE	server/script.h	/^    OP_SIZE = 0x82,$/;"	e	enum:opcodetype
OP_SMALLINTEGER	server/script.h	/^    OP_SMALLINTEGER = 0xfa,$/;"	e	enum:opcodetype
OP_SUB	server/script.h	/^    OP_SUB = 0x94,$/;"	e	enum:opcodetype
OP_SUBSTR	server/script.h	/^    OP_SUBSTR = 0x7f,$/;"	e	enum:opcodetype
OP_SWAP	server/script.h	/^    OP_SWAP = 0x7c,$/;"	e	enum:opcodetype
OP_TOALTSTACK	server/script.h	/^    OP_TOALTSTACK = 0x6b,$/;"	e	enum:opcodetype
OP_TRUE	server/script.h	/^    OP_TRUE=OP_1,$/;"	e	enum:opcodetype
OP_TUCK	server/script.h	/^    OP_TUCK = 0x7d,$/;"	e	enum:opcodetype
OP_VER	server/script.h	/^    OP_VER = 0x62,$/;"	e	enum:opcodetype
OP_VERIF	server/script.h	/^    OP_VERIF = 0x65,$/;"	e	enum:opcodetype
OP_VERIFY	server/script.h	/^    OP_VERIFY = 0x69,$/;"	e	enum:opcodetype
OP_VERNOTIF	server/script.h	/^    OP_VERNOTIF = 0x66,$/;"	e	enum:opcodetype
OP_WITHIN	server/script.h	/^    OP_WITHIN = 0xa5,$/;"	e	enum:opcodetype
OP_XOR	server/script.h	/^    OP_XOR = 0x86,$/;"	e	enum:opcodetype
Open	server/db.cpp	/^bool CDBEnv::Open(boost::filesystem::path pathEnv_)$/;"	f	class:CDBEnv
OpenBlockFile	server/main.cpp	/^FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszMode)$/;"	f
OpenNetworkConnection	server_iface.cpp	/^bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOutbound, const char *strDest, bool fOneShot)$/;"	f
OutputDebugStringF	server/util.cpp	/^inline int OutputDebugStringF(const char* pszFormat, ...)$/;"	f
PAGESIZE	server/allocators.h	35;"	d
PAIRTYPE	server/util.h	56;"	d
PRI64d	server/util.h	45;"	d
PRI64d	server/util.h	49;"	d
PRI64u	server/util.h	46;"	d
PRI64u	server/util.h	50;"	d
PRI64x	server/util.h	47;"	d
PRI64x	server/util.h	51;"	d
PRIVKEY_ADDRESS	server/base58.h	/^        PRIVKEY_ADDRESS = CBitcoinAddress::PUBKEY_ADDRESS + 128,$/;"	e	enum:CBitcoinSecret::__anon2
PRIVKEY_ADDRESS_TEST	server/base58.h	/^        PRIVKEY_ADDRESS_TEST = CBitcoinAddress::PUBKEY_ADDRESS_TEST + 128,$/;"	e	enum:CBitcoinSecret::__anon2
PROTOCOL_VERSION	shcoind_version.h	/^static const int PROTOCOL_VERSION = 1000400;$/;"	v
PUBKEY_ADDRESS	server/base58.h	/^        PUBKEY_ADDRESS = 38,$/;"	e	enum:CBitcoinAddress::__anon1
PUBKEY_ADDRESS_TEST	server/base58.h	/^        PUBKEY_ADDRESS_TEST = 111,$/;"	e	enum:CBitcoinAddress::__anon1
ParseHex	server/util.cpp	/^vector<unsigned char> ParseHex(const char* psz)$/;"	f
ParseHex	server/util.cpp	/^vector<unsigned char> ParseHex(const string& str)$/;"	f
ParseMoney	server/util.cpp	/^bool ParseMoney(const char* pszIn, int64& nRet)$/;"	f
ParseMoney	server/util.cpp	/^bool ParseMoney(const string& str, int64& nRet)$/;"	f
ParseNetwork	server/netbase.cpp	/^enum Network ParseNetwork(std::string net) {$/;"	f
ParseParameters	server/util.cpp	/^void ParseParameters(int argc, const char* const argv[])$/;"	f
ParseString	server/util.cpp	/^void ParseString(const string& str, char c, vector<string>& v)$/;"	f
PrintBlockTree	server/main.cpp	/^void PrintBlockTree()$/;"	f
PrintException	server/util.cpp	/^void PrintException(std::exception* pex, const char* pszThread)$/;"	f
PrintExceptionContinue	server/util.cpp	/^void PrintExceptionContinue(std::exception* pex, const char* pszThread)$/;"	f
PrintHex	server/script.h	/^    void PrintHex() const$/;"	f	class:CScript
PrintHex	server/util.h	/^inline void PrintHex(const std::vector<unsigned char>& vch, const char* pszFormat="%s", bool fSpaces=true)$/;"	f
PrintHex	server/util.h	/^void PrintHex(const T pbegin, const T pend, const char* pszFormat="%s", bool fSpaces=true)$/;"	f
PrintLockContention	server/sync.cpp	/^void PrintLockContention(const char* pszName, const char* pszFile, int nLine)$/;"	f
PrintWallet	server/wallet.cpp	/^void CWallet::PrintWallet(const CBlock& block)$/;"	f	class:CWallet
PrintWallets	server/main.cpp	/^void static PrintWallets(const CBlock& block)$/;"	f	file:
ProcessAlert	server/main.cpp	/^bool CAlert::ProcessAlert()$/;"	f	class:CAlert
ProcessBlock	server/main.cpp	/^bool ProcessBlock(CNode* pfrom, CBlock* pblock)$/;"	f
ProcessMessage	server/main.cpp	/^bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)$/;"	f	file:
ProcessMessages	server/main.cpp	/^bool ProcessMessages(CNode* pfrom)$/;"	f
ProcessOneShot	server_iface.cpp	/^void static ProcessOneShot()$/;"	f	file:
PushAddress	server/net.h	/^    void PushAddress(const CAddress& addr)$/;"	f	class:CNode
PushAll	server/script.cpp	/^static CScript PushAll(const vector<valtype>& values)$/;"	f	file:
PushGetBlocks	server_iface.cpp	/^void CNode::PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd)$/;"	f	class:CNode
PushInventory	server/net.h	/^    void PushInventory(const CInv& inv)$/;"	f	class:CNode
PushMessage	server/net.h	/^    void PushMessage(const char* pszCommand)$/;"	f	class:CNode
PushMessage	server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1)$/;"	f	class:CNode
PushMessage	server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2)$/;"	f	class:CNode
PushMessage	server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3)$/;"	f	class:CNode
PushMessage	server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4)$/;"	f	class:CNode
PushMessage	server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5)$/;"	f	class:CNode
PushMessage	server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6)$/;"	f	class:CNode
PushMessage	server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7)$/;"	f	class:CNode
PushMessage	server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7, const T8& a8)$/;"	f	class:CNode
PushMessage	server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7, const T8& a8, const T9& a9)$/;"	f	class:CNode
PushRequest	server/net.h	/^    void PushRequest(const char* pszCommand, const T1& a1, const T2& a2,$/;"	f	class:CNode
PushRequest	server/net.h	/^    void PushRequest(const char* pszCommand, const T1& a1,$/;"	f	class:CNode
PushRequest	server/net.h	/^    void PushRequest(const char* pszCommand,$/;"	f	class:CNode
PushVersion	server_iface.cpp	/^void CNode::PushVersion()$/;"	f	class:CNode
QueueShutdown	server/ui_interface.h	/^    boost::signals2::signal<void ()> QueueShutdown;$/;"	m	class:CClientUIInterface
QuickCheckWork	block_iface.cpp	/^bool QuickCheckWork(CBlock* pblock)$/;"	f
READDATA	server/serialize.h	110;"	d
READWRITE	server/serialize.h	99;"	d
REF	server/serialize.h	/^inline T& REF(const T& val)$/;"	f
RESET	server/ui_interface.h	/^        RESET                 = 0x00004000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
RPCAcceptHandler	server/bitcoinrpc.cpp	/^static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,$/;"	f	file:
RPCConvertValues	server/bitcoinrpc.cpp	/^Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams)$/;"	f
RPCListen	server/bitcoinrpc.cpp	/^static void RPCListen(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,$/;"	f	file:
RPCTypeCheck	server/bitcoinrpc.cpp	/^void RPCTypeCheck(const Array& params,$/;"	f
RPCTypeCheck	server/bitcoinrpc.cpp	/^void RPCTypeCheck(const Object& o,$/;"	f
RandAddSeed	server/util.cpp	/^void RandAddSeed()$/;"	f
RandAddSeedPerfmon	server/util.cpp	/^void RandAddSeedPerfmon()$/;"	f
Raw	server/key.h	/^    std::vector<unsigned char> Raw() const {$/;"	f	class:CPubKey
ReacceptWalletTransactions	server/wallet.cpp	/^void CWallet::ReacceptWalletTransactions()$/;"	f	class:CWallet
Read	server/db.cpp	/^bool CAddrDB::Read(CAddrMan& addr)$/;"	f	class:CAddrDB
Read	server/db.h	/^    bool Read(const K& key, T& value)$/;"	f	class:CDB
Read	server/leveldb.h	/^    template<typename K, typename V> bool Read(const K& key, V& value) throw(leveldb_error) {$/;"	f	class:CLevelDB
ReadAccount	server/walletdb.cpp	/^bool CWalletDB::ReadAccount(const string& strAccount, CAccount& account)$/;"	f	class:CWalletDB
ReadAtCursor	server/db.h	/^    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue, unsigned int fFlags=DB_NEXT)$/;"	f	class:CDB
ReadBestBlock	server/walletdb.h	/^    bool ReadBestBlock(CBlockLocator& locator)$/;"	f	class:CWalletDB
ReadBestInvalidWork	server/db.cpp	/^bool CTxDB::ReadBestInvalidWork(CBigNum& bnBestInvalidWork)$/;"	f	class:CTxDB
ReadCScript	server/walletdb.h	/^    bool ReadCScript(const uint160 &hash, CScript& redeemScript)$/;"	f	class:CWalletDB
ReadCompactSize	server/serialize.h	/^uint64 ReadCompactSize(Stream& is)$/;"	f
ReadDefaultKey	server/walletdb.h	/^    bool ReadDefaultKey(std::vector<unsigned char>& vchPubKey)$/;"	f	class:CWalletDB
ReadDiskTx	server/db.cpp	/^bool CTxDB::ReadDiskTx(COutPoint outpoint, CTransaction& tx)$/;"	f	class:CTxDB
ReadDiskTx	server/db.cpp	/^bool CTxDB::ReadDiskTx(COutPoint outpoint, CTransaction& tx, CTxIndex& txindex)$/;"	f	class:CTxDB
ReadDiskTx	server/db.cpp	/^bool CTxDB::ReadDiskTx(uint256 hash, CTransaction& tx)$/;"	f	class:CTxDB
ReadDiskTx	server/db.cpp	/^bool CTxDB::ReadDiskTx(uint256 hash, CTransaction& tx, CTxIndex& txindex)$/;"	f	class:CTxDB
ReadFromDisk	server/main.cpp	/^bool CBlock::ReadFromDisk(const CBlockIndex* pindex, bool fReadTransactions)$/;"	f	class:CBlock
ReadFromDisk	server/main.cpp	/^bool CTransaction::ReadFromDisk(COutPoint prevout)$/;"	f	class:CTransaction
ReadFromDisk	server/main.cpp	/^bool CTransaction::ReadFromDisk(CTxDB& txdb, COutPoint prevout)$/;"	f	class:CTransaction
ReadFromDisk	server/main.cpp	/^bool CTransaction::ReadFromDisk(CTxDB& txdb, COutPoint prevout, CTxIndex& txindexRet)$/;"	f	class:CTransaction
ReadFromDisk	server/main.h	/^    bool ReadFromDisk(CDiskTxPos pos, FILE** pfileRet=NULL)$/;"	f	class:CTransaction
ReadFromDisk	server/main.h	/^    bool ReadFromDisk(unsigned int nFile, unsigned int nBlockPos, bool fReadTransactions=true)$/;"	f	class:CBlock
ReadHTTP	server/bitcoinrpc.cpp	/^int ReadHTTP(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet, string& strMessageRet)$/;"	f
ReadHTTPHeader	server/bitcoinrpc.cpp	/^int ReadHTTPHeader(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet)$/;"	f
ReadHTTPStatus	server/bitcoinrpc.cpp	/^int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto)$/;"	f
ReadHashBestChain	server/db.cpp	/^bool CTxDB::ReadHashBestChain(uint256& hashBestChain)$/;"	f	class:CTxDB
ReadKey	server/walletdb.h	/^    bool ReadKey(const CPubKey& vchPubKey, CPrivKey& vchPrivKey)$/;"	f	class:CWalletDB
ReadName	server/walletdb.h	/^    bool ReadName(const std::string& strAddress, std::string& strName)$/;"	f	class:CWalletDB
ReadPool	server/walletdb.h	/^    bool ReadPool(int64 nPool, CKeyPool& keypool)$/;"	f	class:CWalletDB
ReadSetting	server/walletdb.h	/^    bool ReadSetting(const std::string& strKey, T& value)$/;"	f	class:CWalletDB
ReadTx	server/walletdb.h	/^    bool ReadTx(uint256 hash, CWalletTx& wtx)$/;"	f	class:CWalletDB
ReadTxIndex	server/db.cpp	/^bool CTxDB::ReadTxIndex(uint256 hash, CTxIndex& txindex)$/;"	f	class:CTxDB
ReadVersion	server/db.h	/^    bool ReadVersion(int& nVersion)$/;"	f	class:CDB
ReadVersion	server/serialize.h	/^    void ReadVersion()           { *this >> nVersion; }$/;"	f	class:CAutoFile
ReadVersion	server/serialize.h	/^    void ReadVersion()           { *this >> nVersion; }$/;"	f	class:CDataStream
ReceiveBufferSize	server/net.h	/^inline unsigned int ReceiveBufferSize() { return 1000*GetArg("-maxreceivebuffer", 5*1000); }$/;"	f
RecvCodeLine	server/irc.cpp	/^bool RecvCodeLine(SOCKET hSocket, const char* psz1, string& strRet)$/;"	f
RecvLine	server_iface.cpp	/^bool RecvLine(SOCKET hSocket, string& strLine)$/;"	f
RecvLineIRC	server/irc.cpp	/^bool RecvLineIRC(SOCKET hSocket, string& strLine)$/;"	f
RecvUntil	server/irc.cpp	/^int RecvUntil(SOCKET hSocket, const char* psz1, const char* psz2=NULL, const char* psz3=NULL, const char* psz4=NULL)$/;"	f
RegisterWallet	server/main.cpp	/^void RegisterWallet(CWallet* pwalletIn)$/;"	f
RelayInventory	server/net.h	/^inline void RelayInventory(const CInv& inv)$/;"	f
RelayMessage	server/net.h	/^inline void RelayMessage<>(const CInv& inv, const CDataStream& ss)$/;"	f
RelayMessage	server/net.h	/^void RelayMessage(const CInv& inv, const T& a)$/;"	f
RelayTo	server/main.h	/^    bool RelayTo(CNode* pnode) const$/;"	f	class:CAlert
RelayWalletTransaction	server/wallet.cpp	/^void CWalletTx::RelayWalletTransaction()$/;"	f	class:CWalletTx
RelayWalletTransaction	server/wallet.cpp	/^void CWalletTx::RelayWalletTransaction(CTxDB& txdb)$/;"	f	class:CWalletTx
Release	server/net.h	/^    void Release()$/;"	f	class:CNode
Release	server/sync.h	/^    void Release() {$/;"	f	class:CSemaphoreGrant
RenameOver	server/util.cpp	/^bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)$/;"	f
RenameThread	server/util.cpp	/^void RenameThread(const char* name)$/;"	f
Reorganize	server/main.cpp	/^bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)$/;"	f	file:
ResendWalletTransactions	server/main.cpp	/^void static ResendWalletTransactions()$/;"	f	file:
ResendWalletTransactions	server/wallet.cpp	/^void CWallet::ResendWalletTransactions()$/;"	f	class:CWallet
ReserveKeyFromKeyPool	server/wallet.cpp	/^void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)$/;"	f	class:CWallet
Reset	server/key.cpp	/^void CKey::Reset()$/;"	f	class:CKey
ReturnKey	server/wallet.cpp	/^void CReserveKey::ReturnKey()$/;"	f	class:CReserveKey
ReturnKey	server/wallet.cpp	/^void CWallet::ReturnKey(int64 nIndex)$/;"	f	class:CWallet
Rewind	server/serialize.h	/^    bool Rewind(size_type n)$/;"	f	class:CDataStream
Rewrite	server/db.cpp	/^bool CDB::Rewrite(const string& strFile, const char* pszSkip)$/;"	f	class:CDB
SCRIPT_ADDRESS	server/base58.h	/^        SCRIPT_ADDRESS = 5,$/;"	e	enum:CBitcoinAddress::__anon1
SCRIPT_ADDRESS_TEST	server/base58.h	/^        SCRIPT_ADDRESS_TEST = 196,$/;"	e	enum:CBitcoinAddress::__anon1
SCRYPT_H	server/scrypt.h	2;"	d
SCRYPT_SCRATCHPAD_SIZE	server/scrypt.h	/^const int SCRYPT_SCRATCHPAD_SIZE = 131072 + 63;$/;"	v
SER_BLOCKHEADERONLY	server/serialize.h	/^    SER_BLOCKHEADERONLY = (1 << 17),$/;"	e	enum:__anon9
SER_DISK	server/serialize.h	/^    SER_DISK            = (1 << 1),$/;"	e	enum:__anon9
SER_GETHASH	server/serialize.h	/^    SER_GETHASH         = (1 << 2),$/;"	e	enum:__anon9
SER_NETWORK	server/serialize.h	/^    SER_NETWORK         = (1 << 0),$/;"	e	enum:__anon9
SER_SKIPSIG	server/serialize.h	/^    SER_SKIPSIG         = (1 << 16),$/;"	e	enum:__anon9
SETUP	server/ui_interface.h	/^        SETUP                 = 0x00020000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
SHA256Transform	server/main.cpp	/^void SHA256Transform(void* pstate, void* pinput, const void* pinit)$/;"	f
SIGHASH_ALL	server/script.h	/^    SIGHASH_ALL = 1,$/;"	e	enum:__anon8
SIGHASH_ANYONECANPAY	server/script.h	/^    SIGHASH_ANYONECANPAY = 0x80,$/;"	e	enum:__anon8
SIGHASH_NONE	server/script.h	/^    SIGHASH_NONE = 2,$/;"	e	enum:__anon8
SIGHASH_SINGLE	server/script.h	/^    SIGHASH_SINGLE = 3,$/;"	e	enum:__anon8
SOCKET	server/compat.h	/^typedef u_int SOCKET;$/;"	t
SOCKET_ERROR	server/compat.h	46;"	d
SSLIOStreamDevice	server/bitcoinrpc.cpp	/^    SSLIOStreamDevice(asio::ssl::stream<typename Protocol::socket> &streamIn, bool fUseSSLIn) : stream(streamIn)$/;"	f	class:SSLIOStreamDevice
SSLIOStreamDevice	server/bitcoinrpc.cpp	/^class SSLIOStreamDevice : public iostreams::device<iostreams::bidirectional> {$/;"	c	file:
STRATUM_DAEMON_PORT	proto/network.h	34;"	d
STRINGIFY	server/version.cpp	47;"	d	file:
S_IRUSR	server/util.h	77;"	d
S_IWUSR	server/util.h	78;"	d
ScanForWalletTransaction	server/wallet.cpp	/^int CWallet::ScanForWalletTransaction(const uint256& hashTx)$/;"	f	class:CWallet
ScanForWalletTransactions	server/wallet.cpp	/^int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)$/;"	f	class:CWallet
ScanHash_CryptoPP	server/main.cpp	/^unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1, char* phash, unsigned int& nHashesDone)$/;"	f	file:
ScriptMap	server/keystore.h	/^typedef std::map<CScriptID, CScript > ScriptMap;$/;"	t
ScriptPubKeyToJSON	server/rpcrawtransaction.cpp	/^ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out)$/;"	f
ScriptSigArgsExpected	server/script.cpp	/^int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions)$/;"	f
SecureString	server/allocators.h	/^typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;$/;"	t
SeenLocal	server_iface.cpp	/^bool SeenLocal(const CService& addr)$/;"	f
Select	server/addrman.h	/^    CAddress Select(int nUnkBias = 50)$/;"	f	class:CAddrMan
SelectCoins	server/wallet.cpp	/^bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const$/;"	f	class:CWallet
SelectCoinsMinConf	server/wallet.cpp	/^bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,$/;"	f	class:CWallet
SelectTried	server/addrman.cpp	/^int CAddrMan::SelectTried(int nKBucket)$/;"	f	class:CAddrMan
Select_	server/addrman.cpp	/^CAddress CAddrMan::Select_(int nUnkBias)$/;"	f	class:CAddrMan
Send	server/irc.cpp	/^static bool Send(SOCKET hSocket, const char* pszSend)$/;"	f	file:
SendBufferSize	server/net.h	/^inline unsigned int SendBufferSize() { return 1000*GetArg("-maxsendbuffer", 1*1000); }$/;"	f
SendMessages	server/main.cpp	/^bool SendMessages(CNode* pto, bool fSendTrickle)$/;"	f
SendMoney	server/wallet.cpp	/^string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee)$/;"	f	class:CWallet
SendMoneyToDestination	server/wallet.cpp	/^string CWallet::SendMoneyToDestination(const CTxDestination& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee)$/;"	f	class:CWallet
SerReadWrite	server/serialize.h	/^inline unsigned int SerReadWrite(Stream& s, T& obj, int nType, int nVersion, CSerActionUnserialize ser_action)$/;"	f
SerReadWrite	server/serialize.h	/^inline unsigned int SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionGetSerializeSize ser_action)$/;"	f
SerReadWrite	server/serialize.h	/^inline unsigned int SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionSerialize ser_action)$/;"	f
Serialize	server/bignum.h	/^    void Serialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION) const$/;"	f	class:CBigNum
Serialize	server/serialize.h	/^    void Serialize(Stream& s, int nType, int nVersion) const$/;"	f	class:CDataStream
Serialize	server/serialize.h	/^    void Serialize(Stream& s, int, int=0) const$/;"	f	class:CFlatData
Serialize	server/serialize.h	/^inline void Serialize(Stream& os, const T& a, long nType, int nVersion)$/;"	f
Serialize	server/serialize.h	/^inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion)$/;"	f
Serialize	server/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; WRITEDATA(s, f); }$/;"	f
Serialize	server/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, char a,           int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	server/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, double a,         int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	server/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, float a,          int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	server/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int64 a,          int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	server/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed char a,    int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	server/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed int a,     int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	server/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed long a,    int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	server/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed short a,   int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	server/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint64 a,         int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	server/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned char a,  int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	server/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned int a,   int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	server/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned long a,  int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	server/serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned short a, int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	server/serialize.h	/^void Serialize(Stream& os, const CScript& v, int nType, int nVersion)$/;"	f
Serialize	server/serialize.h	/^void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)$/;"	f
Serialize	server/serialize.h	/^void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)$/;"	f
Serialize	server/serialize.h	/^void Serialize(Stream& os, const std::basic_string<C>& str, int, int)$/;"	f
Serialize	server/serialize.h	/^void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
Serialize	server/serialize.h	/^void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion)$/;"	f
Serialize	server/serialize.h	/^void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
Serialize	server/uint256.h	/^    void Serialize(Stream& s, int nType, int nVersion) const$/;"	f	class:base_uint
SerializeHash	server/util.h	/^uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)$/;"	f
Serialize_impl	server/serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)$/;"	f
Serialize_impl	server/serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)$/;"	f
ServerShutdown	server/init.cpp	/^void ServerShutdown(void* parg)$/;"	f
Set	server/base58.h	/^    bool Set(const CKeyID &id) {$/;"	f	class:CBitcoinAddress
Set	server/base58.h	/^    bool Set(const CScriptID &id) {$/;"	f	class:CBitcoinAddress
Set	server/base58.h	/^    bool Set(const CTxDestination &dest)$/;"	f	class:CBitcoinAddress
Set	server/main.h	/^    void Set(const CBlockIndex* pindex)$/;"	f	class:CBlockLocator
Set	server/script.cpp	/^    Set(uint256 hash, const std::vector<unsigned char>& vchSig, const std::vector<unsigned char>& pubKey)$/;"	f	class:CSignatureCache
SetAddressBookName	server/wallet.cpp	/^bool CWallet::SetAddressBookName(const CTxDestination& address, const string& strName)$/;"	f	class:CWallet
SetBestChain	server/main.cpp	/^bool CBlock::SetBestChain(CTxDB& txdb, CBlockIndex* pindexNew)$/;"	f	class:CBlock
SetBestChain	server/main.cpp	/^void static SetBestChain(const CBlockLocator& loc)$/;"	f	file:
SetBestChain	server/wallet.cpp	/^void CWallet::SetBestChain(const CBlockLocator& loc)$/;"	f	class:CWallet
SetBestChainInner	server/main.cpp	/^bool CBlock::SetBestChainInner(CTxDB& txdb, CBlockIndex *pindexNew)$/;"	f	class:CBlock
SetCompact	server/bignum.h	/^    CBigNum& SetCompact(unsigned int nCompact)$/;"	f	class:CBigNum
SetCompactSignature	server/key.cpp	/^bool CKey::SetCompactSignature(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:CKey
SetCompressedPubKey	server/key.cpp	/^void CKey::SetCompressedPubKey()$/;"	f	class:CKey
SetCrypted	server/keystore.cpp	/^bool CCryptoKeyStore::SetCrypted()$/;"	f	class:CCryptoKeyStore
SetData	server/base58.h	/^    void SetData(int nVersionIn, const unsigned char *pbegin, const unsigned char *pend)$/;"	f	class:CBase58Data
SetData	server/base58.h	/^    void SetData(int nVersionIn, const void* pdata, size_t nSize)$/;"	f	class:CBase58Data
SetDefaultKey	server/wallet.cpp	/^bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)$/;"	f	class:CWallet
SetDestination	server/script.cpp	/^void CScript::SetDestination(const CTxDestination& dest)$/;"	f	class:CScript
SetDetach	server/db.h	/^    void SetDetach(bool fDetachDB_) { fDetachDB = fDetachDB_; }$/;"	f	class:CDBEnv
SetExtraNonce	server/main.cpp	/^void SetExtraNonce(CBlock* pblock, const char *xn_hex)$/;"	f
SetHex	server/bignum.h	/^    void SetHex(const std::string& str)$/;"	f	class:CBigNum
SetHex	server/uint256.h	/^    void SetHex(const char* psz)$/;"	f	class:base_uint
SetHex	server/uint256.h	/^    void SetHex(const std::string& str)$/;"	f	class:base_uint
SetIP	server/netbase.cpp	/^void CNetAddr::SetIP(const CNetAddr& ipIn)$/;"	f	class:CNetAddr
SetKey	server/crypter.cpp	/^bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV)$/;"	f	class:CCrypter
SetKeyFromPassphrase	server/crypter.cpp	/^bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)$/;"	f	class:CCrypter
SetLimited	server_iface.cpp	/^void SetLimited(enum Network net, bool fLimited)$/;"	f
SetMaxVersion	server/wallet.cpp	/^bool CWallet::SetMaxVersion(int nVersion)$/;"	f	class:CWallet
SetMerkleBranch	server/main.cpp	/^int CMerkleTx::SetMerkleBranch(const CBlock* pblock)$/;"	f	class:CMerkleTx
SetMinVersion	server/wallet.cpp	/^bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn, bool fExplicit)$/;"	f	class:CWallet
SetMockTime	server/util.cpp	/^void SetMockTime(int64 nMockTimeIn)$/;"	f
SetMultisig	server/script.cpp	/^void CScript::SetMultisig(int nRequired, const std::vector<CKey>& keys)$/;"	f	class:CScript
SetNameProxy	server/netbase.cpp	/^bool SetNameProxy(CService addrProxy, int nSocksVersion) {$/;"	f
SetNull	server/main.h	/^    void SetNull() { hash = 0; n = (unsigned int) -1; }$/;"	f	class:COutPoint
SetNull	server/main.h	/^    void SetNull() { nFile = (unsigned int) -1; nBlockPos = 0; nTxPos = 0; }$/;"	f	class:CDiskTxPos
SetNull	server/main.h	/^    void SetNull() { ptx = NULL; n = (unsigned int) -1; }$/;"	f	class:CInPoint
SetNull	server/main.h	/^    void SetNull()$/;"	f	class:CAlert
SetNull	server/main.h	/^    void SetNull()$/;"	f	class:CBlock
SetNull	server/main.h	/^    void SetNull()$/;"	f	class:CBlockLocator
SetNull	server/main.h	/^    void SetNull()$/;"	f	class:CTransaction
SetNull	server/main.h	/^    void SetNull()$/;"	f	class:CTxIndex
SetNull	server/main.h	/^    void SetNull()$/;"	f	class:CTxOut
SetNull	server/main.h	/^    void SetNull()$/;"	f	class:CUnsignedAlert
SetNull	server/wallet.h	/^    void SetNull()$/;"	f	class:CAccount
SetNull	server/wallet.h	/^    void SetNull()$/;"	f	class:CAccountingEntry
SetPort	server/netbase.cpp	/^void CService::SetPort(unsigned short portIn)$/;"	f	class:CService
SetPort	server/netbase.h	20;"	d
SetPrivKey	server/key.cpp	/^bool CKey::SetPrivKey(const CPrivKey& vchPrivKey)$/;"	f	class:CKey
SetProxy	server/netbase.cpp	/^bool SetProxy(enum Network net, CService addrProxy, int nSocksVersion) {$/;"	f
SetPubKey	server/key.cpp	/^bool CKey::SetPubKey(const CPubKey& vchPubKey)$/;"	f	class:CKey
SetReachable	server_iface.cpp	/^void SetReachable(enum Network net, bool fFlag)$/;"	f
SetSecret	server/base58.h	/^    void SetSecret(const CSecret& vchSecret, bool fCompressed)$/;"	f	class:CBitcoinSecret
SetSecret	server/key.cpp	/^bool CKey::SetSecret(const CSecret& vchSecret, bool fCompressed)$/;"	f	class:CKey
SetSockAddr	server/netbase.cpp	/^bool CService::SetSockAddr(const struct sockaddr *paddr)$/;"	f	class:CService
SetSpecial	server/netbase.cpp	/^bool CNetAddr::SetSpecial(const std::string &strName)$/;"	f	class:CNetAddr
SetString	server/base58.h	/^    bool SetString(const char* psz)$/;"	f	class:CBase58Data
SetString	server/base58.h	/^    bool SetString(const char* pszSecret)$/;"	f	class:CBitcoinSecret
SetString	server/base58.h	/^    bool SetString(const std::string& str)$/;"	f	class:CBase58Data
SetString	server/base58.h	/^    bool SetString(const std::string& strSecret)$/;"	f	class:CBitcoinSecret
SetThreadPriority	server/util.h	/^inline void SetThreadPriority(int nPriority)$/;"	f
SetType	server/serialize.h	/^    void SetType(int n)          { nType = n; }$/;"	f	class:CAutoFile
SetType	server/serialize.h	/^    void SetType(int n)          { nType = n; }$/;"	f	class:CDataStream
SetVersion	server/serialize.h	/^    void SetVersion(int n)       { nVersion = n; }$/;"	f	class:CAutoFile
SetVersion	server/serialize.h	/^    void SetVersion(int n)       { nVersion = n; }$/;"	f	class:CDataStream
ShrinkDebugFile	server/util.cpp	/^void ShrinkDebugFile()$/;"	f
ShrinkNew	server/addrman.cpp	/^int CAddrMan::ShrinkNew(int nUBucket)$/;"	f	class:CAddrMan
Shutdown2	server/init.cpp	/^void Shutdown2(void)$/;"	f
Sign	server/key.cpp	/^bool CKey::Sign(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:CKey
Sign1	server/script.cpp	/^bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)$/;"	f
SignCompact	server/key.cpp	/^bool CKey::SignCompact(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:CKey
SignN	server/script.cpp	/^bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)$/;"	f
SignSignature	server/script.cpp	/^bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
SignSignature	server/script.cpp	/^bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
SignatureHash	server/script.cpp	/^uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
Sleep	server/util.h	/^inline void Sleep(int64 n)$/;"	f
Socks4	server/netbase.cpp	/^bool static Socks4(const CService &addrDest, SOCKET& hSocket)$/;"	f	file:
Socks5	server/netbase.cpp	/^bool static Socks5(string strDest, int port, SOCKET& hSocket)$/;"	f	file:
SoftSetArg	server/util.cpp	/^bool SoftSetArg(const std::string& strArg, const std::string& strValue)$/;"	f
SoftSetBoolArg	server/util.cpp	/^bool SoftSetBoolArg(const std::string& strArg, bool fValue)$/;"	f
Solver	server/script.cpp	/^bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType,$/;"	f
Solver	server/script.cpp	/^bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsigned char> >& vSolutionsRet)$/;"	f
SplitHostPort	server/netbase.cpp	/^void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {$/;"	f
StackString	server/script.h	/^inline std::string StackString(const std::vector<std::vector<unsigned char> >& vStack)$/;"	f
StartCoinServer	server_iface.cpp	/^void StartCoinServer(void)$/;"	f
StartServerShutdown	server/init.cpp	/^void StartServerShutdown()$/;"	f
StopNode	server_iface.cpp	/^bool StopNode()$/;"	f
SwapRandom	server/addrman.cpp	/^void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2)$/;"	f	class:CAddrMan
Sync	server/leveldb.h	/^    bool Sync() throw(leveldb_error) {$/;"	f	class:CLevelDB
SyncWithWallets	server/main.cpp	/^void SyncWithWallets(const CTransaction& tx, const CBlock* pblock, bool fUpdate)$/;"	f
THREAD_ADDEDCONNECTIONS	server/net.h	/^    THREAD_ADDEDCONNECTIONS,$/;"	e	enum:threadId
THREAD_DNSSEED	server/net.h	/^    THREAD_DNSSEED,$/;"	e	enum:threadId
THREAD_DUMPADDRESS	server/net.h	/^    THREAD_DUMPADDRESS,$/;"	e	enum:threadId
THREAD_MAX	server/net.h	/^    THREAD_MAX$/;"	e	enum:threadId
THREAD_MESSAGEHANDLER	server/net.h	/^    THREAD_MESSAGEHANDLER,$/;"	e	enum:threadId
THREAD_MINER	server/net.h	/^    THREAD_MINER,$/;"	e	enum:threadId
THREAD_OPENCONNECTIONS	server/net.h	/^    THREAD_OPENCONNECTIONS,$/;"	e	enum:threadId
THREAD_PRIORITY_ABOVE_NORMAL	server/util.h	601;"	d
THREAD_PRIORITY_BELOW_NORMAL	server/util.h	599;"	d
THREAD_PRIORITY_LOWEST	server/util.h	598;"	d
THREAD_PRIORITY_NORMAL	server/util.h	600;"	d
THREAD_RPCHANDLER	server/net.h	/^    THREAD_RPCHANDLER,$/;"	e	enum:threadId
THREAD_RPCLISTENER	server/net.h	/^    THREAD_RPCLISTENER,$/;"	e	enum:threadId
THREAD_SOCKETHANDLER	server/net.h	/^    THREAD_SOCKETHANDLER,$/;"	e	enum:threadId
THREAD_UPNP	server/net.h	/^    THREAD_UPNP,$/;"	e	enum:threadId
TRY_LOCK	server/sync.h	111;"	d
TX_MULTISIG	server/script.h	/^    TX_MULTISIG,$/;"	e	enum:txnouttype
TX_NONSTANDARD	server/script.h	/^    TX_NONSTANDARD,$/;"	e	enum:txnouttype
TX_PUBKEY	server/script.h	/^    TX_PUBKEY,$/;"	e	enum:txnouttype
TX_PUBKEYHASH	server/script.h	/^    TX_PUBKEYHASH,$/;"	e	enum:txnouttype
TX_SCRIPTHASH	server/script.h	/^    TX_SCRIPTHASH,$/;"	e	enum:txnouttype
Testuint256AdHoc	server/uint256.h	/^inline int Testuint256AdHoc(std::vector<std::string> vArg)$/;"	f
ThreadCleanWalletPassphrase	server/bitcoinrpc.cpp	/^void ThreadCleanWalletPassphrase(void* parg)$/;"	f
ThreadDumpAddress	server_iface.cpp	/^void ThreadDumpAddress(void* parg)$/;"	f
ThreadDumpAddress2	server_iface.cpp	/^void ThreadDumpAddress2(void* parg)$/;"	f
ThreadFlushWalletDB	server/walletdb.cpp	/^void ThreadFlushWalletDB(void* parg)$/;"	f
ThreadGetMyExternalIP	server_iface.cpp	/^void ThreadGetMyExternalIP(void* parg)$/;"	f
ThreadIRCSeed	server/irc.cpp	/^void ThreadIRCSeed(void* parg)$/;"	f
ThreadIRCSeed2	server/irc.cpp	/^void ThreadIRCSeed2(void* parg)$/;"	f
ThreadMessageHandler	server_iface.cpp	/^void ThreadMessageHandler(void* parg)$/;"	f
ThreadMessageHandler2	server_iface.cpp	/^void ThreadMessageHandler2(void* parg)$/;"	f
ThreadOpenConnections	server_iface.cpp	/^void ThreadOpenConnections(void* parg)$/;"	f
ThreadOpenConnections2	server_iface.cpp	/^void ThreadOpenConnections2(void* parg)$/;"	f
ThreadRPCServer	server/bitcoinrpc.cpp	/^void ThreadRPCServer(void* parg)$/;"	f
ThreadRPCServer2	server/bitcoinrpc.cpp	/^void ThreadRPCServer2(void* parg)$/;"	f
ThreadRPCServer3	server/bitcoinrpc.cpp	/^void ThreadRPCServer3(void* parg)$/;"	f
ThreadSafeAskFee	server/ui_interface.h	/^    boost::signals2::signal<bool (int64 nFeeRequired, const std::string& strCaption), boost::signals2::last_value<bool> > ThreadSafeAskFee;$/;"	m	class:CClientUIInterface
ThreadSafeHandleURI	server/ui_interface.h	/^    boost::signals2::signal<void (const std::string& strURI)> ThreadSafeHandleURI;$/;"	m	class:CClientUIInterface
ThreadSafeMessageBox	server/ui_interface.h	/^    boost::signals2::signal<void (const std::string& message, const std::string& caption, int style)> ThreadSafeMessageBox;$/;"	m	class:CClientUIInterface
ThreadSocketHandler	server_iface.cpp	/^void ThreadSocketHandler(void* parg)$/;"	f
ThreadSocketHandler2	server_iface.cpp	/^void ThreadSocketHandler2(void* parg)$/;"	f
ThreadTopUpKeyPool	server/bitcoinrpc.cpp	/^void ThreadTopUpKeyPool(void* parg)$/;"	f
ToString	server/base58.h	/^    std::string ToString() const$/;"	f	class:CBase58Data
ToString	server/bignum.h	/^    std::string ToString(int nBase=10) const$/;"	f	class:CBigNum
ToString	server/main.h	/^    std::string ToString() const$/;"	f	class:CBlockIndex
ToString	server/main.h	/^    std::string ToString() const$/;"	f	class:CDiskBlockIndex
ToString	server/main.h	/^    std::string ToString() const$/;"	f	class:CDiskTxPos
ToString	server/main.h	/^    std::string ToString() const$/;"	f	class:COutPoint
ToString	server/main.h	/^    std::string ToString() const$/;"	f	class:CTransaction
ToString	server/main.h	/^    std::string ToString() const$/;"	f	class:CTxIn
ToString	server/main.h	/^    std::string ToString() const$/;"	f	class:CTxOut
ToString	server/main.h	/^    std::string ToString() const$/;"	f	class:CUnsignedAlert
ToString	server/netbase.cpp	/^std::string CNetAddr::ToString() const$/;"	f	class:CNetAddr
ToString	server/netbase.cpp	/^std::string CService::ToString() const$/;"	f	class:CService
ToString	server/protocol.cpp	/^std::string CInv::ToString() const$/;"	f	class:CInv
ToString	server/script.h	/^    std::string ToString() const$/;"	f	class:CScript
ToString	server/sync.cpp	/^    std::string ToString() const$/;"	f	struct:CLockLocation
ToString	server/uint256.h	/^    std::string ToString() const$/;"	f	class:base_uint
ToString	server/wallet.h	/^    std::string ToString() const$/;"	f	class:COutput
ToStringIP	server/netbase.cpp	/^std::string CNetAddr::ToStringIP() const$/;"	f	class:CNetAddr
ToStringIPPort	server/netbase.cpp	/^std::string CService::ToStringIPPort() const$/;"	f	class:CService
ToStringPort	server/netbase.cpp	/^std::string CService::ToStringPort() const$/;"	f	class:CService
TopUpKeyPool	server/wallet.cpp	/^bool CWallet::TopUpKeyPool()$/;"	f	class:CWallet
Translate	server/ui_interface.h	/^    boost::signals2::signal<std::string (const char* psz)> Translate;$/;"	m	class:CClientUIInterface
TryAcquire	server/sync.h	/^    bool TryAcquire() {$/;"	f	class:CSemaphoreGrant
TryEnter	server/sync.h	/^    bool TryEnter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CMutexLock
TxToJSON	server/rpcrawtransaction.cpp	/^TxToJSON(const CTransaction& tx, const uint256 hashBlock, Object& entry)$/;"	f
TxnAbort	server/db.h	/^    bool TxnAbort()$/;"	f	class:CDB
TxnBegin	server/db.h	/^    DbTxn *TxnBegin(int flags=DB_TXN_WRITE_NOSYNC)$/;"	f	class:CDBEnv
TxnBegin	server/db.h	/^    bool TxnBegin()$/;"	f	class:CDB
TxnCommit	server/db.h	/^    bool TxnCommit()$/;"	f	class:CDB
UBEGIN	server/util.h	38;"	d
UEND	server/util.h	39;"	d
USER_ACTIVE	stratum/stratum_user.h	8;"	d
USER_AUTH	stratum/stratum_user.h	9;"	d
USER_SUBSCRIBE	stratum/stratum_user.h	10;"	d
USER_SYSTEM	stratum/stratum.h	2;"	d
Unlock	server/keystore.cpp	/^bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)$/;"	f	class:CCryptoKeyStore
Unlock	server/wallet.cpp	/^bool CWallet::Unlock(const SecureString& strWalletPassphrase)$/;"	f	class:CWallet
UnregisterWallet	server/main.cpp	/^void UnregisterWallet(CWallet* pwalletIn)$/;"	f
Unserialize	server/bignum.h	/^    void Unserialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION)$/;"	f	class:CBigNum
Unserialize	server/serialize.h	/^    void Unserialize(Stream& s, int, int=0)$/;"	f	class:CFlatData
Unserialize	server/serialize.h	/^inline void Unserialize(Stream& is, T& a, long nType, int nVersion)$/;"	f
Unserialize	server/serialize.h	/^inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion)$/;"	f
Unserialize	server/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f; READDATA(s, f); a=f; }$/;"	f
Unserialize	server/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, char& a,           int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	server/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, double& a,         int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	server/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, float& a,          int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	server/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int64& a,          int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	server/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed char& a,    int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	server/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed int& a,     int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	server/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed long& a,    int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	server/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed short& a,   int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	server/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint64& a,         int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	server/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned char& a,  int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	server/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned int& a,   int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	server/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned long& a,  int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	server/serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned short& a, int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	server/serialize.h	/^void Unserialize(Stream& is, CScript& v, int nType, int nVersion)$/;"	f
Unserialize	server/serialize.h	/^void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)$/;"	f
Unserialize	server/serialize.h	/^void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion)$/;"	f
Unserialize	server/serialize.h	/^void Unserialize(Stream& is, std::basic_string<C>& str, int, int)$/;"	f
Unserialize	server/serialize.h	/^void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
Unserialize	server/serialize.h	/^void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion)$/;"	f
Unserialize	server/serialize.h	/^void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
Unserialize	server/uint256.h	/^    void Unserialize(Stream& s, int nType, int nVersion)$/;"	f	class:base_uint
Unserialize_impl	server/serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)$/;"	f
Unserialize_impl	server/serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)$/;"	f
UpdateSpent	server/wallet.h	/^    bool UpdateSpent(const std::vector<char>& vfNewSpent)$/;"	f	class:CWalletTx
UpdateTime	server/main.cpp	/^void CBlock::UpdateTime(const CBlockIndex* pindexPrev)$/;"	f	class:CBlock
UpdateTxIndex	server/db.cpp	/^bool CTxDB::UpdateTxIndex(uint256 hash, const CTxIndex& txindex)$/;"	f	class:CTxDB
UpdatedTransaction	server/main.cpp	/^void static UpdatedTransaction(const uint256& hashTx)$/;"	f	file:
UpdatedTransaction	server/wallet.cpp	/^void CWallet::UpdatedTransaction(const uint256 &hashTx)$/;"	f	class:CWallet
ValueFromAmount	server/bitcoinrpc.cpp	/^Value ValueFromAmount(int64 amount)$/;"	f
ValueString	server/script.h	/^inline std::string ValueString(const std::vector<unsigned char>& vch)$/;"	f
Verify	server/key.cpp	/^bool CKey::Verify(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:CKey
VerifyCompact	server/key.cpp	/^bool CKey::VerifyCompact(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:CKey
VerifyScript	server/script.cpp	/^bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,$/;"	f
VerifySignature	server/script.cpp	/^bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, bool fValidatePayToScriptHash, int nHashType)$/;"	f
WALLET_CRYPTO_KEY_SIZE	server/crypter.h	/^const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;$/;"	v
WALLET_CRYPTO_SALT_SIZE	server/crypter.h	/^const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;$/;"	v
WIDTH	server/uint256.h	/^    enum { WIDTH=BITS\/32 };$/;"	e	enum:base_uint::__anon10
WIN32_LEAN_AND_MEAN	server/allocators.h	18;"	d
WIN32_LEAN_AND_MEAN	server/compat.h	12;"	d
WIN32_LEAN_AND_MEAN	server/util.cpp	59;"	d	file:
WRITEDATA	server/serialize.h	109;"	d
WSAEADDRINUSE	server/compat.h	43;"	d
WSAEALREADY	server/compat.h	38;"	d
WSAEINPROGRESS	server/compat.h	42;"	d
WSAEINTR	server/compat.h	41;"	d
WSAEINVAL	server/compat.h	37;"	d
WSAEMSGSIZE	server/compat.h	40;"	d
WSAENOTSOCK	server/compat.h	44;"	d
WSAEWOULDBLOCK	server/compat.h	39;"	d
WSAGetLastError	server/compat.h	36;"	d
Wait	server/irc.cpp	/^bool Wait(int nSeconds)$/;"	f
WalletFeature	server/wallet.h	/^enum WalletFeature$/;"	g
WalletTxToJSON	server/bitcoinrpc.cpp	/^void WalletTxToJSON(const CWalletTx& wtx, Object& entry)$/;"	f
WalletUpdateSpent	server/wallet.cpp	/^void CWallet::WalletUpdateSpent(const CTransaction &tx)$/;"	f	class:CWallet
WildcardMatch	server/util.cpp	/^bool WildcardMatch(const char* psz, const char* mask)$/;"	f
WildcardMatch	server/util.cpp	/^bool WildcardMatch(const string& str, const string& mask)$/;"	f
Write	server/db.cpp	/^bool CAddrDB::Write(const CAddrMan& addr)$/;"	f	class:CAddrDB
Write	server/db.h	/^    bool Write(const K& key, const T& value, bool fOverwrite=true)$/;"	f	class:CDB
Write	server/leveldb.h	/^    template<typename K, typename V> bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error) {$/;"	f	class:CLevelDB
Write	server/leveldb.h	/^    template<typename K, typename V> void Write(const K& key, const V& value) {$/;"	f	class:CLevelDBBatch
WriteAccount	server/walletdb.cpp	/^bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)$/;"	f	class:CWalletDB
WriteAccountingEntry	server/walletdb.cpp	/^bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)$/;"	f	class:CWalletDB
WriteBatch	server/leveldb.cpp	/^bool CLevelDB::WriteBatch(CLevelDBBatch &batch, bool fSync) throw(leveldb_error) {$/;"	f	class:CLevelDB
WriteBestBlock	server/walletdb.h	/^    bool WriteBestBlock(const CBlockLocator& locator)$/;"	f	class:CWalletDB
WriteBestInvalidWork	server/db.cpp	/^bool CTxDB::WriteBestInvalidWork(CBigNum bnBestInvalidWork)$/;"	f	class:CTxDB
WriteBlockIndex	server/db.cpp	/^bool CTxDB::WriteBlockIndex(const CDiskBlockIndex& blockindex)$/;"	f	class:CTxDB
WriteCScript	server/walletdb.h	/^    bool WriteCScript(const uint160& hash, const CScript& redeemScript)$/;"	f	class:CWalletDB
WriteCompactSize	server/serialize.h	/^void WriteCompactSize(Stream& os, uint64 nSize)$/;"	f
WriteCryptedKey	server/walletdb.h	/^    bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)$/;"	f	class:CWalletDB
WriteDefaultKey	server/walletdb.h	/^    bool WriteDefaultKey(const CPubKey& vchPubKey)$/;"	f	class:CWalletDB
WriteHashBestChain	server/db.cpp	/^bool CTxDB::WriteHashBestChain(uint256 hashBestChain)$/;"	f	class:CTxDB
WriteKey	server/walletdb.h	/^    bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey)$/;"	f	class:CWalletDB
WriteMasterKey	server/walletdb.h	/^    bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)$/;"	f	class:CWalletDB
WriteMinVersion	server/walletdb.h	/^    bool WriteMinVersion(int nVersion)$/;"	f	class:CWalletDB
WriteName	server/walletdb.cpp	/^bool CWalletDB::WriteName(const string& strAddress, const string& strName)$/;"	f	class:CWalletDB
WritePool	server/walletdb.h	/^    bool WritePool(int64 nPool, const CKeyPool& keypool)$/;"	f	class:CWalletDB
WriteSetting	server/walletdb.h	/^    bool WriteSetting(const std::string& strKey, const T& value)$/;"	f	class:CWalletDB
WriteToDisk	server/main.h	/^    bool WriteToDisk(unsigned int& nFileRet, unsigned int& nBlockPosRet)$/;"	f	class:CBlock
WriteToDisk	server/wallet.cpp	/^bool CWalletTx::WriteToDisk()$/;"	f	class:CWalletTx
WriteToShareNet	block_iface.cpp	/^bool WriteToShareNet(CBlock* pBlock, int nHeight)$/;"	f
WriteTx	server/walletdb.h	/^    bool WriteTx(uint256 hash, const CWalletTx& wtx)$/;"	f	class:CWalletDB
WriteVersion	server/db.h	/^    bool WriteVersion(int nVersion)$/;"	f	class:CDB
WriteVersion	server/serialize.h	/^    void WriteVersion()          { *this << nVersion; }$/;"	f	class:CAutoFile
WriteVersion	server/serialize.h	/^    void WriteVersion()          { *this << nVersion; }$/;"	f	class:CDataStream
X	server_iface.cpp	633;"	d	file:
X	server_iface.cpp	634;"	d	file:
X	server_iface.cpp	649;"	d	file:
YES	server/ui_interface.h	/^        YES                   = 0x00000002,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
YES_DEFAULT	server/ui_interface.h	/^        YES_DEFAULT           = 0x00000000,$/;"	e	enum:CClientUIInterface::MessageBoxFlags
YES_NO	server/ui_interface.h	/^        YES_NO                = (YES|NO),$/;"	e	enum:CClientUIInterface::MessageBoxFlags
_	server/ui_interface.h	/^inline std::string _(const char* psz)$/;"	f
_BITCOINRPC_H_	server/bitcoinrpc.h	9;"	d
_BITCOIN_ADDRMAN	server/addrman.h	5;"	d
_BITCOIN_COMPAT_H	server/compat.h	8;"	d
_WIN32_IE	server/util.cpp	56;"	d	file:
_WIN32_IE	server/util.cpp	58;"	d	file:
_WIN32_WINNT	server/allocators.h	15;"	d
_WIN32_WINNT	server/allocators.h	17;"	d
_WIN32_WINNT	server/compat.h	11;"	d
_WIN32_WINNT	server/util.cpp	52;"	d	file:
_WIN32_WINNT	server/util.cpp	54;"	d	file:
__CRYPTER_H__	server/crypter.h	7;"	d
__INCLUDED_PROTOCOL_H__	server/protocol.h	13;"	d
__PROTO_H__	proto.h	26;"	d
__PROTO__CONVERSION_H__	proto/conversion.h	25;"	d
__PROTO__NETWORK_H__	proto/network.h	27;"	d
__PROTO__TYPES_H__	proto/types.h	27;"	d
__SERVER_IFACE_H__	server_iface.h	4;"	d
__SHCOIND_BLOCK_H__	shcoind_block.h	30;"	d
__SHCOIND_H__	shcoind.h	30;"	d
__SHCOIND_VERSION_H__	shcoind_version.h	8;"	d
__STRATUM__PROTOCOL_H__	stratum/stratum_protocol.h	10;"	d
__STRATUM__TASK_H__	stratum/stratum_task.h	10;"	d
__STRATUM__USER_H__	stratum/stratum_user.h	6;"	d
_d	server/bitcoinrpc.cpp	/^    SSLIOStreamDevice<Protocol> _d;$/;"	m	class:AcceptedConnectionImpl	file:
_stream	server/bitcoinrpc.cpp	/^    iostreams::stream< SSLIOStreamDevice<Protocol> > _stream;$/;"	m	class:AcceptedConnectionImpl	file:
_strlwr	server/util.h	84;"	d
_vsnprintf	server/util.h	82;"	d
abs64	server/util.h	/^inline int64 abs64(int64 n)$/;"	f
accept	server/main.cpp	/^bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,$/;"	f	class:CTxMemPool
activeTxn	server/db.h	/^    DbTxn *activeTxn;$/;"	m	class:CDB
actor	server/bitcoinrpc.h	/^    rpcfn_type actor;$/;"	m	class:CRPCCommand
addUnchecked	server/main.cpp	/^bool CTxMemPool::addUnchecked(const uint256& hash, CTransaction &tx)$/;"	f	class:CTxMemPool
addmultisigaddress	server/bitcoinrpc.cpp	/^Value addmultisigaddress(const Array& params, bool fHelp)$/;"	f
addr	server/base58.h	/^    CBitcoinAddress *addr;$/;"	m	class:CBitcoinAddressVisitor
addr	server/net.h	/^    CAddress addr;$/;"	m	class:CNode
addrLocal	server/net.h	/^    CService addrLocal;$/;"	m	class:CNode
addrName	server/net.h	/^    std::string addrName;$/;"	m	class:CNode
addrName	server/net.h	/^    std::string addrName;$/;"	m	class:CNodeStats
address	wallet_iface.cpp	/^string address;$/;"	v
addressinfo_json	wallet_iface.cpp	/^string addressinfo_json;$/;"	v
addresstransactioninfo_json	wallet_iface.cpp	/^string addresstransactioninfo_json;$/;"	v
addrman	server_iface.cpp	/^CAddrMan addrman;$/;"	v
alignup	server/util.h	/^T* alignup(T* p)$/;"	f
allocate	server/allocators.h	/^    T* allocate(std::size_t n, const void *hint = 0)$/;"	f	struct:secure_allocator
allocator_type	server/serialize.h	/^    typedef vector_type::allocator_type   allocator_type;$/;"	t	class:CDataStream
altstacktop	server/script.cpp	77;"	d	file:
atoi	server/util.h	/^inline int atoi(const std::string& str)$/;"	f
atoi64	server/util.h	/^inline int64 atoi64(const char* psz)$/;"	f
atoi64	server/util.h	/^inline int64 atoi64(const std::string& str)$/;"	f
backupwallet	server/bitcoinrpc.cpp	/^Value backupwallet(const Array& params, bool fHelp)$/;"	f
base	server/allocators.h	/^    typedef std::allocator<T> base;$/;"	t	struct:secure_allocator
base	server/allocators.h	/^    typedef std::allocator<T> base;$/;"	t	struct:zero_after_free_allocator
base_uint	server/uint256.h	/^class base_uint$/;"	c
base_uint160	server/uint256.h	/^typedef base_uint<160> base_uint160;$/;"	t
base_uint256	server/uint256.h	/^typedef base_uint<256> base_uint256;$/;"	t
basetype	server/uint256.h	/^    typedef base_uint160 basetype;$/;"	t	class:uint160
basetype	server/uint256.h	/^    typedef base_uint256 basetype;$/;"	t	class:uint256
batch	server/leveldb.h	/^    leveldb::WriteBatch batch;$/;"	m	class:CLevelDBBatch
begin	server/mruset.h	/^    iterator begin() const { return set.begin(); }$/;"	f	class:mruset
begin	server/serialize.h	/^    char* begin() { return pbegin; }$/;"	f	class:CFlatData
begin	server/serialize.h	/^    const char* begin() const { return pbegin; }$/;"	f	class:CFlatData
begin	server/serialize.h	/^    const_iterator begin() const                     { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	server/serialize.h	/^    iterator begin()                                 { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	server/uint256.h	/^    unsigned char* begin()$/;"	f	class:base_uint
bignum_error	server/bignum.h	/^    explicit bignum_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:bignum_error
bignum_error	server/bignum.h	/^class bignum_error : public std::runtime_error$/;"	c
bitdb	server/db.cpp	/^CDBEnv bitdb;$/;"	v
blockToJSON	server/bitcoinrpc.cpp	/^Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)$/;"	f
block_acc	stratum/stratum.h	/^  int block_acc;$/;"	m	struct:user_t
block_avg	stratum/stratum.h	/^  double block_avg[MAX_ROUNDS_PER_HOUR];$/;"	m	struct:user_t
block_close	shcoind_block.c	/^void block_close(void)$/;"	f
block_cnt	stratum/stratum.h	/^  size_t block_cnt;$/;"	m	struct:user_t
block_freq	stratum/stratum.h	/^  double block_freq;$/;"	m	struct:user_t
block_fs	shcoind_block.c	/^shfs_t *block_fs;$/;"	v
block_hash	stratum/stratum.h	/^  char block_hash[256];$/;"	m	struct:user_t
block_init	shcoind_block.c	/^void block_init(void)$/;"	f
block_load	shcoind_block.c	/^char *block_load(int block_height)$/;"	f
block_save	shcoind_block.c	/^int block_save(int block_height, const char *json_str)$/;"	f
block_save_json	block_iface.cpp	/^string block_save_json;$/;"	v
block_tm	stratum/stratum.h	/^  double block_tm;$/;"	m	struct:user_t
block_tot	stratum/stratum.h	/^  uint64_t block_tot;$/;"	m	struct:user_t
blockinfo_json	block_iface.cpp	/^string blockinfo_json;$/;"	v
blocktemplate_json	block_iface.cpp	/^string blocktemplate_json; $/;"	v
bnBestChainWork	server/main.cpp	/^CBigNum bnBestChainWork = 0;$/;"	v
bnBestInvalidWork	server/main.cpp	/^CBigNum bnBestInvalidWork = 0;$/;"	v
bnChainWork	server/main.h	/^    CBigNum bnChainWork;$/;"	m	class:CBlockIndex
c_AcentryToJSON	block_iface.cpp	/^Object c_AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Object entry)$/;"	f
c_GetNetworkHashRate	block_iface.cpp	/^double c_GetNetworkHashRate(void)$/;"	f
c_ListTransactions	block_iface.cpp	/^void c_ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)$/;"	f
c_LoadWallet	wallet_iface.cpp	/^int c_LoadWallet(void)$/;"	f
c_getaccountbalance	wallet_iface.cpp	/^double c_getaccountbalance(const char *accountName)$/;"	f
c_getaddressbyaccount	wallet_iface.cpp	/^const char *c_getaddressbyaccount(const char *accountName)$/;"	f
c_getaddressinfo	wallet_iface.cpp	/^const char *c_getaddressinfo(const char *addr_hash)$/;"	f
c_getaddresstransactioninfo	wallet_iface.cpp	/^const char *c_getaddresstransactioninfo(const char *tx_account)$/;"	f
c_getblockheight	block_iface.cpp	/^uint64_t c_getblockheight(void)$/;"	f
c_getblockindexinfo	block_iface.cpp	/^const char *c_getblockindexinfo(CBlockIndex *pblockindex)$/;"	f
c_getblockinfo	block_iface.cpp	/^const char *c_getblockinfo(const char *hash_addr)$/;"	f
c_getblocktemplate	block_iface.cpp	/^const char *c_getblocktemplate(void)$/;"	f
c_getblocktransactions	block_iface.cpp	/^const char *c_getblocktransactions(void)$/;"	f
c_getlastblockinfo	block_iface.cpp	/^const char *c_getlastblockinfo(int target_height)$/;"	f
c_getmininginfo	block_iface.cpp	/^const char *c_getmininginfo(void)$/;"	f
c_getminingtransactions	block_iface.cpp	/^const char *c_getminingtransactions(unsigned int workId)$/;"	f
c_getnewaddress	wallet_iface.cpp	/^string c_getnewaddress(string strAccount)$/;"	f
c_gettransactioninfo	block_iface.cpp	/^const char *c_gettransactioninfo(const char *tx_id)$/;"	f
c_processblock	block_iface.cpp	/^int c_processblock(CBlock* pblock)$/;"	f
c_setblockreward	wallet_iface.cpp	/^int c_setblockreward(const char *accountName, double dAmount)$/;"	f
c_submitblock	block_iface.cpp	/^const char *c_submitblock(unsigned int workId, unsigned int nTime, unsigned int nNonce, char *xn_hex)$/;"	f
c_wallet_account_transfer	wallet_iface.cpp	/^static int c_wallet_account_transfer(const char *sourceAccountName,$/;"	f	file:
cb1	stratum/stratum.h	/^  char cb1[256];$/;"	m	struct:task_t
cb2	stratum/stratum.h	/^  char cb2[256];$/;"	m	struct:task_t
chIV	server/crypter.h	/^    unsigned char chIV[WALLET_CRYPTO_KEY_SIZE];$/;"	m	class:CCrypter
chKey	server/crypter.h	/^    unsigned char chKey[WALLET_CRYPTO_KEY_SIZE];$/;"	m	class:CCrypter
clear	server/serialize.h	/^    void clear()                                     { vch.clear(); nReadPos = 0; }$/;"	f	class:CDataStream
clear	server/serialize.h	/^    void clear(short n = 0)      { state = n; }$/;"	f	class:CAutoFile
clear	server/serialize.h	/^    void clear(short n)          { state = n; }  \/\/ name conflict with vector clear()$/;"	f	class:CDataStream
cli_id	stratum/stratum.h	/^  int cli_id;$/;"	m	struct:user_t
cli_ver	stratum/stratum.h	/^  char cli_ver[128];$/;"	m	struct:user_t
client_list	shcoind_daemon.c	/^user_t *client_list;$/;"	v
close	server/bitcoinrpc.cpp	/^    virtual void close()$/;"	f	class:AcceptedConnectionImpl
closesocket	server/compat.h	61;"	d
condition	server/sync.h	/^    boost::condition_variable condition;$/;"	m	class:CSemaphore
connect	server/bitcoinrpc.cpp	/^    bool connect(const std::string& server, const std::string& port)$/;"	f	class:SSLIOStreamDevice
const_iterator	server/mruset.h	/^    typedef typename std::set<T>::const_iterator const_iterator;$/;"	t	class:mruset
const_iterator	server/serialize.h	/^    typedef vector_type::const_iterator   const_iterator;$/;"	t	class:CDataStream
const_pointer	server/allocators.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:secure_allocator
const_pointer	server/allocators.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:zero_after_free_allocator
const_reference	server/allocators.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:secure_allocator
const_reference	server/allocators.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:zero_after_free_allocator
const_reference	server/serialize.h	/^    typedef vector_type::const_reference  const_reference;$/;"	t	class:CDataStream
copyStats	server_iface.cpp	/^void CNode::copyStats(CNodeStats &stats)$/;"	f	class:CNode
count	server/mruset.h	/^    size_type count(const key_type& k) const { return set.count(k); }$/;"	f	class:mruset
createrawtransaction	server/rpcrawtransaction.cpp	/^Value createrawtransaction(const Array& params, bool fHelp)$/;"	f
cs	server/addrman.h	/^    mutable CCriticalSection cs;$/;"	m	class:CAddrMan
cs	server/main.h	/^    mutable CCriticalSection cs;$/;"	m	class:CTxMemPool
cs_KeyStore	server/keystore.h	/^    mutable CCriticalSection cs_KeyStore;$/;"	m	class:CKeyStore
cs_THREAD_RPCHANDLER	server/bitcoinrpc.cpp	/^static CCriticalSection cs_THREAD_RPCHANDLER;$/;"	v	file:
cs_db	server/db.h	/^    mutable CCriticalSection cs_db;$/;"	m	class:CDBEnv
cs_inventory	server/net.h	/^    CCriticalSection cs_inventory;$/;"	m	class:CNode
cs_main	server/main.cpp	/^CCriticalSection cs_main;$/;"	v
cs_mapAlerts	server/main.cpp	/^CCriticalSection cs_mapAlerts;$/;"	v
cs_mapLocalHost	server_iface.cpp	/^static CCriticalSection cs_mapLocalHost;$/;"	v	file:
cs_mapRelay	server_iface.cpp	/^CCriticalSection cs_mapRelay;$/;"	v
cs_mapRequests	server/net.h	/^    CCriticalSection cs_mapRequests;$/;"	m	class:CNode
cs_nWalletUnlockTime	server/bitcoinrpc.cpp	/^static CCriticalSection cs_nWalletUnlockTime;$/;"	v	file:
cs_setBanned	server/net.h	/^    static CCriticalSection cs_setBanned;$/;"	m	class:CNode
cs_setBanned	server_iface.cpp	/^CCriticalSection CNode::cs_setBanned;$/;"	m	class:CNode	file:
cs_setservAddNodeAddresses	server_iface.cpp	/^CCriticalSection cs_setservAddNodeAddresses;$/;"	v
cs_sigcache	server/script.cpp	/^    CCriticalSection cs_sigcache;$/;"	m	class:CSignatureCache	file:
cs_vNodes	server_iface.cpp	/^CCriticalSection cs_vNodes;$/;"	v
cs_vOneShots	server_iface.cpp	/^CCriticalSection cs_vOneShots;$/;"	v
cs_vRecv	server/net.h	/^    CCriticalSection cs_vRecv;$/;"	m	class:CNode
cs_vSend	server/net.h	/^    CCriticalSection cs_vSend;$/;"	m	class:CNode
cs_wallet	server/wallet.h	/^    mutable CCriticalSection cs_wallet;$/;"	m	class:CWallet
ctx	server/util.h	/^    SHA256_CTX ctx;$/;"	m	class:CHashWriter
curtime	stratum/stratum.h	/^  time_t curtime;$/;"	m	struct:task_t
dHashesPerSec	server/main.cpp	/^double dHashesPerSec;$/;"	v
dPriority	server/main.cpp	/^    double dPriority;$/;"	m	class:COrphan	file:
daemon_close_clients	shcoind_daemon.c	/^void daemon_close_clients(void)$/;"	f
daemon_server	shcoind_daemon.c	/^void daemon_server(void)$/;"	f
daemon_signal	shcoind.c	/^void daemon_signal(int sig_num)$/;"	f
dbenv	server/db.h	/^    DbEnv dbenv;$/;"	m	class:CDBEnv
dd_mutex	server/sync.cpp	/^static boost::mutex dd_mutex;$/;"	v	file:
deallocate	server/allocators.h	/^    void deallocate(T* p, std::size_t n)$/;"	f	struct:secure_allocator
deallocate	server/allocators.h	/^    void deallocate(T* p, std::size_t n)$/;"	f	struct:zero_after_free_allocator
decoderawtransaction	server/rpcrawtransaction.cpp	/^Value decoderawtransaction(const Array& params, bool fHelp)$/;"	f
difference_type	server/allocators.h	/^    typedef typename base::difference_type  difference_type;$/;"	t	struct:secure_allocator
difference_type	server/allocators.h	/^    typedef typename base::difference_type  difference_type;$/;"	t	struct:zero_after_free_allocator
difference_type	server/serialize.h	/^    typedef vector_type::difference_type  difference_type;$/;"	t	class:CDataStream
dumpprivkey	server/rpcdump.cpp	/^Value dumpprivkey(const Array& params, bool fHelp)$/;"	f
empty	server/mruset.h	/^    bool empty() const { return set.empty(); }$/;"	f	class:mruset
empty	server/serialize.h	/^    bool empty() const                               { return vch.size() == nReadPos; }$/;"	f	class:CDataStream
emptyobj	server/bitcoinrpc.cpp	/^const Object emptyobj;$/;"	v
encryptwallet	server/bitcoinrpc.cpp	/^Value encryptwallet(const Array& params, bool fHelp)$/;"	f
end	server/mruset.h	/^    iterator end() const { return set.end(); }$/;"	f	class:mruset
end	server/serialize.h	/^    char* end() { return pend; }$/;"	f	class:CFlatData
end	server/serialize.h	/^    const char* end() const { return pend; }$/;"	f	class:CFlatData
end	server/serialize.h	/^    const_iterator end() const                       { return vch.end(); }$/;"	f	class:CDataStream
end	server/serialize.h	/^    iterator end()                                   { return vch.end(); }$/;"	f	class:CDataStream
end	server/uint256.h	/^    unsigned char* end()$/;"	f	class:base_uint
eof	server/serialize.h	/^    bool eof() const             { return size() == 0; }$/;"	f	class:CDataStream
erase	server/serialize.h	/^    iterator erase(iterator first, iterator last)$/;"	f	class:CDataStream
erase	server/serialize.h	/^    iterator erase(iterator it)$/;"	f	class:CDataStream
error	server/util.cpp	/^bool error(const char *format, ...)$/;"	f
exceptions	server/serialize.h	/^    short exceptions()           { return exceptmask; }$/;"	f	class:CAutoFile
exceptions	server/serialize.h	/^    short exceptions()           { return exceptmask; }$/;"	f	class:CDataStream
exceptions	server/serialize.h	/^    short exceptions(short mask) { short prev = exceptmask; exceptmask = mask; setstate(0, "CAutoFile"); return prev; }$/;"	f	class:CAutoFile
exceptions	server/serialize.h	/^    short exceptions(short mask) { short prev = exceptmask; exceptmask = mask; setstate(0, "CDataStream"); return prev; }$/;"	f	class:CDataStream
exceptmask	server/serialize.h	/^    short exceptmask;$/;"	m	class:CAutoFile
exceptmask	server/serialize.h	/^    short exceptmask;$/;"	m	class:CDataStream
execute	server/bitcoinrpc.cpp	/^json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_spirit::Array &params) const$/;"	f	class:CRPCTable
exists	server/main.h	/^    bool exists(uint256 hash)$/;"	f	class:CTxMemPool
fAvailableCreditCached	server/wallet.h	/^    mutable bool fAvailableCreditCached;$/;"	m	class:CWalletTx
fChangeCached	server/wallet.h	/^    mutable bool fChangeCached;$/;"	m	class:CWalletTx
fClient	server/net.h	/^    bool fClient;$/;"	m	class:CNode
fClient	server_iface.cpp	/^bool fClient = false;$/;"	v
fCommandLine	server/util.cpp	/^bool fCommandLine = false;$/;"	v
fCompressedPubKey	server/key.h	/^    bool fCompressedPubKey;$/;"	m	class:CKey
fCreditCached	server/wallet.h	/^    mutable bool fCreditCached;$/;"	m	class:CWalletTx
fDaemon	server/util.cpp	/^bool fDaemon = false;$/;"	v
fDbEnvInit	server/db.h	/^    bool fDbEnvInit;$/;"	m	class:CDBEnv
fDebitCached	server/wallet.h	/^    mutable bool fDebitCached;$/;"	m	class:CWalletTx
fDebug	server/util.cpp	/^bool fDebug = false;$/;"	v
fDebugNet	server/util.cpp	/^bool fDebugNet = false;$/;"	v
fDetachDB	server/db.h	/^    bool fDetachDB;$/;"	m	class:CDBEnv
fDisconnect	server/net.h	/^    bool fDisconnect;$/;"	m	class:CNode
fDiscover	server_iface.cpp	/^bool fDiscover = true;$/;"	v
fFileBacked	server/wallet.h	/^    bool fFileBacked;$/;"	m	class:CWallet
fFromMe	server/wallet.h	/^    char fFromMe;$/;"	m	class:CWalletTx
fGetAddr	server/net.h	/^    bool fGetAddr;$/;"	m	class:CNode
fHaveGrant	server/sync.h	/^    bool fHaveGrant;$/;"	m	class:CSemaphoreGrant
fHaveUPnP	server/main.h	/^static const int fHaveUPnP = false;$/;"	v
fHaveUPnP	server/main.h	/^static const int fHaveUPnP = true;$/;"	v
fInTried	server/addrman.h	/^    bool fInTried;$/;"	m	class:CAddrInfo
fInbound	server/net.h	/^    bool fInbound;$/;"	m	class:CNode
fInbound	server/net.h	/^    bool fInbound;$/;"	m	class:CNodeStats
fKeySet	server/crypter.h	/^    bool fKeySet;$/;"	m	class:CCrypter
fLogTimestamps	server/util.cpp	/^bool fLogTimestamps = false;$/;"	v
fMerkleVerified	server/main.h	/^    mutable bool fMerkleVerified;$/;"	m	class:CMerkleTx
fNameLookup	server/netbase.cpp	/^bool fNameLookup = false;$/;"	v
fNeedHandshake	server/bitcoinrpc.cpp	/^    bool fNeedHandshake;$/;"	m	class:SSLIOStreamDevice	file:
fNetworkNode	server/net.h	/^    bool fNetworkNode;$/;"	m	class:CNode
fNoListen	server/util.cpp	/^bool fNoListen = false;$/;"	v
fOneShot	server/net.h	/^    bool fOneShot;$/;"	m	class:CNode
fPrintToConsole	server/util.cpp	/^bool fPrintToConsole = false;$/;"	v
fPrintToDebugger	server/util.cpp	/^bool fPrintToDebugger = false;$/;"	v
fReadOnly	server/db.h	/^    bool fReadOnly;$/;"	m	class:CDB
fReopenDebugLog	server/util.cpp	/^bool fReopenDebugLog = false;$/;"	v
fRequestShutdown	server/util.cpp	/^bool fRequestShutdown = false;$/;"	v
fServer	server/util.cpp	/^bool fServer = false;$/;"	v
fSet	server/key.h	/^    bool fSet;$/;"	m	class:CKey
fShutdown	server/util.cpp	/^bool fShutdown = false;$/;"	v
fSpent	server/rpcdump.cpp	/^    bool fSpent;$/;"	m	class:CTxDump	file:
fSuccessfullyConnected	server/net.h	/^    bool fSuccessfullyConnected;$/;"	m	class:CNode
fTestNet	server/util.cpp	/^bool fTestNet = false;$/;"	v
fTimeReceivedIsTxTime	server/wallet.h	/^    unsigned int fTimeReceivedIsTxTime;$/;"	m	class:CWalletTx
fUseCrypto	server/keystore.h	/^    bool fUseCrypto;$/;"	m	class:CCryptoKeyStore
fUseSSL	server/bitcoinrpc.cpp	/^    bool fUseSSL;$/;"	m	class:SSLIOStreamDevice	file:
fUseUPnP	server_iface.cpp	/^bool fUseUPnP = false;$/;"	v
fail	server/serialize.h	/^    bool fail() const            { return state & (std::ios::badbit | std::ios::failbit); }$/;"	f	class:CAutoFile
fail	server/serialize.h	/^    bool fail() const            { return state & (std::ios::badbit | std::ios::failbit); }$/;"	f	class:CDataStream
fclose	server/serialize.h	/^    void fclose()$/;"	f	class:CAutoFile
fcntl	server/bitcoinrpc.cpp	11;"	d	file:
fcntl	server/bitcoinrpc.cpp	23;"	d	file:
fcntl	server/bitcoinrpc.cpp	40;"	d	file:
fcntl	server/netbase.cpp	17;"	d	file:
fcntl	server_iface.cpp	43;"	d	file:
fd	stratum/stratum.h	/^  int fd;$/;"	m	struct:user_t
file	server/serialize.h	/^    FILE* file;$/;"	m	class:CAutoFile
find	server/mruset.h	/^    iterator find(const key_type& k) const { return set.find(k); }$/;"	f	class:mruset
flags	stratum/stratum.h	/^  int flags;$/;"	m	struct:user_t
fn	server/net.h	/^    void (*fn)(void*, CDataStream&);$/;"	m	class:CRequestTracker
getAlertByHash	server/main.cpp	/^CAlert CAlert::getAlertByHash(const uint256 &hash)$/;"	f	class:CAlert
get_rpc_cred	shcoind_rpc.c	/^void get_rpc_cred(char *username, char *password)$/;"	f
getaccount	server/bitcoinrpc.cpp	/^Value getaccount(const Array& params, bool fHelp)$/;"	f
getaccountaddress	server/bitcoinrpc.cpp	/^Value getaccountaddress(const Array& params, bool fHelp)$/;"	f
getaccountbalance	wallet_iface.cpp	/^double getaccountbalance(const char *accountName)$/;"	f
getaddressbyaccount	wallet_iface.cpp	/^const char *getaddressbyaccount(const char *accountName)$/;"	f
getaddressesbyaccount	server/bitcoinrpc.cpp	/^Value getaddressesbyaccount(const Array& params, bool fHelp)$/;"	f
getaddressinfo	wallet_iface.cpp	/^const char *getaddressinfo(const char *addr_hash)$/;"	f
getaddresstransactioninfo	wallet_iface.cpp	/^const char *getaddresstransactioninfo(const char *hash)$/;"	f
getbalance	server/bitcoinrpc.cpp	/^Value getbalance(const Array& params, bool fHelp)$/;"	f
getblock	server/bitcoinrpc.cpp	/^Value getblock(const Array& params, bool fHelp)$/;"	f
getblockcount	server/bitcoinrpc.cpp	/^Value getblockcount(const Array& params, bool fHelp)$/;"	f
getblockhash	server/bitcoinrpc.cpp	/^Value getblockhash(const Array& params, bool fHelp)$/;"	f
getblockheight	block_iface.cpp	/^uint64_t getblockheight(void)$/;"	f
getblockinfo	block_iface.cpp	/^const char *getblockinfo(const char *hash)$/;"	f
getblocktemplate	block_iface.cpp	/^const char *getblocktemplate(void)$/;"	f
getblocktemplate	server/bitcoinrpc.cpp	/^Value getblocktemplate(const Array& params, bool fHelp)$/;"	f
getblocktransactions	block_iface.cpp	/^const char *getblocktransactions(void)$/;"	f
getconnectioncount	server/rpcnet.cpp	/^Value getconnectioncount(const Array& params, bool fHelp)$/;"	f
getdifficulty	server/bitcoinrpc.cpp	/^Value getdifficulty(const Array& params, bool fHelp)$/;"	f
getgenerate	server/bitcoinrpc.cpp	/^Value getgenerate(const Array& params, bool fHelp)$/;"	f
gethashespersec	server/bitcoinrpc.cpp	/^Value gethashespersec(const Array& params, bool fHelp)$/;"	f
getinfo	server/bitcoinrpc.cpp	/^Value getinfo(const Array& params, bool fHelp)$/;"	f
getint	server/bignum.h	/^    int getint() const$/;"	f	class:CBigNum
getlastblockinfo	block_iface.cpp	/^const char *getlastblockinfo(int height)$/;"	f
getmininginfo	block_iface.cpp	/^const char *getmininginfo(void)$/;"	f
getmininginfo	server/bitcoinrpc.cpp	/^Value getmininginfo(const Array& params, bool fHelp)$/;"	f
getminingtransactioninfo	block_iface.cpp	/^const char *getminingtransactioninfo(unsigned int workId)$/;"	f
getnetworkhashps	server/bitcoinrpc.cpp	/^Value getnetworkhashps(const Array& params, bool fHelp)$/;"	f
getnewaddress	server/bitcoinrpc.cpp	/^Value getnewaddress(const Array& params, bool fHelp)$/;"	f
getpeerinfo	server/rpcnet.cpp	/^Value getpeerinfo(const Array& params, bool fHelp)$/;"	f
getrawmempool	server/bitcoinrpc.cpp	/^Value getrawmempool(const Array& params, bool fHelp)$/;"	f
getrawtransaction	server/rpcrawtransaction.cpp	/^Value getrawtransaction(const Array& params, bool fHelp)$/;"	f
getreceivedbyaccount	server/bitcoinrpc.cpp	/^Value getreceivedbyaccount(const Array& params, bool fHelp)$/;"	f
getreceivedbyaddress	server/bitcoinrpc.cpp	/^Value getreceivedbyaddress(const Array& params, bool fHelp)$/;"	f
gettransaction	server/bitcoinrpc.cpp	/^Value gettransaction(const Array& params, bool fHelp)$/;"	f
gettransactioninfo	block_iface.cpp	/^const char *gettransactioninfo(const char *hash)$/;"	f
getuint	server/bignum.h	/^    unsigned int getuint() const$/;"	f	class:CBigNum
getuint256	server/bignum.h	/^    uint256 getuint256()$/;"	f	class:CBigNum
getulong	server/bignum.h	/^    unsigned long getulong() const$/;"	f	class:CBigNum
getvch	server/bignum.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:CBigNum
getwork	server/bitcoinrpc.cpp	/^Value getwork(const Array& params, bool fHelp)$/;"	f
getworkex	server/bitcoinrpc.cpp	/^Value getworkex(const Array& params, bool fHelp)$/;"	f
good	server/serialize.h	/^    bool good() const            { return !eof() && (state == 0); }$/;"	f	class:CDataStream
good	server/serialize.h	/^    bool good() const            { return state == 0; }$/;"	f	class:CAutoFile
grantOutbound	server/net.h	/^    CSemaphoreGrant grantOutbound;$/;"	m	class:CNode
hSocket	server/net.h	/^    SOCKET hSocket;$/;"	m	class:CNode
handshake	server/bitcoinrpc.cpp	/^    void handshake(ssl::stream_base::handshake_type role)$/;"	f	class:SSLIOStreamDevice
hash	server/main.h	/^    uint256 hash;$/;"	m	class:COutPoint
hash	server/protocol.h	/^        uint256 hash;$/;"	m	class:CInv
hashBestChain	server/main.cpp	/^uint256 hashBestChain = 0;$/;"	v
hashBlock	server/main.h	/^    uint256 hashBlock;$/;"	m	class:CMerkleTx
hashContinue	server/net.h	/^    uint256 hashContinue;$/;"	m	class:CNode
hashLastGetBlocksEnd	server/net.h	/^    uint256 hashLastGetBlocksEnd;$/;"	m	class:CNode
hashMerkleRoot	server/main.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlock
hashMerkleRoot	server/main.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockIndex
hashNext	server/main.h	/^    uint256 hashNext;$/;"	m	class:CDiskBlockIndex
hashPrev	server/main.h	/^    uint256 hashPrev;$/;"	m	class:CDiskBlockIndex
hashPrevBlock	server/main.h	/^    uint256 hashPrevBlock;$/;"	m	class:CBlock
height	stratum/stratum.h	/^  int height;$/;"	m	struct:user_t
height	stratum/stratum.h	/^  long height;$/;"	m	struct:task_t
help	server/bitcoinrpc.cpp	/^Value help(const Array& params, bool fHelp)$/;"	f
help	server/bitcoinrpc.cpp	/^string CRPCTable::help(string strCommand) const$/;"	f	class:CRPCTable
i	server/wallet.h	/^    int i;$/;"	m	class:COutput
i64tostr	server/util.h	/^inline std::string i64tostr(int64 n)$/;"	f
id	server/bitcoinrpc.cpp	/^    Value id;$/;"	m	class:JSONRequest	file:
ignore	server/serialize.h	/^    CDataStream& ignore(int nSize)$/;"	f	class:CDataStream
importprivkey	server/rpcdump.cpp	/^Value importprivkey(const Array& params, bool fHelp)$/;"	f
in_avail	server/serialize.h	/^    int in_avail()               { return size(); }$/;"	f	class:CDataStream
input	server/util.h	/^    void input(T value)$/;"	f	class:CMedianFilter
insert	server/mruset.h	/^    std::pair<iterator, bool> insert(const key_type& x)$/;"	f	class:mruset
insert	server/serialize.h	/^    iterator insert(iterator it, const char& x=char()) { return vch.insert(it, x); }$/;"	f	class:CDataStream
insert	server/serialize.h	/^    void insert(iterator it, const char* first, const char* last)$/;"	f	class:CDataStream
insert	server/serialize.h	/^    void insert(iterator it, const_iterator first, const_iterator last)$/;"	f	class:CDataStream
insert	server/serialize.h	/^    void insert(iterator it, size_type n, const char& x) { vch.insert(it, n, x); }$/;"	f	class:CDataStream
insert	server/serialize.h	/^    void insert(iterator it, std::vector<char>::const_iterator first, std::vector<char>::const_iterator last)$/;"	f	class:CDataStream
instance_of_cinit	server/util.cpp	/^instance_of_cinit;$/;"	v	typeref:class:CInit
instance_of_cnetcleanup	server_iface.cpp	/^instance_of_cnetcleanup;$/;"	v	typeref:class:CNetCleanup
int64	proto/types.h	/^typedef long long  int64;$/;"	t
int64	server/serialize.h	/^typedef long long  int64;$/;"	t
int64	server/uint256.h	/^typedef long long  int64;$/;"	t
ip	server/irc.cpp	/^    struct in_addr ip;$/;"	m	struct:ircaddr	typeref:struct:ircaddr::in_addr	file:
ip	server/netbase.h	/^        unsigned char ip[16]; \/\/ in network byte order$/;"	m	class:CNetAddr
ircaddr	server/irc.cpp	/^struct ircaddr$/;"	s	file:
iterator	server/mruset.h	/^    typedef typename std::set<T>::iterator iterator;$/;"	t	class:mruset
iterator	server/serialize.h	/^    typedef vector_type::iterator         iterator;$/;"	t	class:CDataStream
iteroptions	server/leveldb.h	/^    leveldb::ReadOptions iteroptions;$/;"	m	class:CLevelDB
itostr	server/util.h	/^inline std::string itostr(int n)$/;"	f
join	server/util.cpp	/^string join(const vector<string>& vec, const char* delim)$/;"	f
key_error	server/key.h	/^    explicit key_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:key_error
key_error	server/key.h	/^class key_error : public std::runtime_error$/;"	c
key_type	server/mruset.h	/^    typedef T key_type;$/;"	t	class:mruset
keypoolrefill	server/bitcoinrpc.cpp	/^Value keypoolrefill(const Array& params, bool fHelp)$/;"	f
keystore	server/script.cpp	/^    const CKeyStore *keystore;$/;"	m	class:CKeyStoreIsMineVisitor	file:
leveldb_error	server/leveldb.h	/^    leveldb_error(const std::string &msg) : std::runtime_error(msg) {}$/;"	f	class:leveldb_error
leveldb_error	server/leveldb.h	/^class leveldb_error : public std::runtime_error$/;"	c
listaccounts	server/bitcoinrpc.cpp	/^Value listaccounts(const Array& params, bool fHelp)$/;"	f
listreceivedbyaccount	server/bitcoinrpc.cpp	/^Value listreceivedbyaccount(const Array& params, bool fHelp)$/;"	f
listreceivedbyaddress	server/bitcoinrpc.cpp	/^Value listreceivedbyaddress(const Array& params, bool fHelp)$/;"	f
listsinceblock	server/bitcoinrpc.cpp	/^Value listsinceblock(const Array& params, bool fHelp)$/;"	f
listtransactions	server/bitcoinrpc.cpp	/^Value listtransactions(const Array& params, bool fHelp)$/;"	f
listunspent	server/rpcrawtransaction.cpp	/^Value listunspent(const Array& params, bool fHelp)$/;"	f
load_wallet	wallet_iface.cpp	/^int load_wallet(void)$/;"	f
lock	server/sync.h	/^    boost::unique_lock<Mutex> lock;$/;"	m	class:CMutexLock
locking_callback	server/util.cpp	/^void locking_callback(int mode, int i, const char* file, int line)$/;"	f
lockorders	server/sync.cpp	/^static std::map<std::pair<void*, void*>, LockStack> lockorders;$/;"	v	file:
lockstack	server/sync.cpp	/^static boost::thread_specific_ptr<LockStack> lockstack;$/;"	v	file:
lookup	server/main.h	/^    CTransaction& lookup(uint256 hash)$/;"	f	class:CTxMemPool
loop	server/util.h	35;"	d
main	server/bitcoinrpc.cpp	/^int main(int argc, char *argv[])$/;"	f
main	server/irc.cpp	/^int main(int argc, char *argv[])$/;"	f
main	server/serialize.h	/^int main(int argc, char *argv[])$/;"	f
main	shcoind.c	/^int main(int argc, char *argv[])$/;"	f
main	shcoind_tool.cpp	/^int main(int argc, char *argv[])$/;"	f
mapAddr	server/addrman.h	/^    std::map<CNetAddr, int> mapAddr;$/;"	m	class:CAddrMan
mapAddressBook	server/wallet.h	/^    std::map<CTxDestination, std::string> mapAddressBook;$/;"	m	class:CWallet
mapAlerts	server/main.cpp	/^map<uint256, CAlert> mapAlerts;$/;"	v
mapAlreadyAskedFor	server_iface.cpp	/^map<CInv, int64> mapAlreadyAskedFor;$/;"	v
mapAskFor	server/net.h	/^    std::multimap<int64, CInv> mapAskFor;$/;"	m	class:CNode
mapBlockIndex	server/main.cpp	/^map<uint256, CBlockIndex*> mapBlockIndex;$/;"	v
mapCheckpoints	server/checkpoints.cpp	/^    static MapCheckpoints mapCheckpoints =$/;"	m	namespace:Checkpoints	file:
mapCommands	server/bitcoinrpc.h	/^    std::map<std::string, const CRPCCommand*> mapCommands;$/;"	m	class:CRPCTable
mapCryptedKeys	server/keystore.h	/^    CryptedKeyMap mapCryptedKeys;$/;"	m	class:CCryptoKeyStore
mapDb	server/db.h	/^    std::map<std::string, Db*> mapDb;$/;"	m	class:CDBEnv
mapFileUseCount	server/db.h	/^    std::map<std::string, int> mapFileUseCount;$/;"	m	class:CDBEnv
mapInfo	server/addrman.h	/^    std::map<int, CAddrInfo> mapInfo;$/;"	m	class:CAddrMan
mapKeys	server/keystore.h	/^    KeyMap mapKeys;$/;"	m	class:CBasicKeyStore
mapLocalHost	server_iface.cpp	/^static map<CNetAddr, LocalServiceInfo> mapLocalHost;$/;"	v	file:
mapMasterKeys	server/wallet.h	/^    MasterKeyMap mapMasterKeys;$/;"	m	class:CWallet
mapMultiArgs	server/util.cpp	/^map<string, vector<string> > mapMultiArgs;$/;"	v
mapNextTx	server/main.h	/^    std::map<COutPoint, CInPoint> mapNextTx;$/;"	m	class:CTxMemPool
mapOrphanBlocks	server/main.cpp	/^map<uint256, CBlock*> mapOrphanBlocks;$/;"	v
mapOrphanBlocksByPrev	server/main.cpp	/^multimap<uint256, CBlock*> mapOrphanBlocksByPrev;$/;"	v
mapOrphanTransactions	server/main.cpp	/^map<uint256, CDataStream*> mapOrphanTransactions;$/;"	v
mapOrphanTransactionsByPrev	server/main.cpp	/^map<uint256, map<uint256, CDataStream*> > mapOrphanTransactionsByPrev;$/;"	v
mapRelay	server_iface.cpp	/^map<CInv, CDataStream> mapRelay;$/;"	v
mapRequestCount	server/wallet.h	/^    std::map<uint256, int> mapRequestCount;$/;"	m	class:CWallet
mapRequests	server/net.h	/^    std::map<uint256, CRequestTracker> mapRequests;$/;"	m	class:CNode
mapScripts	server/keystore.h	/^    ScriptMap mapScripts;$/;"	m	class:CBasicKeyStore
mapTx	server/main.h	/^    std::map<uint256, CTransaction> mapTx;$/;"	m	class:CTxMemPool
mapValue	server/wallet.h	/^    std::map<std::string, std::string> mapValue;$/;"	m	class:CWalletTx
mapWallet	server/wallet.h	/^    std::map<uint256, CWalletTx> mapWallet;$/;"	m	class:CWallet
max_size	server/mruset.h	/^    size_type max_size() const { return nMaxSize; }$/;"	f	class:mruset
max_size	server/mruset.h	/^    size_type max_size(size_type s)$/;"	f	class:mruset
median	server/util.h	/^    T median() const$/;"	f	class:CMedianFilter
mempool	server/main.cpp	/^CTxMemPool mempool;$/;"	v
merkle	stratum/stratum.h	/^  char **merkle;$/;"	m	struct:task_t
merkle_len	stratum/stratum.h	/^  size_t merkle_len;$/;"	m	struct:task_t
mininginfo_json	block_iface.cpp	/^string mininginfo_json; $/;"	v
miningtransactioninfo_json	block_iface.cpp	/^string miningtransactioninfo_json;$/;"	v
mlock	server/allocators.h	27;"	d
mlock	server/allocators.h	37;"	d
movecmd	server/bitcoinrpc.cpp	/^Value movecmd(const Array& params, bool fHelp)$/;"	f
mruset	server/mruset.h	/^    mruset(size_type nMaxSizeIn = 0) { nMaxSize = nMaxSizeIn; }$/;"	f	class:mruset
mruset	server/mruset.h	/^template <typename T> class mruset$/;"	c
munlock	server/allocators.h	28;"	d
munlock	server/allocators.h	40;"	d
mutex	server/sync.h	/^    boost::mutex mutex;$/;"	m	class:CSemaphore
mutexName	server/sync.cpp	/^    std::string mutexName;$/;"	m	struct:CLockLocation	file:
myclosesocket	server/compat.h	/^inline int myclosesocket(SOCKET& hSocket)$/;"	f
n	server/main.h	/^    unsigned int n;$/;"	m	class:CInPoint
n	server/main.h	/^    unsigned int n;$/;"	m	class:COutPoint
nAccountingEntryNumber	server/walletdb.cpp	/^static uint64 nAccountingEntryNumber = 0;$/;"	v	file:
nAmount	server/bitcoinrpc.cpp	/^    int64 nAmount;$/;"	m	struct:tallyitem	file:
nAttempts	server/addrman.h	/^    int nAttempts;$/;"	m	class:CAddrInfo
nAvailableCreditCached	server/wallet.h	/^    mutable int64 nAvailableCreditCached;$/;"	m	class:CWalletTx
nBestHeight	server/main.cpp	/^int nBestHeight = -1;$/;"	v
nBits	server/main.h	/^    unsigned int nBits;$/;"	m	class:CBlock
nBits	server/main.h	/^    unsigned int nBits;$/;"	m	class:CBlockIndex
nBlockPos	server/main.h	/^    unsigned int nBlockPos;$/;"	m	class:CBlockIndex
nBlockPos	server/main.h	/^    unsigned int nBlockPos;$/;"	m	class:CDiskTxPos
nCancel	server/main.h	/^    int nCancel;$/;"	m	class:CUnsignedAlert
nChangeCached	server/wallet.h	/^    mutable int64 nChangeCached;$/;"	m	class:CWalletTx
nChecksum	server/protocol.h	/^        unsigned int nChecksum;$/;"	m	class:CMessageHeader
nConf	server/bitcoinrpc.cpp	/^    int nConf;$/;"	m	struct:tallyitem	file:
nConnectTimeout	server/netbase.cpp	/^int nConnectTimeout = 5000;$/;"	v
nCreditCached	server/wallet.h	/^    mutable int64 nCreditCached;$/;"	m	class:CWalletTx
nCreditDebit	server/wallet.h	/^    int64 nCreditDebit;$/;"	m	class:CAccountingEntry
nCurrentBlockFile	server/main.cpp	/^static unsigned int nCurrentBlockFile = 1;$/;"	v	file:
nDebitCached	server/wallet.h	/^    mutable int64 nDebitCached;$/;"	m	class:CWalletTx
nDepth	server/wallet.h	/^    int nDepth;$/;"	m	class:COutput
nDerivationMethod	server/crypter.h	/^    unsigned int nDerivationMethod;$/;"	m	class:CMasterKey
nDeriveIterations	server/crypter.h	/^    unsigned int nDeriveIterations;$/;"	m	class:CMasterKey
nDoS	server/main.h	/^    mutable int nDoS;$/;"	m	class:CBlock
nDoS	server/main.h	/^    mutable int nDoS;$/;"	m	class:CTransaction
nExpiration	server/main.h	/^    int64 nExpiration;$/;"	m	class:CUnsignedAlert
nFile	server/main.h	/^    unsigned int nFile;$/;"	m	class:CBlockIndex
nFile	server/main.h	/^    unsigned int nFile;$/;"	m	class:CDiskTxPos
nGotIRCAddresses	server/irc.cpp	/^int nGotIRCAddresses = 0;$/;"	v
nHPSTimerStart	server/main.cpp	/^int64 nHPSTimerStart;$/;"	v
nHeaderStart	server/net.h	/^    int nHeaderStart;$/;"	m	class:CNode
nHeight	server/main.h	/^    int nHeight;$/;"	m	class:CBlockIndex
nID	server/main.h	/^    int nID;$/;"	m	class:CUnsignedAlert
nIdCount	server/addrman.h	/^    int nIdCount;$/;"	m	class:CAddrMan
nIndex	server/main.h	/^    int nIndex;$/;"	m	class:CMerkleTx
nIndex	server/wallet.h	/^    int64 nIndex;$/;"	m	class:CReserveKey
nKey	server/addrman.h	/^    std::vector<unsigned char> nKey;$/;"	m	class:CAddrMan
nLastBlockSize	server/main.cpp	/^uint64 nLastBlockSize = 0;$/;"	v
nLastBlockTx	server/main.cpp	/^uint64 nLastBlockTx = 0;$/;"	v
nLastRecv	server/net.h	/^    int64 nLastRecv;$/;"	m	class:CNode
nLastRecv	server/net.h	/^    int64 nLastRecv;$/;"	m	class:CNodeStats
nLastSend	server/net.h	/^    int64 nLastSend;$/;"	m	class:CNode
nLastSend	server/net.h	/^    int64 nLastSend;$/;"	m	class:CNodeStats
nLastSendEmpty	server/net.h	/^    int64 nLastSendEmpty;$/;"	m	class:CNode
nLastSuccess	server/addrman.h	/^    int64 nLastSuccess;$/;"	m	class:CAddrInfo
nLastTry	server/protocol.h	/^        int64 nLastTry;$/;"	m	class:CAddress
nLocalHostNonce	server_iface.cpp	/^uint64 nLocalHostNonce = 0;$/;"	v
nLocalServices	server_iface.cpp	/^uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);$/;"	v
nLockTime	server/main.h	/^    unsigned int nLockTime;$/;"	m	class:CTransaction
nMasterKeyMaxID	server/wallet.h	/^    unsigned int nMasterKeyMaxID;$/;"	m	class:CWallet
nMaxNumSize	server/script.cpp	/^static const size_t nMaxNumSize = 4;$/;"	v	file:
nMaxSize	server/mruset.h	/^    size_type nMaxSize;$/;"	m	class:mruset
nMaxVer	server/main.h	/^    int nMaxVer;            \/\/ highest version inclusive$/;"	m	class:CUnsignedAlert
nMedianTimeSpan	server/main.h	/^    enum { nMedianTimeSpan=11 };$/;"	e	enum:CBlockIndex::__anon3
nMessageSize	server/protocol.h	/^        unsigned int nMessageSize;$/;"	m	class:CMessageHeader
nMessageStart	server/net.h	/^    unsigned int nMessageStart;$/;"	m	class:CNode
nMinDiskSpace	server/main.h	/^static const uint64 nMinDiskSpace = 52428800;$/;"	v
nMinVer	server/main.h	/^    int nMinVer;            \/\/ lowest version inclusive$/;"	m	class:CUnsignedAlert
nMinimumInputValue	server/main.cpp	/^int64 nMinimumInputValue = CENT \/ 100;$/;"	v
nMisbehavior	server/net.h	/^    int nMisbehavior;$/;"	m	class:CNode
nMisbehavior	server/net.h	/^    int nMisbehavior;$/;"	m	class:CNodeStats
nMockTime	server/util.cpp	/^static int64 nMockTime = 0;  \/\/ For unit testing$/;"	v	file:
nNew	server/addrman.h	/^    int nNew;$/;"	m	class:CAddrMan
nNonce	server/main.h	/^    unsigned int nNonce;$/;"	m	class:CBlock
nNonce	server/main.h	/^    unsigned int nNonce;$/;"	m	class:CBlockIndex
nOut	server/rpcdump.cpp	/^    int nOut;$/;"	m	class:CTxDump	file:
nPort	server_iface.cpp	/^    int nPort;$/;"	m	struct:LocalServiceInfo	file:
nPriority	server/main.h	/^    int nPriority;$/;"	m	class:CUnsignedAlert
nRandomPos	server/addrman.h	/^    int nRandomPos;$/;"	m	class:CAddrInfo
nReadPos	server/serialize.h	/^    unsigned int nReadPos;$/;"	m	class:CDataStream
nRefCount	server/addrman.h	/^    int nRefCount;$/;"	m	class:CAddrInfo
nRefCount	server/net.h	/^    int nRefCount;$/;"	m	class:CNode
nRelayUntil	server/main.h	/^    int64 nRelayUntil;      \/\/ when newer nodes stop relaying to newer nodes$/;"	m	class:CUnsignedAlert
nReleaseTime	server/net.h	/^    int64 nReleaseTime;$/;"	m	class:CNode
nReleaseTime	server/net.h	/^    int64 nReleaseTime;$/;"	m	class:CNodeStats
nScore	server_iface.cpp	/^    int nScore;$/;"	m	struct:LocalServiceInfo	file:
nSequence	server/main.h	/^    unsigned int nSequence;$/;"	m	class:CTxIn
nServices	server/net.h	/^    uint64 nServices;$/;"	m	class:CNode
nServices	server/net.h	/^    uint64 nServices;$/;"	m	class:CNodeStats
nServices	server/protocol.h	/^        uint64 nServices;$/;"	m	class:CAddress
nSize	server/util.h	/^    unsigned int nSize;$/;"	m	class:CMedianFilter
nStartingHeight	server/net.h	/^    int nStartingHeight;$/;"	m	class:CNode
nStartingHeight	server/net.h	/^    int nStartingHeight;$/;"	m	class:CNodeStats
nTargetSpacing	server/main.cpp	/^static int64 nTargetSpacing = 60; \/\/ USDE: 60 seconds$/;"	v	file:
nTargetTimespan	server/main.cpp	/^static int64 nTargetTimespan = 2 * 60 * 60; \/\/ USDE: 2 hours$/;"	v	file:
nTime	server/main.h	/^    unsigned int nTime;$/;"	m	class:CBlock
nTime	server/main.h	/^    unsigned int nTime;$/;"	m	class:CBlockIndex
nTime	server/protocol.h	/^        unsigned int nTime;$/;"	m	class:CAddress
nTime	server/wallet.h	/^    int64 nTime;$/;"	m	class:CAccountingEntry
nTime	server/wallet.h	/^    int64 nTime;$/;"	m	class:CKeyPool
nTimeBestReceived	server/main.cpp	/^int64 nTimeBestReceived = 0;$/;"	v
nTimeConnected	server/net.h	/^    int64 nTimeConnected;$/;"	m	class:CNode
nTimeConnected	server/net.h	/^    int64 nTimeConnected;$/;"	m	class:CNodeStats
nTimeCreated	server/wallet.h	/^    int64 nTimeCreated;$/;"	m	class:CWalletKey
nTimeExpires	server/wallet.h	/^    int64 nTimeExpires;$/;"	m	class:CWalletKey
nTimeOffset	server/util.cpp	/^static int64 nTimeOffset = 0;$/;"	v	file:
nTimeReceived	server/wallet.h	/^    unsigned int nTimeReceived;  \/\/ time received by this node$/;"	m	class:CWalletTx
nTransactionFee	server/main.cpp	/^int64 nTransactionFee = 0;$/;"	v
nTransactionsUpdated	server/main.cpp	/^unsigned int nTransactionsUpdated = 0;$/;"	v
nTried	server/addrman.h	/^    int nTried;$/;"	m	class:CAddrMan
nTxPos	server/main.h	/^    unsigned int nTxPos;$/;"	m	class:CDiskTxPos
nType	server/serialize.h	/^    int nType;$/;"	m	class:CAutoFile
nType	server/serialize.h	/^    int nType;$/;"	m	class:CDataStream
nType	server/serialize.h	/^    int nType;$/;"	m	struct:ser_streamplaceholder
nType	server/util.h	/^    int nType;$/;"	m	class:CHashWriter
nValue	server/main.h	/^    int64 nValue;$/;"	m	class:CTxOut
nValue	server/rpcdump.cpp	/^    int64 nValue;$/;"	m	class:CTxDump	file:
nVersion	server/base58.h	/^    unsigned char nVersion;$/;"	m	class:CBase58Data
nVersion	server/main.h	/^        nVersion = this->nVersion;$/;"	m	class:CBlock
nVersion	server/main.h	/^        nVersion = this->nVersion;$/;"	m	class:CTransaction
nVersion	server/main.h	/^        nVersion = this->nVersion;$/;"	m	class:CUnsignedAlert
nVersion	server/main.h	/^    int nVersion;$/;"	m	class:CBlock
nVersion	server/main.h	/^    int nVersion;$/;"	m	class:CBlockIndex
nVersion	server/main.h	/^    int nVersion;$/;"	m	class:CTransaction
nVersion	server/main.h	/^    int nVersion;$/;"	m	class:CUnsignedAlert
nVersion	server/net.h	/^    int nVersion;$/;"	m	class:CNode
nVersion	server/net.h	/^    int nVersion;$/;"	m	class:CNodeStats
nVersion	server/serialize.h	/^    int nVersion;$/;"	m	class:CAutoFile
nVersion	server/serialize.h	/^    int nVersion;$/;"	m	class:CDataStream
nVersion	server/serialize.h	/^    int nVersion;$/;"	m	struct:ser_streamplaceholder
nVersion	server/util.h	/^    int nVersion;$/;"	m	class:CHashWriter
nWalletDBUpdated	server/db.cpp	/^unsigned int nWalletDBUpdated;$/;"	v
nWalletMaxVersion	server/wallet.h	/^    int nWalletMaxVersion;$/;"	m	class:CWallet
nWalletUnlockTime	server/bitcoinrpc.cpp	/^static int64 nWalletUnlockTime;$/;"	v	file:
nWalletVersion	server/wallet.h	/^    int nWalletVersion;$/;"	m	class:CWallet
name	server/bitcoinrpc.h	/^    std::string name;$/;"	m	class:CRPCCommand
nameproxyInfo	server/netbase.cpp	/^static proxyType nameproxyInfo;$/;"	v	file:
nbits	stratum/stratum.h	/^  char nbits[32];$/;"	m	struct:task_t
next	stratum/stratum.h	/^  struct task_t *next;$/;"	m	struct:task_t	typeref:struct:task_t::task_t
next	stratum/stratum.h	/^  struct user_t *next;$/;"	m	struct:user_t	typeref:struct:user_t::user_t
noui_ThreadSafeAskFee	server/noui.cpp	/^static bool noui_ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)$/;"	f	file:
noui_ThreadSafeMessageBox	server/noui.cpp	/^static int noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)$/;"	f	file:
noui_connect	server/noui.cpp	/^void noui_connect()$/;"	f
okSafeMode	server/bitcoinrpc.h	/^    bool okSafeMode;$/;"	m	class:CRPCCommand
opcodetype	server/script.h	/^enum opcodetype$/;"	g
operator !	server/bignum.h	/^    bool operator!() const$/;"	f	class:CBigNum
operator !	server/bignum.h	/^    bool operator!() { return (pctx == NULL); }$/;"	f	class:CAutoBN_CTX
operator !	server/serialize.h	/^    bool operator!()            { return (file == NULL); }$/;"	f	class:CAutoFile
operator !	server/uint256.h	/^    bool operator!() const$/;"	f	class:base_uint
operator !=	server/bignum.h	/^inline bool operator!=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) != 0); }$/;"	f
operator !=	server/key.h	/^    friend bool operator!=(const CPubKey &a, const CPubKey &b) { return a.vchPubKey != b.vchPubKey; }$/;"	f	class:CPubKey
operator !=	server/main.h	/^    friend bool operator!=(const CDiskTxPos& a, const CDiskTxPos& b)$/;"	f	class:CDiskTxPos
operator !=	server/main.h	/^    friend bool operator!=(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator !=	server/main.h	/^    friend bool operator!=(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator !=	server/main.h	/^    friend bool operator!=(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator !=	server/main.h	/^    friend bool operator!=(const CTxIndex& a, const CTxIndex& b)$/;"	f	class:CTxIndex
operator !=	server/main.h	/^    friend bool operator!=(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator !=	server/netbase.cpp	/^bool operator!=(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator !=	server/netbase.cpp	/^bool operator!=(const CService& a, const CService& b)$/;"	f
operator !=	server/uint256.h	/^    friend inline bool operator!=(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator !=	server/uint256.h	/^    friend inline bool operator!=(const base_uint& a, uint64 b)$/;"	f	class:base_uint
operator !=	server/uint256.h	/^inline bool operator!=(const base_uint160& a, const uint160& b)         { return (base_uint160)a != (base_uint160)b; }$/;"	f
operator !=	server/uint256.h	/^inline bool operator!=(const base_uint256& a, const uint256& b)         { return (base_uint256)a != (base_uint256)b; }$/;"	f
operator !=	server/uint256.h	/^inline bool operator!=(const uint160& a, const base_uint160& b)         { return (base_uint160)a != (base_uint160)b; }$/;"	f
operator !=	server/uint256.h	/^inline bool operator!=(const uint160& a, const uint160& b)              { return (base_uint160)a != (base_uint160)b; }$/;"	f
operator !=	server/uint256.h	/^inline bool operator!=(const uint160& a, uint64 b)                           { return (base_uint160)a != b; }$/;"	f
operator !=	server/uint256.h	/^inline bool operator!=(const uint256& a, const base_uint256& b)         { return (base_uint256)a != (base_uint256)b; }$/;"	f
operator !=	server/uint256.h	/^inline bool operator!=(const uint256& a, const uint256& b)              { return (base_uint256)a != (base_uint256)b; }$/;"	f
operator !=	server/uint256.h	/^inline bool operator!=(const uint256& a, uint64 b)                           { return (base_uint256)a != b; }$/;"	f
operator %	server/bignum.h	/^inline const CBigNum operator%(const CBigNum& a, const CBigNum& b)$/;"	f
operator %=	server/bignum.h	/^    CBigNum& operator%=(const CBigNum& b)$/;"	f	class:CBigNum
operator &	server/bignum.h	/^    BN_CTX** operator&() { return &pctx; }$/;"	f	class:CAutoBN_CTX
operator &	server/serialize.h	/^    FILE** operator&()          { return &file; }$/;"	f	class:CAutoFile
operator &	server/uint256.h	/^inline const uint160 operator&(const base_uint160& a, const base_uint160& b) { return uint160(a) &= b; }$/;"	f
operator &	server/uint256.h	/^inline const uint160 operator&(const base_uint160& a, const uint160& b) { return (base_uint160)a &  (base_uint160)b; }$/;"	f
operator &	server/uint256.h	/^inline const uint160 operator&(const uint160& a, const base_uint160& b) { return (base_uint160)a &  (base_uint160)b; }$/;"	f
operator &	server/uint256.h	/^inline const uint160 operator&(const uint160& a, const uint160& b)      { return (base_uint160)a &  (base_uint160)b; }$/;"	f
operator &	server/uint256.h	/^inline const uint256 operator&(const base_uint256& a, const base_uint256& b) { return uint256(a) &= b; }$/;"	f
operator &	server/uint256.h	/^inline const uint256 operator&(const base_uint256& a, const uint256& b) { return (base_uint256)a &  (base_uint256)b; }$/;"	f
operator &	server/uint256.h	/^inline const uint256 operator&(const uint256& a, const base_uint256& b) { return (base_uint256)a &  (base_uint256)b; }$/;"	f
operator &	server/uint256.h	/^inline const uint256 operator&(const uint256& a, const uint256& b)      { return (base_uint256)a &  (base_uint256)b; }$/;"	f
operator &=	server/uint256.h	/^    base_uint& operator&=(const base_uint& b)$/;"	f	class:base_uint
operator ()	server/base58.h	/^bool inline CBitcoinAddressVisitor::operator()(const CKeyID &id) const         { return addr->Set(id); }$/;"	f	class:CBitcoinAddressVisitor
operator ()	server/base58.h	/^bool inline CBitcoinAddressVisitor::operator()(const CNoDestination &id) const { return false; }$/;"	f	class:CBitcoinAddressVisitor
operator ()	server/base58.h	/^bool inline CBitcoinAddressVisitor::operator()(const CScriptID &id) const      { return addr->Set(id); }$/;"	f	class:CBitcoinAddressVisitor
operator ()	server/bitcoinrpc.cpp	/^    Object operator()(const CKeyID &keyID) const {$/;"	f	class:DescribeAddressVisitor
operator ()	server/bitcoinrpc.cpp	/^    Object operator()(const CNoDestination &dest) const { return Object(); }$/;"	f	class:DescribeAddressVisitor
operator ()	server/bitcoinrpc.cpp	/^    Object operator()(const CScriptID &scriptID) const {$/;"	f	class:DescribeAddressVisitor
operator ()	server/script.cpp	/^    bool operator()(const CKeyID &keyID) const { return keystore->HaveKey(keyID); }$/;"	f	class:CKeyStoreIsMineVisitor
operator ()	server/script.cpp	/^    bool operator()(const CKeyID &keyID) const {$/;"	f	class:CScriptVisitor
operator ()	server/script.cpp	/^    bool operator()(const CNoDestination &dest) const { return false; }$/;"	f	class:CKeyStoreIsMineVisitor
operator ()	server/script.cpp	/^    bool operator()(const CNoDestination &dest) const {$/;"	f	class:CScriptVisitor
operator ()	server/script.cpp	/^    bool operator()(const CScriptID &scriptID) const { return keystore->HaveCScript(scriptID); }$/;"	f	class:CKeyStoreIsMineVisitor
operator ()	server/script.cpp	/^    bool operator()(const CScriptID &scriptID) const {$/;"	f	class:CScriptVisitor
operator ()	server/wallet.cpp	/^    bool operator()(const pair<int64, pair<const CWalletTx*, unsigned int> >& t1,$/;"	f	struct:CompareValueOnly
operator ()	wallet_iface.cpp	/^    Object operator()(const CKeyID &keyID) const {$/;"	f	class:DescribeAddressVisitor
operator ()	wallet_iface.cpp	/^    Object operator()(const CNoDestination &dest) const { return Object(); }$/;"	f	class:DescribeAddressVisitor
operator ()	wallet_iface.cpp	/^    Object operator()(const CScriptID &scriptID) const {$/;"	f	class:DescribeAddressVisitor
operator *	server/bignum.h	/^    BN_CTX& operator*() { return *pctx; }$/;"	f	class:CAutoBN_CTX
operator *	server/bignum.h	/^inline const CBigNum operator*(const CBigNum& a, const CBigNum& b)$/;"	f
operator *	server/serialize.h	/^    FILE& operator*()           { return *file; }$/;"	f	class:CAutoFile
operator *=	server/bignum.h	/^    CBigNum& operator*=(const CBigNum& b)$/;"	f	class:CBigNum
operator +	server/bignum.h	/^inline const CBigNum operator+(const CBigNum& a, const CBigNum& b)$/;"	f
operator +	server/script.h	/^    friend CScript operator+(const CScript& a, const CScript& b)$/;"	f	class:CScript
operator +	server/serialize.h	/^    friend CDataStream operator+(const CDataStream& a, const CDataStream& b)$/;"	f	class:CDataStream
operator +	server/uint256.h	/^inline const uint160 operator+(const base_uint160& a, const base_uint160& b) { return uint160(a) += b; }$/;"	f
operator +	server/uint256.h	/^inline const uint160 operator+(const base_uint160& a, const uint160& b) { return (base_uint160)a +  (base_uint160)b; }$/;"	f
operator +	server/uint256.h	/^inline const uint160 operator+(const uint160& a, const base_uint160& b) { return (base_uint160)a +  (base_uint160)b; }$/;"	f
operator +	server/uint256.h	/^inline const uint160 operator+(const uint160& a, const uint160& b)      { return (base_uint160)a +  (base_uint160)b; }$/;"	f
operator +	server/uint256.h	/^inline const uint256 operator+(const base_uint256& a, const base_uint256& b) { return uint256(a) += b; }$/;"	f
operator +	server/uint256.h	/^inline const uint256 operator+(const base_uint256& a, const uint256& b) { return (base_uint256)a +  (base_uint256)b; }$/;"	f
operator +	server/uint256.h	/^inline const uint256 operator+(const uint256& a, const base_uint256& b) { return (base_uint256)a +  (base_uint256)b; }$/;"	f
operator +	server/uint256.h	/^inline const uint256 operator+(const uint256& a, const uint256& b)      { return (base_uint256)a +  (base_uint256)b; }$/;"	f
operator ++	server/bignum.h	/^    CBigNum& operator++()$/;"	f	class:CBigNum
operator ++	server/bignum.h	/^    const CBigNum operator++(int)$/;"	f	class:CBigNum
operator ++	server/uint256.h	/^    base_uint& operator++()$/;"	f	class:base_uint
operator ++	server/uint256.h	/^    const base_uint operator++(int)$/;"	f	class:base_uint
operator +=	server/bignum.h	/^    CBigNum& operator+=(const CBigNum& b)$/;"	f	class:CBigNum
operator +=	server/script.h	/^    CScript& operator+=(const CScript& b)$/;"	f	class:CScript
operator +=	server/serialize.h	/^    CDataStream& operator+=(const CDataStream& b)$/;"	f	class:CDataStream
operator +=	server/uint256.h	/^    base_uint& operator+=(const base_uint& b)$/;"	f	class:base_uint
operator +=	server/uint256.h	/^    base_uint& operator+=(uint64 b64)$/;"	f	class:base_uint
operator -	server/bignum.h	/^inline const CBigNum operator-(const CBigNum& a)$/;"	f
operator -	server/bignum.h	/^inline const CBigNum operator-(const CBigNum& a, const CBigNum& b)$/;"	f
operator -	server/uint256.h	/^    const base_uint operator-() const$/;"	f	class:base_uint
operator -	server/uint256.h	/^inline const uint160 operator-(const base_uint160& a, const base_uint160& b) { return uint160(a) -= b; }$/;"	f
operator -	server/uint256.h	/^inline const uint160 operator-(const base_uint160& a, const uint160& b) { return (base_uint160)a -  (base_uint160)b; }$/;"	f
operator -	server/uint256.h	/^inline const uint160 operator-(const uint160& a, const base_uint160& b) { return (base_uint160)a -  (base_uint160)b; }$/;"	f
operator -	server/uint256.h	/^inline const uint160 operator-(const uint160& a, const uint160& b)      { return (base_uint160)a -  (base_uint160)b; }$/;"	f
operator -	server/uint256.h	/^inline const uint256 operator-(const base_uint256& a, const base_uint256& b) { return uint256(a) -= b; }$/;"	f
operator -	server/uint256.h	/^inline const uint256 operator-(const base_uint256& a, const uint256& b) { return (base_uint256)a -  (base_uint256)b; }$/;"	f
operator -	server/uint256.h	/^inline const uint256 operator-(const uint256& a, const base_uint256& b) { return (base_uint256)a -  (base_uint256)b; }$/;"	f
operator -	server/uint256.h	/^inline const uint256 operator-(const uint256& a, const uint256& b)      { return (base_uint256)a -  (base_uint256)b; }$/;"	f
operator --	server/bignum.h	/^    CBigNum& operator--()$/;"	f	class:CBigNum
operator --	server/bignum.h	/^    const CBigNum operator--(int)$/;"	f	class:CBigNum
operator --	server/uint256.h	/^    base_uint& operator--()$/;"	f	class:base_uint
operator --	server/uint256.h	/^    const base_uint operator--(int)$/;"	f	class:base_uint
operator -=	server/bignum.h	/^    CBigNum& operator-=(const CBigNum& b)$/;"	f	class:CBigNum
operator -=	server/uint256.h	/^    base_uint& operator-=(const base_uint& b)$/;"	f	class:base_uint
operator -=	server/uint256.h	/^    base_uint& operator-=(uint64 b64)$/;"	f	class:base_uint
operator ->	server/serialize.h	/^    FILE* operator->()          { return file; }$/;"	f	class:CAutoFile
operator /	server/bignum.h	/^inline const CBigNum operator\/(const CBigNum& a, const CBigNum& b)$/;"	f
operator /=	server/bignum.h	/^    CBigNum& operator\/=(const CBigNum& b)$/;"	f	class:CBigNum
operator <	server/base58.h	/^    bool operator< (const CBase58Data& b58) const { return CompareTo(b58) <  0; }$/;"	f	class:CBase58Data
operator <	server/bignum.h	/^inline bool operator<(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) < 0); }$/;"	f
operator <	server/key.h	/^    friend bool operator<(const CPubKey &a, const CPubKey &b) { return a.vchPubKey < b.vchPubKey; }$/;"	f	class:CPubKey
operator <	server/main.h	/^    friend bool operator<(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator <	server/mruset.h	/^    bool inline friend operator<(const mruset<T>& a, const mruset<T>& b) { return a.set < b.set; }$/;"	f	class:mruset
operator <	server/netbase.cpp	/^bool operator<(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator <	server/netbase.cpp	/^bool operator<(const CService& a, const CService& b)$/;"	f
operator <	server/protocol.cpp	/^bool operator<(const CInv& a, const CInv& b)$/;"	f
operator <	server/script.h	/^    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator <	server/uint256.h	/^    friend inline bool operator<(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator <	server/uint256.h	/^inline bool operator<(const base_uint160& a, const uint160& b)          { return (base_uint160)a <  (base_uint160)b; }$/;"	f
operator <	server/uint256.h	/^inline bool operator<(const base_uint256& a, const uint256& b)          { return (base_uint256)a <  (base_uint256)b; }$/;"	f
operator <	server/uint256.h	/^inline bool operator<(const uint160& a, const base_uint160& b)          { return (base_uint160)a <  (base_uint160)b; }$/;"	f
operator <	server/uint256.h	/^inline bool operator<(const uint160& a, const uint160& b)               { return (base_uint160)a <  (base_uint160)b; }$/;"	f
operator <	server/uint256.h	/^inline bool operator<(const uint256& a, const base_uint256& b)          { return (base_uint256)a <  (base_uint256)b; }$/;"	f
operator <	server/uint256.h	/^inline bool operator<(const uint256& a, const uint256& b)               { return (base_uint256)a <  (base_uint256)b; }$/;"	f
operator <<	server/bignum.h	/^inline const CBigNum operator<<(const CBigNum& a, unsigned int shift)$/;"	f
operator <<	server/script.h	/^    CScript& operator<<(const CBigNum& b)$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(const CPubKey& key)$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(const CScript& b)$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(const std::vector<unsigned char>& b)$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(const uint160& b)$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(const uint256& b)$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(int b)            { return push_int64(b); }$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(int64 b)          { return push_int64(b); }$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(long b)           { return push_int64(b); }$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(opcodetype opcode)$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(short b)          { return push_int64(b); }$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(signed char b)    { return push_int64(b); }$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(uint64 b)         { return push_uint64(b); }$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(unsigned char b)  { return push_uint64(b); }$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(unsigned int b)   { return push_uint64(b); }$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(unsigned long b)  { return push_uint64(b); }$/;"	f	class:CScript
operator <<	server/script.h	/^    CScript& operator<<(unsigned short b) { return push_uint64(b); }$/;"	f	class:CScript
operator <<	server/serialize.h	/^    CAutoFile& operator<<(const T& obj)$/;"	f	class:CAutoFile
operator <<	server/serialize.h	/^    CDataStream& operator<<(const T& obj)$/;"	f	class:CDataStream
operator <<	server/uint256.h	/^inline const uint160 operator<<(const base_uint160& a, unsigned int shift)   { return uint160(a) <<= shift; }$/;"	f
operator <<	server/uint256.h	/^inline const uint160 operator<<(const uint160& a, unsigned int shift)        { return uint160(a) <<= shift; }$/;"	f
operator <<	server/uint256.h	/^inline const uint256 operator<<(const base_uint256& a, unsigned int shift)   { return uint256(a) <<= shift; }$/;"	f
operator <<	server/uint256.h	/^inline const uint256 operator<<(const uint256& a, unsigned int shift)        { return uint256(a) <<= shift; }$/;"	f
operator <<	server/util.h	/^    CHashWriter& operator<<(const T& obj) {$/;"	f	class:CHashWriter
operator <<=	server/bignum.h	/^    CBigNum& operator<<=(unsigned int shift)$/;"	f	class:CBigNum
operator <<=	server/uint256.h	/^    base_uint& operator<<=(unsigned int shift)$/;"	f	class:base_uint
operator <=	server/base58.h	/^    bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }$/;"	f	class:CBase58Data
operator <=	server/bignum.h	/^inline bool operator<=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) <= 0); }$/;"	f
operator <=	server/uint256.h	/^    friend inline bool operator<=(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator <=	server/uint256.h	/^inline bool operator<=(const base_uint160& a, const uint160& b)         { return (base_uint160)a <= (base_uint160)b; }$/;"	f
operator <=	server/uint256.h	/^inline bool operator<=(const base_uint256& a, const uint256& b)         { return (base_uint256)a <= (base_uint256)b; }$/;"	f
operator <=	server/uint256.h	/^inline bool operator<=(const uint160& a, const base_uint160& b)         { return (base_uint160)a <= (base_uint160)b; }$/;"	f
operator <=	server/uint256.h	/^inline bool operator<=(const uint160& a, const uint160& b)              { return (base_uint160)a <= (base_uint160)b; }$/;"	f
operator <=	server/uint256.h	/^inline bool operator<=(const uint256& a, const base_uint256& b)         { return (base_uint256)a <= (base_uint256)b; }$/;"	f
operator <=	server/uint256.h	/^inline bool operator<=(const uint256& a, const uint256& b)              { return (base_uint256)a <= (base_uint256)b; }$/;"	f
operator =	server/bignum.h	/^    BN_CTX* operator=(BN_CTX* pnew) { return pctx = pnew; }$/;"	f	class:CAutoBN_CTX
operator =	server/bignum.h	/^    CBigNum& operator=(const CBigNum& b)$/;"	f	class:CBigNum
operator =	server/key.cpp	/^CKey& CKey::operator=(const CKey& b)$/;"	f	class:CKey
operator =	server/serialize.h	/^    FILE* operator=(FILE* pnew) { return file = pnew; }$/;"	f	class:CAutoFile
operator =	server/uint256.h	/^    base_uint& operator=(uint64 b)$/;"	f	class:base_uint
operator =	server/uint256.h	/^    uint160& operator=(const basetype& b)$/;"	f	class:uint160
operator =	server/uint256.h	/^    uint160& operator=(uint64 b)$/;"	f	class:uint160
operator =	server/uint256.h	/^    uint256& operator=(const basetype& b)$/;"	f	class:uint256
operator =	server/uint256.h	/^    uint256& operator=(uint64 b)$/;"	f	class:uint256
operator ==	server/base58.h	/^    bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }$/;"	f	class:CBase58Data
operator ==	server/bignum.h	/^inline bool operator==(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) == 0); }$/;"	f
operator ==	server/key.h	/^    friend bool operator==(const CPubKey &a, const CPubKey &b) { return a.vchPubKey == b.vchPubKey; }$/;"	f	class:CPubKey
operator ==	server/main.h	/^    friend bool operator==(const CDiskTxPos& a, const CDiskTxPos& b)$/;"	f	class:CDiskTxPos
operator ==	server/main.h	/^    friend bool operator==(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator ==	server/main.h	/^    friend bool operator==(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator ==	server/main.h	/^    friend bool operator==(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator ==	server/main.h	/^    friend bool operator==(const CTxIndex& a, const CTxIndex& b)$/;"	f	class:CTxIndex
operator ==	server/main.h	/^    friend bool operator==(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator ==	server/mruset.h	/^    bool inline friend operator==(const mruset<T>& a, const mruset<T>& b) { return a.set == b.set; }$/;"	f	class:mruset
operator ==	server/mruset.h	/^    bool inline friend operator==(const mruset<T>& a, const std::set<T>& b) { return a.set == b; }$/;"	f	class:mruset
operator ==	server/netbase.cpp	/^bool operator==(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator ==	server/netbase.cpp	/^bool operator==(const CService& a, const CService& b)$/;"	f
operator ==	server/script.h	/^    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator ==	server/uint256.h	/^    friend inline bool operator==(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator ==	server/uint256.h	/^    friend inline bool operator==(const base_uint& a, uint64 b)$/;"	f	class:base_uint
operator ==	server/uint256.h	/^inline bool operator==(const base_uint160& a, const uint160& b)         { return (base_uint160)a == (base_uint160)b; }$/;"	f
operator ==	server/uint256.h	/^inline bool operator==(const base_uint256& a, const uint256& b)         { return (base_uint256)a == (base_uint256)b; }$/;"	f
operator ==	server/uint256.h	/^inline bool operator==(const uint160& a, const base_uint160& b)         { return (base_uint160)a == (base_uint160)b; }$/;"	f
operator ==	server/uint256.h	/^inline bool operator==(const uint160& a, const uint160& b)              { return (base_uint160)a == (base_uint160)b; }$/;"	f
operator ==	server/uint256.h	/^inline bool operator==(const uint160& a, uint64 b)                           { return (base_uint160)a == b; }$/;"	f
operator ==	server/uint256.h	/^inline bool operator==(const uint256& a, const base_uint256& b)         { return (base_uint256)a == (base_uint256)b; }$/;"	f
operator ==	server/uint256.h	/^inline bool operator==(const uint256& a, const uint256& b)              { return (base_uint256)a == (base_uint256)b; }$/;"	f
operator ==	server/uint256.h	/^inline bool operator==(const uint256& a, uint64 b)                           { return (base_uint256)a == b; }$/;"	f
operator >	server/base58.h	/^    bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }$/;"	f	class:CBase58Data
operator >	server/bignum.h	/^inline bool operator>(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) > 0); }$/;"	f
operator >	server/uint256.h	/^    friend inline bool operator>(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator >	server/uint256.h	/^inline bool operator>(const base_uint160& a, const uint160& b)          { return (base_uint160)a >  (base_uint160)b; }$/;"	f
operator >	server/uint256.h	/^inline bool operator>(const base_uint256& a, const uint256& b)          { return (base_uint256)a >  (base_uint256)b; }$/;"	f
operator >	server/uint256.h	/^inline bool operator>(const uint160& a, const base_uint160& b)          { return (base_uint160)a >  (base_uint160)b; }$/;"	f
operator >	server/uint256.h	/^inline bool operator>(const uint160& a, const uint160& b)               { return (base_uint160)a >  (base_uint160)b; }$/;"	f
operator >	server/uint256.h	/^inline bool operator>(const uint256& a, const base_uint256& b)          { return (base_uint256)a >  (base_uint256)b; }$/;"	f
operator >	server/uint256.h	/^inline bool operator>(const uint256& a, const uint256& b)               { return (base_uint256)a >  (base_uint256)b; }$/;"	f
operator >=	server/base58.h	/^    bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }$/;"	f	class:CBase58Data
operator >=	server/bignum.h	/^inline bool operator>=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) >= 0); }$/;"	f
operator >=	server/uint256.h	/^    friend inline bool operator>=(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator >=	server/uint256.h	/^inline bool operator>=(const base_uint160& a, const uint160& b)         { return (base_uint160)a >= (base_uint160)b; }$/;"	f
operator >=	server/uint256.h	/^inline bool operator>=(const base_uint256& a, const uint256& b)         { return (base_uint256)a >= (base_uint256)b; }$/;"	f
operator >=	server/uint256.h	/^inline bool operator>=(const uint160& a, const base_uint160& b)         { return (base_uint160)a >= (base_uint160)b; }$/;"	f
operator >=	server/uint256.h	/^inline bool operator>=(const uint160& a, const uint160& b)              { return (base_uint160)a >= (base_uint160)b; }$/;"	f
operator >=	server/uint256.h	/^inline bool operator>=(const uint256& a, const base_uint256& b)         { return (base_uint256)a >= (base_uint256)b; }$/;"	f
operator >=	server/uint256.h	/^inline bool operator>=(const uint256& a, const uint256& b)              { return (base_uint256)a >= (base_uint256)b; }$/;"	f
operator >>	server/bignum.h	/^inline const CBigNum operator>>(const CBigNum& a, unsigned int shift)$/;"	f
operator >>	server/serialize.h	/^    CAutoFile& operator>>(T& obj)$/;"	f	class:CAutoFile
operator >>	server/serialize.h	/^    CDataStream& operator>>(T& obj)$/;"	f	class:CDataStream
operator >>	server/uint256.h	/^inline const uint160 operator>>(const base_uint160& a, unsigned int shift)   { return uint160(a) >>= shift; }$/;"	f
operator >>	server/uint256.h	/^inline const uint160 operator>>(const uint160& a, unsigned int shift)        { return uint160(a) >>= shift; }$/;"	f
operator >>	server/uint256.h	/^inline const uint256 operator>>(const base_uint256& a, unsigned int shift)   { return uint256(a) >>= shift; }$/;"	f
operator >>	server/uint256.h	/^inline const uint256 operator>>(const uint256& a, unsigned int shift)        { return uint256(a) >>= shift; }$/;"	f
operator >>=	server/bignum.h	/^    CBigNum& operator>>=(unsigned int shift)$/;"	f	class:CBigNum
operator >>=	server/uint256.h	/^    base_uint& operator>>=(unsigned int shift)$/;"	f	class:base_uint
operator BN_CTX*	server/bignum.h	/^    operator BN_CTX*() { return pctx; }$/;"	f	class:CAutoBN_CTX
operator FILE*	server/serialize.h	/^    operator FILE*()            { return file; }$/;"	f	class:CAutoFile
operator []	server/bitcoinrpc.cpp	/^const CRPCCommand *CRPCTable::operator[](string name) const$/;"	f	class:CRPCTable
operator []	server/serialize.h	/^    const_reference operator[](size_type pos) const  { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator []	server/serialize.h	/^    reference operator[](size_type pos)              { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator ^	server/uint256.h	/^inline const uint160 operator^(const base_uint160& a, const base_uint160& b) { return uint160(a) ^= b; }$/;"	f
operator ^	server/uint256.h	/^inline const uint160 operator^(const base_uint160& a, const uint160& b) { return (base_uint160)a ^  (base_uint160)b; }$/;"	f
operator ^	server/uint256.h	/^inline const uint160 operator^(const uint160& a, const base_uint160& b) { return (base_uint160)a ^  (base_uint160)b; }$/;"	f
operator ^	server/uint256.h	/^inline const uint160 operator^(const uint160& a, const uint160& b)      { return (base_uint160)a ^  (base_uint160)b; }$/;"	f
operator ^	server/uint256.h	/^inline const uint256 operator^(const base_uint256& a, const base_uint256& b) { return uint256(a) ^= b; }$/;"	f
operator ^	server/uint256.h	/^inline const uint256 operator^(const base_uint256& a, const uint256& b) { return (base_uint256)a ^  (base_uint256)b; }$/;"	f
operator ^	server/uint256.h	/^inline const uint256 operator^(const uint256& a, const base_uint256& b) { return (base_uint256)a ^  (base_uint256)b; }$/;"	f
operator ^	server/uint256.h	/^inline const uint256 operator^(const uint256& a, const uint256& b)      { return (base_uint256)a ^  (base_uint256)b; }$/;"	f
operator ^=	server/uint256.h	/^    base_uint& operator^=(const base_uint& b)$/;"	f	class:base_uint
operator ^=	server/uint256.h	/^    base_uint& operator^=(uint64 b)$/;"	f	class:base_uint
operator bool	server/sync.h	/^    operator bool() {$/;"	f	class:CSemaphoreGrant
operator bool	server/sync.h	/^    operator bool()$/;"	f	class:CMutexLock
operator |	server/uint256.h	/^inline const uint160 operator|(const base_uint160& a, const base_uint160& b) { return uint160(a) |= b; }$/;"	f
operator |	server/uint256.h	/^inline const uint160 operator|(const base_uint160& a, const uint160& b) { return (base_uint160)a |  (base_uint160)b; }$/;"	f
operator |	server/uint256.h	/^inline const uint160 operator|(const uint160& a, const base_uint160& b) { return (base_uint160)a |  (base_uint160)b; }$/;"	f
operator |	server/uint256.h	/^inline const uint160 operator|(const uint160& a, const uint160& b)      { return (base_uint160)a |  (base_uint160)b; }$/;"	f
operator |	server/uint256.h	/^inline const uint256 operator|(const base_uint256& a, const base_uint256& b) { return uint256(a) |= b; }$/;"	f
operator |	server/uint256.h	/^inline const uint256 operator|(const base_uint256& a, const uint256& b) { return (base_uint256)a |  (base_uint256)b; }$/;"	f
operator |	server/uint256.h	/^inline const uint256 operator|(const uint256& a, const base_uint256& b) { return (base_uint256)a |  (base_uint256)b; }$/;"	f
operator |	server/uint256.h	/^inline const uint256 operator|(const uint256& a, const uint256& b)      { return (base_uint256)a |  (base_uint256)b; }$/;"	f
operator |=	server/uint256.h	/^    base_uint& operator|=(const base_uint& b)$/;"	f	class:base_uint
operator |=	server/uint256.h	/^    base_uint& operator|=(uint64 b)$/;"	f	class:base_uint
operator ~	server/uint256.h	/^    const base_uint operator~() const$/;"	f	class:base_uint
options	server/leveldb.h	/^    leveldb::Options options;$/;"	m	class:CLevelDB
other	server/allocators.h	/^    { typedef secure_allocator<_Other> other; };$/;"	t	struct:secure_allocator::rebind
other	server/allocators.h	/^    { typedef zero_after_free_allocator<_Other> other; };$/;"	t	struct:zero_after_free_allocator::rebind
pSHA256InitState	server/main.cpp	/^static const unsigned int pSHA256InitState[8] =$/;"	v	file:
param1	server/net.h	/^    void* param1;$/;"	m	class:CRequestTracker
params	server/bitcoinrpc.cpp	/^    Array params;$/;"	m	class:JSONRequest	file:
parse	server/bitcoinrpc.cpp	/^void JSONRequest::parse(const Value& valRequest)$/;"	f	class:JSONRequest
pathAddr	server/db.h	/^    boost::filesystem::path pathAddr;$/;"	m	class:CAddrDB
pathEnv	server/db.h	/^    boost::filesystem::path pathEnv;$/;"	m	class:CDBEnv
pbegin	server/serialize.h	/^    char* pbegin;$/;"	m	class:CFlatData
pchCommand	server/protocol.h	/^        char pchCommand[COMMAND_SIZE];$/;"	m	class:CMessageHeader
pchGarliCat	server/netbase.cpp	/^static const unsigned char pchGarliCat[] = {0xFD,0x60,0xDB,0x4D,0xDD,0xB5};$/;"	v	file:
pchIPv4	server/netbase.cpp	/^static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };$/;"	v	file:
pchMessageStart	server/main.cpp	/^unsigned char pchMessageStart[4] = { 0xd9, 0xd9, 0xf9, 0xbd };$/;"	v
pchMessageStart	server/protocol.h	/^        char pchMessageStart[MESSAGE_START_SIZE];$/;"	m	class:CMessageHeader
pchOnionCat	server/netbase.cpp	/^static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};$/;"	v	file:
pctx	server/bignum.h	/^    BN_CTX* pctx;$/;"	m	class:CAutoBN_CTX
pdb	server/db.h	/^    Db* pdb;$/;"	m	class:CDB
pdb	server/leveldb.h	/^    leveldb::DB *pdb;$/;"	m	class:CLevelDB
peer	server/bitcoinrpc.cpp	/^    typename Protocol::endpoint peer;$/;"	m	class:AcceptedConnectionImpl	file:
peer	stratum/stratum.h	/^  scrypt_peer peer;$/;"	m	struct:user_t
peer_address_to_string	server/bitcoinrpc.cpp	/^    virtual std::string peer_address_to_string() const$/;"	f	class:AcceptedConnectionImpl
pend	server/serialize.h	/^    char* pend;$/;"	m	class:CFlatData
penv	server/leveldb.h	/^    leveldb::Env *penv;$/;"	m	class:CLevelDB
phashBlock	server/main.h	/^    const uint256* phashBlock;$/;"	m	class:CBlockIndex
phexdigit	server/util.cpp	/^static signed char phexdigit[256] =$/;"	v	file:
pid_t	server/util.h	/^typedef int pid_t; \/* define for windows compatiblity *\/$/;"	t
pindex	server/rpcdump.cpp	/^    CBlockIndex *pindex;$/;"	m	class:CTxDump	file:
pindexBest	server/main.cpp	/^CBlockIndex* pindexBest = NULL;$/;"	v
pindexGenesisBlock	server/main.cpp	/^CBlockIndex* pindexGenesisBlock = NULL;$/;"	v
pindexLastGetBlocksBegin	server/net.h	/^    CBlockIndex* pindexLastGetBlocksBegin;$/;"	m	class:CNode
pkey	server/key.h	/^    EC_KEY* pkey;$/;"	m	class:CKey
pn	server/uint256.h	/^    unsigned int pn[WIDTH];$/;"	m	class:base_uint
pnSeed	server_iface.cpp	/^unsigned int pnSeed[] = {};$/;"	v
pnext	server/main.h	/^    CBlockIndex* pnext;$/;"	m	class:CBlockIndex
pnodeLocalHost	server_iface.cpp	/^static CNode* pnodeLocalHost = NULL;$/;"	v	file:
pointer	server/allocators.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:secure_allocator
pointer	server/allocators.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:zero_after_free_allocator
pop_lock	server/sync.cpp	/^static void pop_lock()$/;"	f	file:
popstack	server/script.cpp	/^static inline void popstack(vector<valtype>& stack)$/;"	f	file:
port	server/irc.cpp	/^    short port;$/;"	m	struct:ircaddr	file:
port	server/netbase.h	/^        unsigned short port; \/\/ host order$/;"	m	class:CService
pos	server/main.h	/^    CDiskTxPos pos;$/;"	m	class:CTxIndex
post	server/sync.h	/^    void post() {$/;"	f	class:CSemaphore
potential_deadlock_detected	server/sync.cpp	/^static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)$/;"	f	file:
ppmutexOpenSSL	server/util.cpp	/^static CCriticalSection** ppmutexOpenSSL;$/;"	v	file:
pprev	server/main.h	/^    CBlockIndex* pprev;$/;"	m	class:CBlockIndex
ppszTypeName	server/protocol.cpp	/^static const char* ppszTypeName[] =$/;"	v	file:
prev_hash	stratum/stratum.h	/^  char prev_hash[256];$/;"	m	struct:task_t
prevout	server/main.h	/^    COutPoint prevout;$/;"	m	class:CTxIn
print	server/main.cpp	/^    void print() const$/;"	f	class:COrphan
print	server/main.h	/^    void print() const$/;"	f	class:CBlock
print	server/main.h	/^    void print() const$/;"	f	class:CBlockIndex
print	server/main.h	/^    void print() const$/;"	f	class:CDiskBlockIndex
print	server/main.h	/^    void print() const$/;"	f	class:CDiskTxPos
print	server/main.h	/^    void print() const$/;"	f	class:COutPoint
print	server/main.h	/^    void print() const$/;"	f	class:CTransaction
print	server/main.h	/^    void print() const$/;"	f	class:CTxIn
print	server/main.h	/^    void print() const$/;"	f	class:CTxOut
print	server/main.h	/^    void print() const$/;"	f	class:CUnsignedAlert
print	server/netbase.cpp	/^void CNetAddr::print() const$/;"	f	class:CNetAddr
print	server/netbase.cpp	/^void CService::print() const$/;"	f	class:CService
print	server/protocol.cpp	/^void CInv::print() const$/;"	f	class:CInv
print	server/script.h	/^    void print() const$/;"	f	class:CScript
print	server/wallet.h	/^    void print() const$/;"	f	class:COutput
printf	block_iface.cpp	37;"	d	file:
printf	block_iface.cpp	52;"	d	file:
printf	server/bitcoinrpc.cpp	22;"	d	file:
printf	server/bitcoinrpc.cpp	39;"	d	file:
printf	server/rpcdump.cpp	14;"	d	file:
printf	server/util.h	41;"	d
proxyInfo	server/netbase.cpp	/^static proxyType proxyInfo[NET_MAX];$/;"	v	file:
proxyType	server/netbase.cpp	/^typedef std::pair<CService, int> proxyType;$/;"	t	file:
pszBase58	server/base58.h	/^static const char* pszBase58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";$/;"	v
ptx	server/main.cpp	/^    CTransaction* ptx;$/;"	m	class:COrphan	file:
ptx	server/main.h	/^    CTransaction* ptx;$/;"	m	class:CInPoint
ptx	server/rpcdump.cpp	/^    CWalletTx* ptx;$/;"	m	class:CTxDump	file:
push_int64	server/script.h	/^    CScript& push_int64(int64 n)$/;"	f	class:CScript
push_lock	server/sync.cpp	/^static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)$/;"	f	file:
push_uint64	server/script.h	/^    CScript& push_uint64(uint64 n)$/;"	f	class:CScript
pwallet	server/wallet.h	/^    CWallet* pwallet;$/;"	m	class:CReserveKey
pwallet	server/wallet.h	/^    const CWallet* pwallet;$/;"	m	class:CWalletTx
pwalletdbEncryption	server/wallet.h	/^    CWalletDB *pwalletdbEncryption;$/;"	m	class:CWallet
queryHashes	server/main.cpp	/^void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)$/;"	f	class:CTxMemPool
queue	server/mruset.h	/^    std::deque<T> queue;$/;"	m	class:mruset
rdbuf	server/serialize.h	/^    CDataStream* rdbuf()         { return this; }$/;"	f	class:CDataStream
read	server/bitcoinrpc.cpp	/^    std::streamsize read(char* s, std::streamsize n)$/;"	f	class:SSLIOStreamDevice
read	server/serialize.h	/^    CAutoFile& read(char* pch, size_t nSize)$/;"	f	class:CAutoFile
read	server/serialize.h	/^    CDataStream& read(char* pch, int nSize)$/;"	f	class:CDataStream
readoptions	server/leveldb.h	/^    leveldb::ReadOptions readoptions;$/;"	m	class:CLevelDB
real_strprintf	server/util.cpp	/^string real_strprintf(const std::string &format, int dummy, ...)$/;"	f
rebind	server/allocators.h	/^    template<typename _Other> struct rebind$/;"	s	struct:secure_allocator
rebind	server/allocators.h	/^    template<typename _Other> struct rebind$/;"	s	struct:zero_after_free_allocator
reference	server/allocators.h	/^    typedef typename base::reference reference;$/;"	t	struct:secure_allocator
reference	server/allocators.h	/^    typedef typename base::reference reference;$/;"	t	struct:zero_after_free_allocator
reference	server/serialize.h	/^    typedef vector_type::reference        reference;$/;"	t	class:CDataStream
register_client	shcoind_daemon.c	/^user_t *register_client(int fd)$/;"	f
register_client_task	shcoind_daemon.c	/^int register_client_task(user_t *user, char *json_text)$/;"	f
release	server/serialize.h	/^    FILE* release()             { FILE* ret = file; file = NULL; return ret; }$/;"	f	class:CAutoFile
remove	server/main.cpp	/^bool CTxMemPool::remove(CTransaction &tx)$/;"	f	class:CTxMemPool
reserve	server/serialize.h	/^    void reserve(size_type n)                        { vch.reserve(n + nReadPos); }$/;"	f	class:CDataStream
resize	server/serialize.h	/^    void resize(size_type n, value_type c=0)         { vch.resize(n + nReadPos, c); }$/;"	f	class:CDataStream
reverse_iterator	server/serialize.h	/^    typedef vector_type::reverse_iterator reverse_iterator;$/;"	t	class:CDataStream
rfc1123Time	server/bitcoinrpc.cpp	/^string rfc1123Time()$/;"	f
round_stamp	stratum/stratum.h	/^  time_t round_stamp;$/;"	m	struct:user_t
roundint	server/util.h	/^inline int roundint(double d)$/;"	f
roundint64	server/util.h	/^inline int64 roundint64(double d)$/;"	f
rpcfn_type	server/bitcoinrpc.h	/^typedef json_spirit::Value(*rpcfn_type)(const json_spirit::Array& params, bool fHelp);$/;"	t	class:json_spirit
runCommand	server/util.cpp	/^void runCommand(std::string strCommand)$/;"	f
script	server/script.cpp	/^    CScript *script;$/;"	m	class:CScriptVisitor	file:
scriptPubKey	server/main.h	/^    CScript scriptPubKey;$/;"	m	class:CTxOut
scriptSig	server/main.h	/^    CScript scriptSig;$/;"	m	class:CTxIn
secure_allocator	server/allocators.h	/^    secure_allocator() throw() {}$/;"	f	struct:secure_allocator
secure_allocator	server/allocators.h	/^    secure_allocator(const secure_allocator& a) throw() : base(a) {}$/;"	f	struct:secure_allocator
secure_allocator	server/allocators.h	/^    secure_allocator(const secure_allocator<U>& a) throw() : base(a) {}$/;"	f	struct:secure_allocator
secure_allocator	server/allocators.h	/^struct secure_allocator : public std::allocator<T>$/;"	s
sem	server/sync.h	/^    CSemaphore *sem;$/;"	m	class:CSemaphoreGrant
semOutbound	server_iface.cpp	/^static CSemaphore *semOutbound = NULL;$/;"	v	file:
sendfrom	server/bitcoinrpc.cpp	/^Value sendfrom(const Array& params, bool fHelp)$/;"	f
sendmany	server/bitcoinrpc.cpp	/^Value sendmany(const Array& params, bool fHelp)$/;"	f
sendrawtransaction	server/rpcrawtransaction.cpp	/^Value sendrawtransaction(const Array& params, bool fHelp)$/;"	f
sendtoaddress	server/bitcoinrpc.cpp	/^Value sendtoaddress(const Array& params, bool fHelp)$/;"	f
ser_streamplaceholder	server/serialize.h	/^struct ser_streamplaceholder$/;"	s
server_fd	shcoind.c	/^int server_fd;$/;"	v
server_msg_buff	shcoind.c	/^shbuf_t *server_msg_buff;$/;"	v
server_msgq	shcoind.c	/^int server_msgq;$/;"	v
server_peer	shcoind.c	/^shpeer_t *server_peer;$/;"	v
server_shutdown	server/init.cpp	/^void server_shutdown(void)$/;"	f
set	server/mruset.h	/^    std::set<T> set;$/;"	m	class:mruset
setAddrKnown	server/net.h	/^    std::set<CAddress> setAddrKnown;$/;"	m	class:CNode
setBanned	server/net.h	/^    static std::map<CNetAddr, int64> setBanned;$/;"	m	class:CNode
setBanned	server_iface.cpp	/^std::map<CNetAddr, int64> CNode::setBanned;$/;"	m	class:CNode	file:
setCancel	server/main.h	/^    std::set<int> setCancel;$/;"	m	class:CUnsignedAlert
setDependsOn	server/main.cpp	/^    set<uint256> setDependsOn;$/;"	m	class:COrphan	file:
setInventoryKnown	server/net.h	/^    mruset<CInv> setInventoryKnown;$/;"	m	class:CNode
setKeyPool	server/wallet.h	/^    std::set<int64> setKeyPool;$/;"	m	class:CWallet
setKnown	server/net.h	/^    std::set<uint256> setKnown;$/;"	m	class:CNode
setSubVer	server/main.h	/^    std::set<std::string> setSubVer;  \/\/ empty matches all$/;"	m	class:CUnsignedAlert
setValid	server/script.cpp	/^    std::set< sigdata_type> setValid;$/;"	m	class:CSignatureCache	file:
setaccount	server/bitcoinrpc.cpp	/^Value setaccount(const Array& params, bool fHelp)$/;"	f
setblockreward	wallet_iface.cpp	/^int setblockreward(const char *accountName, double amount)$/;"	f
setgenerate	server/bitcoinrpc.cpp	/^Value setgenerate(const Array& params, bool fHelp)$/;"	f
setint64	server/bignum.h	/^    void setint64(int64 sn)$/;"	f	class:CBigNum
setmininput	server/bitcoinrpc.cpp	/^Value setmininput(const Array& params, bool fHelp)$/;"	f
setpwalletRegistered	server/main.cpp	/^set<CWallet*> setpwalletRegistered;$/;"	v
setservAddNodeAddresses	server_iface.cpp	/^set<CNetAddr> setservAddNodeAddresses;$/;"	v
setstate	server/serialize.h	/^    void setstate(short bits, const char* psz)$/;"	f	class:CAutoFile
setstate	server/serialize.h	/^    void setstate(short bits, const char* psz)$/;"	f	class:CDataStream
settxfee	server/bitcoinrpc.cpp	/^Value settxfee(const Array& params, bool fHelp)$/;"	f
setuint256	server/bignum.h	/^    void setuint256(uint256 n)$/;"	f	class:CBigNum
setuint64	server/bignum.h	/^    void setuint64(uint64 n)$/;"	f	class:CBigNum
setulong	server/bignum.h	/^    void setulong(unsigned long n)$/;"	f	class:CBigNum
setvch	server/bignum.h	/^    void setvch(const std::vector<unsigned char>& vch)$/;"	f	class:CBigNum
share_file	stratum/stratum.h	/^  shfs_ino_t *share_file; $/;"	m	struct:task_t
share_list	stratum/stratum.h	/^  shmeta_t *share_list;$/;"	m	struct:task_t
shcoind_poll_msg_queue	shcoind_daemon.c	/^void shcoind_poll_msg_queue(void)$/;"	f
sigdata_type	server/script.cpp	/^    typedef boost::tuple<uint256, std::vector<unsigned char>, std::vector<unsigned char> > sigdata_type;$/;"	t	class:CSignatureCache	file:
signmessage	server/bitcoinrpc.cpp	/^Value signmessage(const Array& params, bool fHelp)$/;"	f
signrawtransaction	server/rpcrawtransaction.cpp	/^Value signrawtransaction(const Array& params, bool fHelp)$/;"	f
size	server/addrman.h	/^    int size()$/;"	f	class:CAddrMan
size	server/main.h	/^    unsigned long size()$/;"	f	class:CTxMemPool
size	server/mruset.h	/^    size_type size() const { return set.size(); }$/;"	f	class:mruset
size	server/serialize.h	/^    size_type size() const                           { return vch.size() - nReadPos; }$/;"	f	class:CDataStream
size	server/uint256.h	/^    unsigned int size()$/;"	f	class:base_uint
size	server/util.h	/^    int size() const$/;"	f	class:CMedianFilter
size_type	server/allocators.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:secure_allocator
size_type	server/allocators.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:zero_after_free_allocator
size_type	server/mruset.h	/^    typedef typename std::set<T>::size_type size_type;$/;"	t	class:mruset
size_type	server/serialize.h	/^    typedef vector_type::size_type        size_type;$/;"	t	class:CDataStream
skipspaces	server/util.h	/^void skipspaces(T& it)$/;"	f
socklen_t	server/compat.h	/^typedef int socklen_t;$/;"	t
sorted	server/util.h	/^    std::vector<T> sorted () const$/;"	f	class:CMedianFilter
source	server/addrman.h	/^    CNetAddr source;$/;"	m	class:CAddrInfo
sourceFile	server/sync.cpp	/^    std::string sourceFile;$/;"	m	struct:CLockLocation	file:
sourceLine	server/sync.cpp	/^    int sourceLine;$/;"	m	struct:CLockLocation	file:
speed	stratum/stratum.h	/^double speed[MAX_SPEED_STEP];$/;"	m	struct:user_t
sslStream	server/bitcoinrpc.cpp	/^    asio::ssl::stream<typename Protocol::socket> sslStream;$/;"	m	class:AcceptedConnectionImpl	file:
stacktop	server/script.cpp	76;"	d	file:
start_node	server_iface.cpp	/^void start_node(void)$/;"	f
start_node_peer	server_iface.cpp	/^void start_node_peer(const char *host, int port)$/;"	f
state	server/serialize.h	/^    short state;$/;"	m	class:CAutoFile
state	server/serialize.h	/^    short state;$/;"	m	class:CDataStream
stop	server/bitcoinrpc.cpp	/^Value stop(const Array& params, bool fHelp)$/;"	f
str	server/serialize.h	/^    std::string str() const$/;"	f	class:CDataStream
strAccount	server/wallet.h	/^    std::string strAccount;$/;"	m	class:CAccountingEntry
strComment	server/main.h	/^    std::string strComment;$/;"	m	class:CUnsignedAlert
strComment	server/wallet.h	/^    std::string strComment;$/;"	m	class:CAccountingEntry
strComment	server/wallet.h	/^    std::string strComment;$/;"	m	class:CWalletKey
strFile	server/db.h	/^    std::string strFile;$/;"	m	class:CDB
strFromAccount	server/wallet.h	/^    std::string strFromAccount;$/;"	m	class:CWalletTx
strMessageMagic	server/main.cpp	/^const string strMessageMagic = "usde Signed Message:\\n";$/;"	v
strMethod	server/bitcoinrpc.cpp	/^    string strMethod;$/;"	m	class:JSONRequest	file:
strMiscWarning	server/util.cpp	/^string strMiscWarning;$/;"	v
strOtherAccount	server/wallet.h	/^    std::string strOtherAccount;$/;"	m	class:CAccountingEntry
strRPCUserColonPass	server/bitcoinrpc.cpp	/^static std::string strRPCUserColonPass;$/;"	v	file:
strReserved	server/main.h	/^    std::string strReserved;$/;"	m	class:CUnsignedAlert
strStatusBar	server/main.h	/^    std::string strStatusBar;$/;"	m	class:CUnsignedAlert
strSubVer	server/net.h	/^    std::string strSubVer;$/;"	m	class:CNode
strSubVer	server/net.h	/^    std::string strSubVer;$/;"	m	class:CNodeStats
strWalletFile	server/wallet.h	/^    std::string strWalletFile;$/;"	m	class:CWallet
stream	server/bitcoinrpc.cpp	/^    asio::ssl::stream<typename Protocol::socket>& stream;$/;"	m	class:SSLIOStreamDevice	file:
stream	server/bitcoinrpc.cpp	/^    virtual std::iostream& stream()$/;"	f	class:AcceptedConnectionImpl
strlcat	server/strlcpy.h	/^inline size_t strlcat(char *dst, const char *src, size_t siz)$/;"	f
strlcpy	server/strlcpy.h	/^inline size_t strlcpy(char *dst, const char *src, size_t siz)$/;"	f
strlwr	server/util.h	83;"	d
strprintf	server/util.h	129;"	d
submit_block_hash	block_iface.cpp	/^string submit_block_hash;$/;"	v
submitblock	block_iface.cpp	/^const char *submitblock(unsigned int workId, unsigned int nTime, unsigned int nNonce, char *xn_hex)$/;"	f
syncoptions	server/leveldb.h	/^    leveldb::WriteOptions syncoptions;$/;"	m	class:CLevelDB
tableRPC	server/bitcoinrpc.cpp	/^const CRPCTable tableRPC;$/;"	v
tallyitem	server/bitcoinrpc.cpp	/^    tallyitem()$/;"	f	struct:tallyitem
tallyitem	server/bitcoinrpc.cpp	/^struct tallyitem$/;"	s	file:
target	stratum/stratum.h	/^  double target;$/;"	m	struct:task_t
task_id	stratum/stratum.h	/^  unsigned int task_id;$/;"	m	struct:task_t
task_t	stratum/stratum.h	/^typedef struct task_t$/;"	s
task_t	stratum/stratum.h	/^} task_t;$/;"	t	typeref:struct:task_t
threadId	server/net.h	/^enum threadId$/;"	g
tmpl_merkle	stratum/stratum.h	/^  char tmpl_merkle[256];$/;"	m	struct:task_t
tmpl_xnonce1	stratum/stratum.h	/^  char tmpl_xnonce1[16];$/;"	m	struct:task_t
transactioninfo_json	block_iface.cpp	/^string transactioninfo_json;$/;"	v
try_wait	server/sync.h	/^    bool try_wait() {$/;"	f	class:CSemaphore
tx	server/wallet.h	/^    const CWalletTx *tx;$/;"	m	class:COutput
txnouttype	server/script.h	/^enum txnouttype$/;"	g
type	server/protocol.h	/^        int type;$/;"	m	class:CInv
uint160	server/uint256.h	/^    explicit uint160(const std::string& str)$/;"	f	class:uint160
uint160	server/uint256.h	/^    explicit uint160(const std::vector<unsigned char>& vch)$/;"	f	class:uint160
uint160	server/uint256.h	/^    uint160()$/;"	f	class:uint160
uint160	server/uint256.h	/^    uint160(const basetype& b)$/;"	f	class:uint160
uint160	server/uint256.h	/^    uint160(uint64 b)$/;"	f	class:uint160
uint160	server/uint256.h	/^class uint160 : public base_uint160$/;"	c
uint256	server/uint256.h	/^    explicit uint256(const std::string& str)$/;"	f	class:uint256
uint256	server/uint256.h	/^    explicit uint256(const std::vector<unsigned char>& vch)$/;"	f	class:uint256
uint256	server/uint256.h	/^    uint256()$/;"	f	class:uint256
uint256	server/uint256.h	/^    uint256(const basetype& b)$/;"	f	class:uint256
uint256	server/uint256.h	/^    uint256(uint64 b)$/;"	f	class:uint256
uint256	server/uint256.h	/^class uint256 : public base_uint256$/;"	c
uint64	proto/types.h	/^typedef unsigned long long  uint64;$/;"	t
uint64	server/serialize.h	/^typedef unsigned long long  uint64;$/;"	t
uint64	server/uint256.h	/^typedef unsigned long long  uint64;$/;"	t
unlink	server/util.h	80;"	d
usage_help	shcoind.c	/^void usage_help(void)$/;"	f
usage_version	shcoind.c	/^void usage_version(void)$/;"	f
user_t	stratum/stratum.h	/^typedef struct user_t$/;"	s
user_t	stratum/stratum.h	/^} user_t;$/;"	t	typeref:struct:user_t
vAddrToSend	server/net.h	/^    std::vector<CAddress> vAddrToSend;$/;"	m	class:CNode
vHave	server/main.h	/^    std::vector<uint256> vHave;$/;"	m	class:CBlockLocator
vInventoryToSend	server/net.h	/^    std::vector<CInv> vInventoryToSend;$/;"	m	class:CNode
vMasterKey	server/keystore.h	/^    CKeyingMaterial vMasterKey;$/;"	m	class:CCryptoKeyStore
vMerkleBranch	server/main.h	/^    std::vector<uint256> vMerkleBranch;$/;"	m	class:CMerkleTx
vMerkleTree	server/main.h	/^    mutable std::vector<uint256> vMerkleTree;$/;"	m	class:CBlock
vNodes	server_iface.cpp	/^vector<CNode*> vNodes;$/;"	v
vOneShots	server_iface.cpp	/^static deque<string> vOneShots;$/;"	v	file:
vOrderForm	server/wallet.h	/^    std::vector<std::pair<std::string, std::string> > vOrderForm;$/;"	m	class:CWalletTx
vRPCCommands	server/bitcoinrpc.cpp	/^static const CRPCCommand vRPCCommands[] =$/;"	v	file:
vRandom	server/addrman.h	/^    std::vector<int> vRandom;$/;"	m	class:CAddrMan
vRecv	server/net.h	/^    CDataStream vRecv;$/;"	m	class:CNode
vRelayExpiration	server_iface.cpp	/^deque<pair<int64, CInv> > vRelayExpiration;$/;"	v
vSend	server/net.h	/^    CDataStream vSend;$/;"	m	class:CNode
vSorted	server/util.h	/^    std::vector<T> vSorted;$/;"	m	class:CMedianFilter
vSpent	server/main.h	/^    std::vector<CDiskTxPos> vSpent;$/;"	m	class:CTxIndex
vValues	server/util.h	/^    std::vector<T> vValues;$/;"	m	class:CMedianFilter
validateaddress	server/bitcoinrpc.cpp	/^Value validateaddress(const Array& params, bool fHelp)$/;"	f
valtype	server/script.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
value	server/sync.h	/^    int value;$/;"	m	class:CSemaphore
value_type	server/allocators.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:secure_allocator
value_type	server/allocators.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:zero_after_free_allocator
value_type	server/mruset.h	/^    typedef T value_type;$/;"	t	class:mruset
value_type	server/serialize.h	/^    typedef vector_type::value_type       value_type;$/;"	t	class:CDataStream
vch	server/serialize.h	/^    vector_type vch;$/;"	m	class:CDataStream
vchCryptedKey	server/crypter.h	/^    std::vector<unsigned char> vchCryptedKey;$/;"	m	class:CMasterKey
vchData	server/base58.h	/^    std::vector<unsigned char> vchData;$/;"	m	class:CBase58Data
vchDefaultKey	server/wallet.h	/^    CPubKey vchDefaultKey;$/;"	m	class:CWallet
vchMsg	server/main.h	/^    std::vector<unsigned char> vchMsg;$/;"	m	class:CAlert
vchOtherDerivationParameters	server/crypter.h	/^    std::vector<unsigned char> vchOtherDerivationParameters;$/;"	m	class:CMasterKey
vchPrivKey	server/wallet.h	/^    CPrivKey vchPrivKey;$/;"	m	class:CWalletKey
vchPubKey	server/key.h	/^    std::vector<unsigned char> vchPubKey;$/;"	m	class:CPubKey
vchPubKey	server/wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CAccount
vchPubKey	server/wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CKeyPool
vchPubKey	server/wallet.h	/^    CPubKey vchPubKey;$/;"	m	class:CReserveKey
vchSalt	server/crypter.h	/^    std::vector<unsigned char> vchSalt;$/;"	m	class:CMasterKey
vchSig	server/main.h	/^    std::vector<unsigned char> vchSig;$/;"	m	class:CAlert
vector_type	server/serialize.h	/^    typedef std::vector<char, zero_after_free_allocator<char> > vector_type;$/;"	t	class:CDataStream
verifymessage	server/bitcoinrpc.cpp	/^Value verifymessage(const Array& params, bool fHelp)$/;"	f
version	stratum/stratum.h	/^  int version;$/;"	m	struct:task_t
vfLimited	server_iface.cpp	/^static bool vfLimited[NET_MAX] = {};$/;"	v	file:
vfReachable	server_iface.cpp	/^static bool vfReachable[NET_MAX] = {};$/;"	v	file:
vfSpent	server/wallet.h	/^    std::vector<char> vfSpent; \/\/ which outputs are already spent$/;"	m	class:CWalletTx
vhListenSocket	server_iface.cpp	/^static std::vector<SOCKET> vhListenSocket;$/;"	v	file:
vin	server/main.h	/^    std::vector<CTxIn> vin;$/;"	m	class:CTransaction
vnThreadsRunning	server_iface.cpp	/^boost::array<int, THREAD_MAX> vnThreadsRunning;$/;"	v
vout	server/main.h	/^    std::vector<CTxOut> vout;$/;"	m	class:CTransaction
vstrprintf	server/util.cpp	/^string vstrprintf(const std::string &format, va_list ap)$/;"	f
vtx	server/main.h	/^    std::vector<CTransaction> vtx;$/;"	m	class:CBlock
vtxPrev	server/wallet.h	/^    std::vector<CMerkleTx> vtxPrev;$/;"	m	class:CWalletTx
vvNew	server/addrman.h	/^    std::vector<std::set<int> > vvNew;$/;"	m	class:CAddrMan
vvTried	server/addrman.h	/^    std::vector<std::vector<int> > vvTried;$/;"	m	class:CAddrMan
wait	server/sync.h	/^    void wait() {$/;"	f	class:CSemaphore
wallet_account_transfer	wallet_iface.cpp	/^int wallet_account_transfer(const char *sourceAccountName, const char *accountName, const char *comment, double amount)$/;"	f
walletlock	server/bitcoinrpc.cpp	/^Value walletlock(const Array& params, bool fHelp)$/;"	f
walletpassphrase	server/bitcoinrpc.cpp	/^Value walletpassphrase(const Array& params, bool fHelp)$/;"	f
walletpassphrasechange	server/bitcoinrpc.cpp	/^Value walletpassphrasechange(const Array& params, bool fHelp)$/;"	f
work	stratum/stratum.h	/^  scrypt_work work;$/;"	m	struct:task_t
work_diff	stratum/stratum.h	/^  int work_diff;$/;"	m	struct:user_t
work_reset	stratum/stratum.h	/^  int work_reset;$/;"	m	struct:task_t
worker	stratum/stratum.h	/^  char worker[128];$/;"	m	struct:user_t
write	server/bitcoinrpc.cpp	/^    std::streamsize write(const char* s, std::streamsize n)$/;"	f	class:SSLIOStreamDevice
write	server/serialize.h	/^    CAutoFile& write(const char* pch, size_t nSize)$/;"	f	class:CAutoFile
write	server/serialize.h	/^    CDataStream& write(const char* pch, int nSize)$/;"	f	class:CDataStream
write	server/util.h	/^    CHashWriter& write(const char *pch, size_t size) {$/;"	f	class:CHashWriter
writeoptions	server/leveldb.h	/^    leveldb::WriteOptions writeoptions;$/;"	m	class:CLevelDB
xnonce2	stratum/stratum.h	/^  char xnonce2[16];$/;"	m	struct:task_t
zero_after_free_allocator	server/allocators.h	/^    zero_after_free_allocator() throw() {}$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	server/allocators.h	/^    zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	server/allocators.h	/^    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a) {}$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	server/allocators.h	/^struct zero_after_free_allocator : public std::allocator<T>$/;"	s
~AcceptedConnection	server/bitcoinrpc.cpp	/^    virtual ~AcceptedConnection() {}$/;"	f	class:AcceptedConnection
~CAutoBN_CTX	server/bignum.h	/^    ~CAutoBN_CTX()$/;"	f	class:CAutoBN_CTX
~CAutoFile	server/serialize.h	/^    ~CAutoFile()$/;"	f	class:CAutoFile
~CBase58Data	server/base58.h	/^    ~CBase58Data()$/;"	f	class:CBase58Data
~CBigNum	server/bignum.h	/^    ~CBigNum()$/;"	f	class:CBigNum
~CCrypter	server/crypter.h	/^    ~CCrypter()$/;"	f	class:CCrypter
~CDB	server/db.h	/^    ~CDB() { Close(); }$/;"	f	class:CDB
~CDBEnv	server/db.cpp	/^CDBEnv::~CDBEnv()$/;"	f	class:CDBEnv
~CInit	server/util.cpp	/^    ~CInit()$/;"	f	class:CInit
~CKey	server/key.cpp	/^CKey::~CKey()$/;"	f	class:CKey
~CKeyStore	server/keystore.h	/^    virtual ~CKeyStore() {}$/;"	f	class:CKeyStore
~CLevelDB	server/leveldb.cpp	/^CLevelDB::~CLevelDB() {$/;"	f	class:CLevelDB
~CMutexLock	server/sync.h	/^    ~CMutexLock()$/;"	f	class:CMutexLock
~CNetCleanup	server_iface.cpp	/^    ~CNetCleanup()$/;"	f	class:CNetCleanup
~CNode	server/net.h	/^    ~CNode()$/;"	f	class:CNode
~CReserveKey	server/wallet.h	/^    ~CReserveKey()$/;"	f	class:CReserveKey
~CSemaphoreGrant	server/sync.h	/^    ~CSemaphoreGrant() {$/;"	f	class:CSemaphoreGrant
~secure_allocator	server/allocators.h	/^    ~secure_allocator() throw() {}$/;"	f	struct:secure_allocator
~zero_after_free_allocator	server/allocators.h	/^    ~zero_after_free_allocator() throw() {}$/;"	f	struct:zero_after_free_allocator
